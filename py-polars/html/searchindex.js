Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.approx_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.symmetric_difference", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.approx_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.symmetric_difference", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.approx_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.approx_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.symmetric_difference.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.approx_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.symmetric_difference", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.approx_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.symmetric_difference", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 97, 127, 145, 195, 264, 278, 477, 659, 694, 792, 842, 1005, 1145], "refer": [0, 33, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 120, 154, 278, 373, 376, 475, 476, 514, 559, 586, 587, 588, 591, 694, 718, 756, 804, 902, 905, 1025, 1101, 1102, 1103, 1106, 1145], "input": [0, 71, 77, 99, 107, 108, 149, 173, 176, 195, 205, 221, 222, 229, 243, 253, 254, 257, 278, 285, 388, 408, 469, 476, 477, 486, 503, 548, 614, 616, 618, 619, 621, 624, 627, 628, 629, 636, 645, 646, 653, 654, 655, 657, 658, 659, 661, 665, 673, 676, 678, 684, 694, 705, 710, 730, 733, 761, 762, 763, 769, 774, 780, 781, 785, 804, 934, 1001, 1002, 1004, 1005, 1145], "output": [0, 28, 30, 33, 34, 35, 36, 37, 50, 112, 146, 174, 175, 177, 178, 189, 195, 200, 205, 207, 215, 217, 221, 249, 253, 278, 288, 290, 292, 335, 473, 474, 475, 477, 485, 511, 522, 527, 529, 531, 533, 565, 611, 615, 617, 619, 630, 638, 639, 657, 658, 659, 681, 694, 705, 731, 732, 734, 735, 744, 745, 749, 750, 759, 761, 763, 780, 784, 787, 792, 804, 811, 812, 814, 859, 1005, 1023, 1080, 1133, 1145], "seri": [0, 1, 2, 13, 25, 62, 63, 72, 73, 74, 75, 79, 80, 81, 96, 98, 101, 103, 130, 132, 133, 137, 157, 165, 168, 170, 171, 174, 179, 182, 183, 185, 187, 196, 197, 201, 212, 213, 215, 219, 231, 235, 238, 241, 242, 258, 278, 291, 292, 303, 310, 318, 319, 321, 369, 391, 397, 406, 410, 413, 414, 417, 419, 420, 421, 433, 441, 444, 458, 459, 463, 464, 465, 471, 473, 475, 477, 508, 514, 515, 516, 517, 518, 520, 522, 523, 524, 530, 537, 540, 551, 575, 586, 587, 588, 591, 595, 601, 602, 610, 619, 620, 621, 625, 626, 631, 633, 634, 638, 639, 641, 642, 646, 647, 649, 651, 653, 654, 655, 656, 657, 658, 659, 662, 663, 666, 667, 669, 670, 673, 675, 676, 679, 681, 682, 683, 685, 694, 705, 727, 731, 759, 786, 804, 1137, 1139, 1141, 1144, 1146, 1149, 1150, 1151, 1153], "datafram": [0, 1, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 71, 72, 73, 74, 75, 77, 78, 79, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 124, 125, 126, 130, 131, 133, 134, 135, 143, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 643, 644, 645, 646, 647, 648, 649, 651, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 690, 694, 705, 715, 716, 719, 723, 724, 728, 731, 739, 740, 741, 742, 744, 745, 749, 750, 754, 758, 768, 769, 775, 776, 777, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 813, 828, 829, 840, 859, 860, 898, 930, 961, 962, 972, 1005, 1023, 1078, 1092, 1093, 1114, 1122, 1123, 1133, 1145, 1152, 1153], "lazyfram": [0, 1, 56, 57, 59, 61, 71, 72, 73, 74, 75, 77, 78, 79, 121, 122, 123, 124, 125, 126, 127, 130, 131, 137, 193, 206, 207, 222, 254, 278, 316, 394, 465, 694, 705, 803, 807, 1152, 1153], "express": [0, 50, 51, 52, 77, 78, 134, 137, 139, 149, 161, 163, 165, 173, 176, 195, 203, 207, 216, 221, 222, 229, 243, 253, 254, 257, 264, 278, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 302, 303, 310, 312, 313, 314, 316, 322, 323, 324, 325, 326, 327, 334, 335, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 383, 384, 388, 390, 391, 393, 394, 398, 400, 401, 402, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 423, 426, 431, 432, 434, 435, 436, 440, 441, 446, 448, 465, 471, 472, 474, 475, 476, 477, 481, 482, 483, 484, 485, 486, 488, 490, 492, 494, 498, 499, 500, 502, 503, 507, 508, 509, 510, 511, 513, 517, 518, 520, 535, 536, 537, 539, 541, 543, 544, 546, 548, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 570, 571, 572, 575, 576, 577, 578, 597, 598, 601, 603, 604, 607, 608, 610, 611, 613, 614, 615, 616, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 661, 665, 667, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 684, 685, 690, 693, 705, 710, 715, 716, 722, 723, 724, 727, 730, 733, 754, 761, 762, 766, 767, 769, 774, 780, 781, 782, 785, 792, 804, 807, 847, 848, 849, 858, 868, 920, 934, 967, 968, 972, 1005, 1046, 1053, 1067, 1068, 1069, 1074, 1075, 1076, 1077, 1078, 1086, 1087, 1145], "selector": [0, 33, 150, 156, 158, 161, 199, 205, 207, 237, 245, 247, 278, 388, 694, 705, 712, 719, 720, 723, 749, 775, 804], "extend": [0, 99, 251, 278, 391, 694, 705, 813, 920, 1145], "function": [0, 33, 62, 71, 72, 73, 74, 75, 78, 80, 81, 97, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 130, 131, 132, 133, 135, 145, 146, 154, 160, 168, 195, 199, 206, 207, 240, 244, 247, 248, 259, 264, 278, 288, 292, 334, 370, 385, 386, 387, 465, 473, 474, 475, 477, 503, 507, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 545, 605, 615, 619, 633, 634, 646, 647, 649, 655, 657, 658, 659, 669, 690, 694, 705, 715, 716, 718, 724, 744, 745, 749, 753, 756, 787, 792, 804, 814, 858, 899, 913, 914, 915, 916, 930, 997, 1005, 1023, 1033, 1034, 1048, 1049, 1055, 1060, 1127, 1145, 1153], "data": [0, 1, 6, 18, 19, 21, 30, 31, 32, 33, 34, 35, 39, 50, 51, 52, 56, 62, 71, 72, 74, 79, 81, 86, 87, 91, 93, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 126, 130, 131, 132, 133, 135, 136, 137, 139, 145, 152, 162, 172, 173, 174, 175, 176, 177, 178, 189, 190, 191, 193, 195, 205, 206, 210, 215, 216, 217, 218, 227, 234, 239, 240, 244, 253, 256, 276, 278, 288, 289, 290, 294, 295, 296, 297, 298, 299, 302, 305, 306, 307, 308, 310, 312, 313, 314, 317, 318, 325, 326, 327, 335, 336, 341, 342, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 377, 378, 379, 380, 381, 383, 384, 390, 401, 402, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 426, 431, 432, 434, 441, 446, 448, 467, 472, 477, 498, 499, 502, 503, 511, 513, 514, 517, 518, 520, 522, 534, 535, 543, 544, 545, 551, 553, 554, 556, 558, 559, 560, 561, 563, 564, 565, 570, 575, 576, 577, 578, 586, 587, 588, 591, 601, 603, 604, 605, 607, 608, 611, 614, 619, 621, 637, 638, 639, 640, 641, 642, 643, 653, 654, 656, 657, 658, 659, 667, 670, 680, 681, 682, 685, 690, 694, 705, 713, 714, 715, 724, 730, 731, 732, 733, 734, 735, 753, 759, 780, 804, 811, 812, 813, 824, 828, 829, 830, 832, 836, 838, 846, 850, 859, 866, 867, 870, 871, 872, 873, 874, 876, 877, 878, 879, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 903, 906, 907, 908, 909, 910, 918, 919, 930, 936, 938, 939, 940, 942, 943, 945, 946, 947, 948, 949, 950, 954, 963, 964, 966, 973, 978, 980, 999, 1005, 1017, 1023, 1025, 1029, 1031, 1044, 1045, 1055, 1060, 1066, 1067, 1068, 1069, 1071, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1085, 1090, 1091, 1092, 1093, 1101, 1102, 1103, 1106, 1125, 1126, 1127, 1128, 1130, 1135, 1144, 1145, 1152], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 86, 96, 98, 99, 100, 101, 102, 107, 108, 109, 111, 112, 116, 117, 118, 121, 122, 123, 125, 129, 130, 131, 132, 133, 136, 137, 146, 168, 172, 174, 175, 177, 178, 179, 190, 191, 195, 215, 234, 240, 242, 245, 278, 288, 290, 294, 295, 296, 297, 298, 299, 302, 310, 312, 313, 314, 317, 318, 319, 322, 323, 324, 325, 326, 327, 335, 336, 341, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 377, 378, 379, 381, 388, 390, 403, 408, 409, 410, 411, 412, 413, 414, 415, 416, 431, 432, 434, 441, 446, 448, 465, 476, 477, 511, 513, 517, 518, 520, 522, 543, 544, 551, 553, 554, 556, 558, 559, 560, 561, 563, 564, 565, 570, 575, 576, 577, 578, 586, 601, 603, 604, 605, 611, 619, 621, 637, 638, 639, 640, 641, 642, 643, 645, 646, 653, 654, 655, 656, 657, 658, 659, 667, 670, 680, 681, 682, 685, 690, 694, 705, 715, 716, 722, 724, 731, 732, 734, 735, 739, 754, 759, 767, 775, 804, 811, 812, 824, 830, 832, 836, 838, 840, 847, 848, 849, 859, 866, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 906, 907, 908, 910, 918, 928, 936, 938, 939, 940, 942, 943, 945, 946, 947, 948, 949, 950, 954, 963, 964, 966, 973, 978, 980, 997, 1017, 1023, 1029, 1031, 1055, 1066, 1067, 1068, 1069, 1071, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1085, 1090, 1091, 1092, 1093, 1101, 1125, 1126, 1128, 1136, 1145, 1152], "config": [0, 71, 221, 253, 278, 643, 705, 715, 761, 780, 804], "except": [0, 130, 180, 192, 194, 232, 278, 645, 705, 740, 804, 807, 929, 959, 1116, 1126, 1135, 1145], "test": [0, 6, 109, 110, 112, 118, 705, 736, 743, 804], "util": [0, 103, 649, 705, 724, 804], "sql": [0, 31, 56, 60, 109, 110, 191, 278, 674, 705], "These": [1, 33, 109, 143, 244, 278, 377, 693, 899, 906], "allow": [1, 32, 33, 50, 51, 52, 62, 81, 86, 97, 109, 121, 124, 125, 126, 127, 137, 139, 145, 189, 192, 193, 216, 217, 219, 239, 240, 245, 256, 278, 366, 373, 376, 475, 477, 516, 535, 586, 587, 588, 694, 739, 740, 744, 745, 749, 775, 782, 804, 807, 895, 902, 905, 1005, 1027, 1045, 1047, 1101, 1102, 1103, 1127, 1145, 1153], "you": [1, 15, 33, 38, 52, 61, 71, 78, 79, 96, 98, 99, 100, 102, 107, 108, 109, 110, 112, 113, 116, 117, 119, 121, 125, 126, 143, 162, 174, 175, 177, 178, 189, 195, 203, 207, 215, 216, 217, 218, 236, 239, 244, 264, 278, 322, 323, 324, 362, 363, 366, 369, 373, 376, 377, 388, 394, 408, 440, 465, 475, 476, 477, 516, 521, 522, 525, 526, 527, 528, 529, 531, 532, 533, 564, 633, 638, 643, 647, 659, 667, 670, 685, 694, 716, 720, 731, 732, 734, 735, 736, 743, 759, 767, 792, 804, 807, 813, 847, 848, 849, 891, 892, 898, 902, 905, 906, 919, 934, 972, 1005, 1027, 1032, 1079, 1103, 1126, 1135, 1145, 1153], "regist": [1, 56, 58, 59, 60, 61, 72, 73, 74, 75, 138, 140, 1152], "custom": [1, 32, 33, 72, 73, 74, 75, 138, 139, 140, 146, 195, 259, 264, 278, 292, 373, 376, 465, 473, 475, 477, 523, 524, 619, 657, 658, 659, 694, 744, 745, 787, 792, 804, 814, 902, 905, 997, 1005, 1033, 1034, 1145, 1153], "dedic": [1, 97, 189, 217, 278], "namespac": [1, 277, 693, 705, 803, 1153], "underli": [1, 62, 81, 89, 96, 98, 99, 100, 102, 109, 116, 117, 119, 125, 134, 137, 139, 161, 162, 189, 190, 217, 234, 278, 311, 342, 343, 347, 351, 353, 354, 355, 357, 359, 361, 364, 367, 368, 369, 371, 378, 379, 380, 381, 516, 534, 552, 555, 694, 723, 804, 807, 813, 831, 841, 867, 868, 872, 876, 878, 879, 883, 885, 888, 890, 893, 896, 897, 898, 900, 907, 908, 909, 910, 919, 1027, 1044, 1055, 1067, 1070, 1121, 1126, 1145], "polar": [1, 278, 693, 694, 699, 705, 804, 807, 1145, 1152], "class": [1, 2, 3, 4, 5, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 134, 135, 218, 240, 278, 681, 690, 694, 699, 705, 756, 804, 1125, 1126, 1145, 1152], "without": [1, 78, 103, 111, 114, 120, 122, 123, 127, 247, 248, 278, 292, 334, 370, 525, 526, 527, 528, 529, 531, 532, 533, 673, 694, 716, 804, 839, 842, 858, 899, 930, 1023, 1126, 1145], "requir": [1, 32, 33, 38, 52, 71, 97, 101, 109, 130, 131, 132, 133, 149, 154, 216, 240, 243, 278, 308, 385, 386, 387, 467, 477, 540, 586, 587, 588, 608, 670, 694, 710, 769, 774, 804, 829, 914, 915, 916, 999, 1054, 1101, 1102, 1103, 1126, 1127, 1130, 1145], "subclass": [1, 278], "mixin": 1, "expr": [1, 71, 72, 73, 74, 75, 161, 163, 191, 192, 203, 207, 216, 221, 222, 253, 254, 278, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 690, 694, 695, 696, 699, 700, 701, 702, 723, 725, 739, 740, 755, 761, 762, 763, 766, 780, 781, 804, 858, 868, 895, 906, 921, 961, 962, 967, 968, 972, 976, 991, 995, 1053, 1067, 1072, 1094, 1117, 1145], "ar": [1, 13, 17, 20, 28, 30, 32, 33, 50, 51, 52, 61, 62, 71, 78, 79, 80, 81, 88, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 135, 137, 143, 145, 149, 154, 158, 160, 163, 167, 168, 172, 173, 174, 175, 176, 177, 178, 189, 191, 192, 193, 195, 199, 200, 205, 207, 215, 216, 217, 218, 221, 222, 223, 229, 235, 240, 243, 248, 249, 253, 254, 257, 278, 288, 290, 316, 328, 330, 332, 333, 370, 377, 382, 384, 385, 386, 387, 408, 410, 413, 414, 417, 419, 420, 421, 424, 427, 429, 448, 465, 475, 476, 499, 503, 511, 514, 517, 518, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 542, 545, 547, 548, 561, 562, 563, 570, 599, 615, 616, 618, 624, 627, 628, 629, 630, 636, 638, 639, 641, 642, 661, 665, 673, 676, 678, 681, 682, 684, 686, 687, 689, 693, 694, 695, 696, 699, 700, 701, 702, 705, 710, 715, 716, 720, 724, 725, 730, 731, 732, 733, 734, 735, 736, 739, 740, 743, 745, 749, 750, 754, 757, 759, 761, 762, 764, 769, 774, 777, 780, 781, 782, 785, 804, 807, 811, 812, 813, 839, 856, 857, 899, 906, 912, 913, 914, 915, 916, 927, 934, 938, 942, 943, 947, 948, 949, 950, 957, 958, 961, 980, 997, 1023, 1025, 1029, 1040, 1057, 1060, 1076, 1077, 1085, 1103, 1115, 1126, 1127, 1135, 1137, 1139, 1141, 1145, 1146, 1149, 1150, 1151, 1153], "all": [1, 9, 17, 20, 25, 28, 30, 33, 39, 50, 58, 71, 77, 96, 99, 101, 102, 107, 108, 111, 112, 113, 115, 118, 119, 121, 124, 125, 134, 135, 139, 143, 150, 155, 158, 164, 180, 185, 187, 189, 190, 193, 194, 199, 202, 203, 210, 216, 217, 218, 222, 228, 232, 237, 239, 245, 247, 248, 249, 254, 278, 289, 291, 309, 328, 334, 339, 340, 341, 388, 393, 399, 403, 405, 407, 410, 414, 420, 421, 423, 427, 439, 440, 446, 461, 465, 474, 475, 493, 501, 509, 514, 519, 524, 540, 546, 548, 553, 554, 560, 561, 562, 563, 568, 571, 572, 574, 580, 581, 582, 583, 598, 616, 635, 636, 638, 645, 647, 652, 669, 676, 677, 678, 684, 694, 699, 705, 712, 715, 716, 720, 722, 724, 726, 744, 745, 749, 754, 762, 767, 768, 775, 777, 781, 782, 804, 807, 858, 860, 863, 864, 866, 929, 936, 954, 959, 971, 972, 978, 993, 997, 1025, 1034, 1061, 1068, 1069, 1075, 1076, 1077, 1078, 1083, 1086, 1087, 1089, 1095, 1096, 1097, 1098, 1116, 1145, 1152, 1153], "support": [1, 32, 33, 38, 79, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 116, 117, 118, 122, 123, 126, 134, 139, 143, 189, 190, 191, 192, 217, 218, 228, 229, 236, 240, 278, 459, 503, 546, 548, 575, 690, 694, 699, 739, 740, 768, 769, 804, 807, 991, 1061, 1090, 1127, 1145, 1152], "target": [1, 31, 32, 33, 76, 112, 278, 559, 586, 587, 588, 807, 1074, 1101, 1102, 1103], "thi": [1, 6, 9, 14, 15, 28, 30, 32, 33, 36, 38, 42, 50, 51, 52, 56, 57, 61, 62, 71, 77, 78, 79, 81, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 145, 146, 147, 148, 149, 152, 154, 158, 159, 160, 162, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 183, 185, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 208, 209, 210, 215, 216, 217, 218, 219, 221, 222, 226, 228, 230, 231, 234, 236, 239, 240, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 259, 260, 264, 277, 278, 288, 291, 292, 293, 302, 308, 315, 316, 318, 319, 328, 334, 335, 341, 342, 354, 362, 363, 366, 369, 370, 373, 376, 380, 384, 390, 406, 407, 408, 411, 413, 415, 418, 423, 427, 435, 438, 440, 441, 445, 446, 448, 449, 454, 455, 456, 457, 460, 462, 465, 466, 467, 470, 471, 473, 475, 477, 481, 482, 483, 484, 485, 486, 496, 497, 499, 503, 509, 511, 514, 515, 516, 517, 518, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 535, 537, 539, 540, 541, 546, 547, 548, 553, 559, 566, 567, 568, 569, 573, 574, 580, 581, 582, 583, 589, 594, 598, 606, 608, 609, 610, 611, 615, 619, 620, 628, 631, 633, 638, 646, 647, 649, 655, 657, 659, 670, 673, 681, 684, 690, 694, 705, 706, 708, 709, 710, 711, 714, 715, 716, 720, 722, 724, 729, 730, 731, 732, 733, 734, 735, 737, 739, 740, 744, 745, 749, 750, 754, 756, 757, 759, 761, 762, 763, 766, 767, 768, 769, 774, 775, 777, 780, 781, 782, 783, 784, 787, 788, 792, 803, 804, 807, 813, 814, 823, 829, 835, 838, 840, 841, 842, 850, 858, 859, 866, 867, 868, 879, 891, 892, 895, 898, 899, 902, 905, 909, 913, 918, 919, 926, 930, 935, 939, 941, 942, 944, 945, 951, 953, 955, 956, 958, 967, 970, 972, 973, 977, 978, 980, 981, 986, 987, 988, 989, 992, 994, 998, 999, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1035, 1036, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1061, 1062, 1064, 1068, 1074, 1081, 1082, 1083, 1084, 1088, 1089, 1095, 1096, 1097, 1098, 1103, 1104, 1109, 1110, 1114, 1115, 1121, 1123, 1125, 1126, 1127, 1129, 1130, 1132, 1133, 1134, 1135, 1145, 1152, 1153], "featur": [1, 38, 42, 76, 278], "i": [1, 6, 14, 15, 17, 30, 32, 33, 34, 35, 36, 37, 42, 50, 51, 52, 56, 61, 62, 71, 76, 77, 78, 79, 81, 83, 85, 86, 88, 92, 94, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 147, 149, 152, 155, 158, 160, 162, 165, 169, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 203, 205, 206, 207, 215, 216, 217, 218, 219, 222, 228, 229, 230, 231, 232, 234, 239, 240, 243, 244, 245, 247, 248, 249, 250, 254, 256, 260, 264, 277, 278, 285, 288, 290, 291, 292, 293, 303, 316, 334, 335, 339, 340, 341, 343, 353, 366, 370, 373, 377, 385, 386, 387, 390, 394, 403, 406, 408, 424, 430, 439, 440, 443, 459, 464, 465, 470, 475, 476, 477, 481, 484, 485, 486, 503, 511, 514, 516, 517, 518, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 541, 542, 545, 546, 547, 548, 550, 552, 553, 554, 559, 560, 561, 563, 564, 567, 568, 570, 571, 573, 574, 575, 578, 580, 581, 582, 583, 586, 587, 588, 591, 594, 611, 612, 615, 617, 620, 625, 628, 630, 631, 633, 634, 638, 639, 641, 642, 647, 656, 659, 670, 671, 672, 673, 675, 681, 682, 683, 684, 690, 694, 708, 710, 714, 715, 716, 720, 722, 724, 727, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 742, 744, 745, 749, 750, 754, 759, 762, 763, 767, 768, 769, 770, 774, 775, 777, 778, 781, 784, 787, 788, 792, 804, 807, 811, 812, 813, 814, 839, 842, 850, 858, 859, 860, 863, 864, 866, 868, 878, 895, 899, 902, 906, 913, 914, 915, 916, 918, 919, 923, 927, 928, 929, 930, 935, 937, 944, 951, 952, 953, 955, 956, 957, 959, 962, 971, 972, 975, 991, 996, 997, 1005, 1023, 1025, 1027, 1029, 1032, 1034, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1056, 1057, 1060, 1061, 1064, 1067, 1068, 1069, 1074, 1075, 1076, 1078, 1079, 1082, 1083, 1085, 1086, 1088, 1089, 1090, 1093, 1095, 1096, 1097, 1098, 1101, 1102, 1103, 1106, 1109, 1116, 1121, 1126, 1127, 1133, 1134, 1135, 1145, 1152, 1153], "primarili": 1, "intend": [1, 130, 131, 132, 133], "us": [1, 12, 13, 14, 15, 20, 25, 30, 31, 33, 38, 41, 50, 52, 56, 57, 58, 59, 61, 62, 71, 78, 79, 80, 81, 97, 99, 100, 102, 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 146, 147, 150, 156, 158, 163, 164, 165, 168, 173, 174, 175, 176, 177, 178, 185, 187, 189, 190, 192, 195, 197, 199, 202, 203, 205, 206, 207, 215, 216, 217, 218, 219, 221, 222, 229, 230, 231, 236, 237, 238, 239, 240, 244, 245, 247, 248, 249, 250, 253, 254, 257, 264, 278, 286, 288, 290, 292, 293, 303, 311, 312, 319, 334, 339, 340, 369, 370, 373, 376, 377, 380, 382, 385, 386, 387, 388, 393, 394, 407, 408, 424, 440, 465, 475, 476, 477, 480, 503, 511, 514, 516, 518, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 537, 540, 545, 547, 548, 550, 552, 555, 556, 557, 559, 560, 562, 564, 565, 567, 571, 573, 575, 577, 579, 586, 587, 588, 591, 612, 615, 616, 617, 618, 620, 626, 629, 630, 633, 635, 636, 638, 639, 640, 641, 642, 643, 647, 649, 656, 659, 660, 661, 664, 665, 667, 670, 671, 672, 673, 675, 676, 677, 678, 681, 682, 683, 685, 690, 693, 694, 704, 705, 708, 712, 715, 716, 719, 720, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 740, 742, 743, 749, 759, 761, 762, 769, 770, 775, 777, 778, 780, 781, 785, 792, 804, 807, 811, 812, 813, 814, 831, 832, 840, 842, 858, 859, 863, 864, 898, 899, 902, 905, 906, 909, 912, 914, 915, 916, 921, 922, 927, 930, 933, 934, 957, 972, 997, 1004, 1005, 1023, 1025, 1027, 1029, 1032, 1034, 1045, 1048, 1049, 1050, 1054, 1060, 1064, 1067, 1070, 1071, 1074, 1075, 1077, 1079, 1080, 1082, 1086, 1088, 1090, 1092, 1101, 1102, 1103, 1106, 1117, 1122, 1124, 1125, 1126, 1127, 1134, 1135, 1145, 1152, 1153], "librari": [1, 89, 109, 112, 475, 694, 1153], "author": 1, "domain": [1, 560, 1075], "specif": [1, 28, 32, 33, 96, 98, 100, 102, 107, 110, 111, 112, 116, 117, 118, 122, 136, 137, 150, 189, 278, 373, 376, 586, 587, 588, 591, 712, 804, 807, 902, 905, 1101, 1102, 1103, 1106, 1145, 1153], "capabl": [1, 33, 278], "which": [1, 11, 20, 29, 30, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 62, 71, 72, 73, 74, 75, 99, 107, 108, 109, 110, 111, 112, 121, 122, 123, 130, 131, 138, 140, 149, 150, 158, 162, 163, 173, 174, 175, 176, 177, 178, 192, 215, 239, 243, 245, 249, 278, 288, 316, 366, 370, 373, 377, 391, 408, 410, 414, 417, 419, 420, 421, 465, 477, 486, 521, 522, 525, 526, 527, 528, 529, 531, 532, 533, 570, 638, 639, 641, 642, 643, 681, 682, 684, 694, 710, 712, 720, 722, 731, 732, 734, 735, 740, 759, 763, 774, 775, 784, 804, 813, 895, 899, 902, 906, 919, 920, 934, 938, 943, 947, 948, 949, 950, 997, 1032, 1048, 1085, 1126, 1145, 1153], "mai": [1, 32, 42, 52, 78, 79, 96, 98, 99, 100, 102, 107, 109, 111, 113, 116, 117, 122, 123, 124, 125, 127, 160, 162, 174, 192, 195, 215, 225, 226, 240, 247, 248, 249, 278, 292, 334, 341, 342, 354, 366, 370, 377, 388, 458, 464, 465, 475, 477, 485, 522, 525, 526, 527, 528, 529, 531, 532, 533, 538, 539, 564, 633, 634, 638, 639, 641, 642, 647, 669, 681, 682, 694, 715, 716, 724, 731, 740, 744, 745, 759, 765, 766, 777, 783, 787, 792, 804, 813, 841, 842, 858, 866, 867, 879, 895, 899, 906, 913, 919, 930, 990, 996, 1005, 1023, 1052, 1053, 1079, 1103, 1126, 1145, 1153], "exist": [1, 31, 32, 33, 71, 111, 122, 137, 244, 248, 253, 254, 278, 287, 310, 313, 314, 343, 694, 777, 780, 781, 804, 807, 868], "belong": [1, 174, 278, 731, 804], "core": [1, 240, 278, 1153], "cannot": [1, 107, 108, 112, 113, 118, 141, 195, 218, 219, 264, 278, 311, 388, 476, 477, 535, 555, 577, 596, 659, 694, 767, 792, 804, 831, 1005, 1045, 1070, 1092, 1145], "overrid": [1, 33, 96, 98, 99, 100, 101, 102, 107, 109, 110, 112, 116, 117, 118, 134, 135, 139, 141, 278, 476, 694, 804, 1004, 1145], "str": [1, 7, 8, 10, 11, 14, 16, 17, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 50, 51, 52, 56, 57, 58, 59, 60, 61, 71, 72, 73, 74, 75, 76, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 134, 135, 137, 138, 139, 140, 143, 149, 150, 153, 155, 156, 157, 158, 159, 160, 161, 165, 166, 167, 168, 170, 172, 173, 174, 175, 177, 178, 180, 182, 185, 187, 188, 189, 191, 192, 196, 197, 198, 199, 200, 201, 203, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 219, 223, 225, 226, 228, 229, 230, 231, 232, 235, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 285, 286, 287, 310, 312, 313, 314, 318, 335, 338, 344, 366, 369, 370, 373, 376, 377, 388, 390, 394, 396, 400, 406, 408, 433, 434, 443, 444, 446, 459, 463, 465, 474, 476, 477, 485, 487, 488, 490, 500, 503, 507, 509, 511, 517, 519, 521, 522, 525, 526, 527, 528, 529, 531, 532, 533, 539, 540, 547, 548, 595, 596, 598, 601, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 694, 700, 710, 712, 715, 716, 717, 718, 719, 720, 722, 723, 724, 727, 729, 730, 731, 732, 734, 735, 737, 739, 740, 749, 750, 754, 756, 757, 758, 759, 763, 764, 766, 767, 768, 769, 774, 775, 776, 777, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 810, 836, 838, 859, 860, 869, 895, 898, 899, 902, 905, 906, 918, 922, 966, 967, 968, 978, 997, 1004, 1014, 1015, 1023, 1028, 1048, 1049, 1110, 1112, 1122, 1123, 1124, 1133, 1145, 1149, 1152, 1153], "dt": [1, 71, 112, 118, 215, 278, 522, 638, 643, 694, 702, 759, 804, 807, 1151], "attempt": [1, 239, 278], "do": [1, 33, 50, 51, 52, 71, 77, 78, 79, 107, 121, 130, 131, 132, 133, 162, 174, 175, 177, 178, 192, 207, 215, 234, 244, 247, 278, 334, 440, 503, 522, 581, 582, 583, 667, 670, 685, 694, 715, 716, 722, 731, 732, 734, 735, 740, 744, 745, 754, 759, 767, 804, 807, 813, 858, 919, 972, 1096, 1097, 1098, 1126, 1135, 1145], "so": [1, 109, 110, 121, 141, 172, 174, 175, 177, 178, 207, 215, 278, 303, 316, 408, 443, 465, 477, 522, 581, 582, 583, 694, 731, 732, 734, 735, 759, 804, 975, 1096, 1097, 1098], "rais": [1, 16, 20, 32, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 108, 112, 118, 121, 130, 132, 145, 207, 216, 278, 311, 369, 370, 377, 464, 485, 511, 552, 555, 570, 586, 587, 588, 591, 640, 656, 694, 831, 898, 899, 906, 996, 1023, 1067, 1070, 1085, 1101, 1102, 1103, 1106, 1126, 1135, 1145], "an": [1, 28, 30, 31, 32, 33, 42, 50, 51, 72, 74, 75, 77, 78, 81, 86, 87, 89, 96, 107, 108, 109, 110, 111, 112, 114, 118, 119, 121, 123, 124, 135, 137, 139, 150, 151, 152, 160, 163, 168, 174, 175, 177, 178, 189, 190, 192, 195, 203, 207, 213, 215, 216, 234, 239, 244, 247, 248, 253, 264, 278, 287, 311, 317, 322, 323, 324, 329, 330, 331, 332, 333, 334, 335, 343, 344, 366, 369, 373, 380, 391, 393, 394, 400, 423, 435, 436, 440, 443, 464, 465, 474, 475, 477, 486, 510, 511, 518, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 552, 555, 560, 586, 587, 588, 591, 601, 607, 615, 621, 625, 638, 639, 641, 642, 644, 649, 653, 654, 656, 667, 669, 670, 673, 676, 681, 682, 684, 685, 690, 694, 705, 712, 713, 714, 715, 716, 722, 724, 727, 731, 732, 734, 735, 740, 745, 754, 759, 767, 777, 780, 782, 792, 804, 807, 831, 836, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 868, 902, 909, 913, 920, 944, 956, 967, 968, 972, 975, 996, 1005, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1048, 1049, 1067, 1070, 1075, 1101, 1102, 1103, 1106, 1126, 1135, 1145, 1152], "attributeerror": 1, "howev": [1, 99, 109, 160, 195, 239, 278, 913, 1145], "can": [1, 15, 32, 33, 38, 41, 61, 62, 71, 80, 81, 87, 97, 99, 107, 108, 109, 112, 113, 118, 119, 121, 124, 126, 127, 135, 136, 137, 139, 141, 143, 149, 151, 158, 159, 168, 173, 174, 175, 176, 177, 178, 185, 187, 195, 203, 207, 215, 218, 221, 229, 239, 243, 244, 247, 253, 264, 278, 288, 292, 330, 333, 334, 362, 363, 366, 369, 377, 391, 408, 423, 440, 465, 477, 485, 493, 503, 509, 511, 516, 522, 525, 526, 527, 528, 529, 531, 532, 533, 537, 540, 542, 545, 548, 563, 581, 582, 583, 586, 598, 624, 647, 649, 659, 684, 690, 693, 694, 704, 710, 715, 720, 722, 724, 731, 732, 734, 735, 759, 761, 763, 769, 774, 780, 783, 804, 807, 814, 842, 858, 859, 891, 892, 895, 898, 899, 906, 920, 934, 972, 997, 1005, 1010, 1023, 1027, 1048, 1049, 1050, 1054, 1057, 1060, 1068, 1069, 1076, 1078, 1096, 1097, 1098, 1101, 1103, 1126, 1145, 1152], "other": [1, 20, 32, 33, 38, 61, 78, 107, 108, 109, 121, 130, 131, 132, 133, 158, 162, 169, 191, 192, 199, 200, 216, 218, 221, 222, 248, 251, 253, 254, 276, 278, 285, 289, 291, 303, 322, 323, 324, 338, 383, 384, 398, 401, 402, 408, 413, 426, 433, 438, 445, 454, 455, 456, 457, 462, 466, 472, 476, 481, 484, 492, 494, 498, 499, 502, 548, 597, 605, 607, 614, 616, 618, 627, 628, 629, 636, 638, 661, 665, 673, 676, 678, 694, 705, 716, 720, 739, 740, 749, 750, 761, 762, 777, 780, 781, 782, 804, 807, 813, 847, 848, 849, 862, 919, 942, 965, 970, 977, 986, 987, 988, 989, 994, 998, 1047, 1128, 1136, 1144, 1145], "onli": [1, 20, 28, 30, 33, 50, 56, 58, 62, 71, 76, 79, 81, 107, 108, 111, 113, 115, 119, 121, 122, 124, 125, 126, 137, 139, 143, 146, 158, 162, 174, 177, 189, 191, 192, 195, 197, 207, 215, 217, 218, 231, 236, 238, 239, 248, 249, 264, 278, 286, 288, 290, 292, 303, 316, 321, 322, 323, 324, 366, 374, 388, 397, 423, 477, 503, 509, 516, 525, 526, 527, 528, 529, 531, 532, 533, 598, 609, 638, 639, 659, 694, 715, 720, 731, 732, 734, 735, 736, 739, 740, 743, 759, 777, 792, 804, 811, 812, 813, 844, 847, 848, 849, 859, 895, 919, 925, 944, 1005, 1023, 1027, 1121, 1124, 1145, 1152, 1153], "gener": [1, 109, 110, 128, 134, 135, 136, 137, 139, 145, 154, 207, 219, 237, 239, 244, 278, 535, 541, 621, 638, 641, 653, 654, 670, 681, 682, 694, 804, 1045, 1056, 1122, 1145, 1153], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 74, 75, 79, 80, 81, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 118, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 690, 694, 706, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 919, 920, 921, 922, 923, 925, 928, 929, 930, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 958, 961, 962, 969, 971, 972, 973, 976, 978, 980, 986, 987, 989, 990, 991, 992, 995, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1085, 1086, 1087, 1088, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1145, 1152, 1153], "register_expr_namespac": [1, 72, 74, 75], "greet": 1, "def": [1, 62, 72, 73, 74, 75, 135, 136, 137, 139, 143, 206, 244, 278, 285, 507, 560, 614, 658, 694, 716, 753, 804, 807, 1075, 1153], "__init__": [1, 2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 134, 1152], "self": [1, 57, 58, 59, 61, 72, 73, 74, 75, 77, 78, 151, 152, 155, 162, 180, 182, 183, 194, 196, 197, 198, 199, 201, 204, 205, 207, 209, 210, 212, 213, 219, 225, 227, 228, 230, 231, 232, 237, 244, 246, 249, 250, 251, 255, 256, 278, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 309, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 690, 694, 708, 709, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 804, 813, 814, 836, 850, 919, 923, 931, 1003, 1004, 1005, 1016, 1020, 1021, 1026, 1048, 1049, 1050, 1062, 1132, 1136, 1145], "_expr": [1, 73], "hello": [1, 20, 57, 60, 581, 582, 583, 978, 1096, 1097, 1098], "return": [1, 10, 11, 28, 30, 33, 34, 35, 36, 37, 50, 51, 52, 56, 60, 62, 71, 72, 73, 74, 75, 76, 77, 78, 88, 90, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 136, 146, 149, 151, 154, 157, 159, 160, 161, 162, 163, 164, 167, 168, 170, 172, 173, 174, 176, 177, 180, 182, 188, 189, 190, 191, 193, 194, 195, 202, 203, 205, 206, 207, 215, 216, 217, 218, 219, 232, 233, 239, 240, 243, 244, 245, 249, 253, 254, 262, 264, 267, 272, 278, 288, 290, 294, 295, 296, 297, 298, 299, 302, 303, 310, 312, 313, 314, 315, 325, 326, 327, 328, 335, 336, 341, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 377, 378, 379, 381, 390, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 427, 428, 431, 432, 434, 441, 443, 444, 446, 448, 449, 463, 464, 471, 476, 486, 488, 493, 507, 511, 513, 517, 518, 520, 535, 536, 542, 543, 544, 551, 553, 554, 556, 558, 559, 560, 561, 563, 564, 565, 566, 567, 569, 570, 573, 575, 576, 577, 578, 594, 600, 601, 602, 603, 604, 606, 607, 609, 610, 611, 614, 615, 619, 621, 622, 623, 624, 625, 637, 638, 639, 640, 641, 642, 643, 649, 651, 653, 654, 656, 657, 658, 659, 667, 670, 673, 676, 679, 680, 681, 682, 684, 685, 694, 710, 713, 715, 716, 721, 722, 724, 731, 732, 734, 735, 736, 742, 743, 745, 753, 754, 759, 763, 767, 772, 773, 774, 775, 780, 781, 784, 790, 795, 800, 804, 811, 812, 813, 821, 822, 824, 825, 830, 832, 835, 839, 842, 846, 859, 860, 866, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 903, 904, 906, 907, 908, 910, 913, 918, 919, 927, 929, 930, 936, 938, 939, 940, 942, 943, 945, 946, 947, 948, 949, 950, 954, 956, 958, 959, 963, 964, 966, 973, 975, 976, 978, 980, 981, 995, 996, 1003, 1004, 1005, 1010, 1017, 1023, 1029, 1030, 1031, 1032, 1045, 1046, 1047, 1049, 1057, 1066, 1067, 1068, 1069, 1071, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1088, 1090, 1091, 1092, 1093, 1109, 1116, 1118, 1129, 1131, 1132, 1133, 1136, 1145, 1152, 1153], "lit": [1, 287, 310, 408, 423, 633, 647, 667, 670, 684, 685, 694, 922, 1145], "alia": [1, 14, 71, 73, 75, 174, 194, 207, 215, 246, 253, 278, 285, 289, 310, 312, 313, 314, 315, 322, 323, 324, 329, 330, 331, 332, 333, 335, 337, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 394, 396, 398, 401, 402, 406, 408, 412, 413, 416, 423, 426, 427, 428, 436, 440, 454, 455, 456, 457, 472, 474, 476, 477, 481, 482, 483, 484, 486, 489, 492, 494, 498, 499, 502, 504, 508, 511, 514, 516, 536, 552, 554, 557, 559, 560, 564, 565, 575, 576, 577, 578, 579, 584, 585, 595, 596, 597, 605, 606, 607, 613, 614, 621, 622, 623, 626, 627, 628, 629, 633, 634, 638, 643, 644, 647, 648, 658, 659, 669, 670, 676, 681, 684, 694, 731, 737, 743, 759, 776, 780, 804, 859, 867, 869, 875, 895, 898, 902, 904, 959, 972, 1004, 1023, 1028, 1074, 1075, 1092, 1093, 1145], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 20, 57, 60, 581, 582, 583, 592, 978, 1096, 1097, 1098, 1107], "select": [1, 31, 56, 57, 58, 71, 72, 73, 74, 106, 107, 108, 109, 110, 111, 113, 115, 119, 121, 127, 136, 188, 192, 195, 203, 206, 216, 222, 228, 241, 246, 249, 278, 284, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 318, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 348, 352, 353, 354, 355, 356, 358, 360, 362, 363, 365, 366, 369, 372, 377, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 395, 397, 399, 403, 405, 406, 407, 409, 410, 413, 414, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 446, 447, 448, 450, 451, 452, 453, 460, 461, 465, 467, 468, 469, 470, 471, 475, 477, 478, 479, 480, 491, 493, 495, 496, 497, 500, 501, 502, 505, 506, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 524, 530, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 558, 559, 560, 561, 562, 563, 567, 570, 573, 577, 578, 581, 582, 583, 586, 589, 590, 592, 593, 595, 596, 599, 602, 603, 604, 606, 608, 609, 610, 611, 612, 615, 617, 620, 622, 623, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 643, 645, 646, 647, 648, 649, 651, 655, 660, 662, 663, 664, 666, 669, 670, 674, 675, 676, 677, 679, 683, 690, 694, 717, 737, 740, 753, 762, 763, 768, 776, 782, 804, 807, 828, 829, 898, 961, 962, 972, 1048, 1049, 1061, 1078, 1101, 1117, 1145, 1152], "shape": [1, 2, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 53, 56, 57, 58, 60, 62, 63, 71, 72, 73, 74, 75, 79, 80, 81, 93, 96, 97, 98, 99, 100, 101, 102, 103, 121, 127, 137, 139, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 170, 171, 173, 174, 179, 180, 182, 183, 184, 185, 187, 188, 191, 192, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 219, 221, 225, 226, 228, 229, 230, 231, 232, 233, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 690, 694, 708, 710, 712, 713, 715, 716, 718, 719, 720, 723, 724, 725, 726, 727, 728, 730, 731, 736, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 761, 763, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 810, 813, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 835, 836, 838, 840, 841, 843, 844, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 914, 915, 916, 919, 920, 921, 922, 923, 925, 928, 929, 930, 933, 934, 936, 938, 940, 942, 943, 946, 947, 948, 949, 950, 954, 956, 961, 962, 969, 971, 972, 973, 976, 978, 980, 986, 987, 989, 990, 991, 992, 995, 997, 1003, 1004, 1005, 1010, 1017, 1019, 1020, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1052, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1085, 1086, 1087, 1088, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1114, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1136, 1145, 1152], "3": [1, 2, 12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 53, 56, 58, 59, 61, 63, 71, 72, 73, 74, 75, 79, 81, 96, 97, 98, 99, 100, 101, 102, 103, 110, 112, 118, 121, 127, 129, 130, 131, 132, 133, 136, 137, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 168, 169, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 285, 286, 287, 288, 290, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351, 353, 354, 359, 361, 366, 368, 369, 370, 371, 373, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 422, 423, 424, 426, 427, 428, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 468, 469, 470, 471, 472, 474, 476, 477, 492, 493, 494, 498, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 545, 547, 548, 549, 552, 553, 556, 557, 559, 560, 561, 562, 564, 565, 568, 571, 574, 575, 576, 577, 578, 579, 580, 587, 591, 595, 596, 597, 598, 600, 601, 602, 606, 609, 610, 611, 613, 614, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 690, 694, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 810, 813, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 835, 836, 838, 840, 841, 843, 844, 845, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 872, 873, 875, 876, 878, 880, 881, 882, 884, 886, 887, 888, 890, 894, 896, 898, 899, 900, 902, 904, 905, 906, 908, 909, 913, 914, 915, 916, 919, 920, 921, 922, 923, 925, 928, 929, 930, 933, 934, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 957, 958, 967, 969, 971, 972, 973, 976, 980, 986, 987, 989, 990, 991, 992, 995, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1056, 1058, 1059, 1060, 1061, 1062, 1064, 1068, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1083, 1086, 1089, 1090, 1094, 1095, 1102, 1106, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1145, 1152, 1153], "1": [1, 2, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 52, 53, 56, 57, 58, 59, 60, 61, 63, 71, 72, 73, 74, 75, 79, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 112, 113, 118, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 137, 139, 145, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 571, 572, 573, 577, 578, 579, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 690, 694, 708, 710, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 743, 746, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 835, 836, 840, 841, 843, 844, 845, 847, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 919, 920, 921, 922, 923, 925, 928, 929, 930, 933, 934, 936, 938, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 956, 958, 961, 962, 969, 971, 972, 973, 975, 976, 980, 986, 987, 989, 990, 991, 992, 995, 997, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1074, 1076, 1077, 1078, 1079, 1080, 1086, 1092, 1093, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1145, 1152, 1153], "2": [1, 2, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 53, 56, 58, 59, 61, 63, 71, 72, 73, 74, 75, 79, 96, 97, 98, 99, 100, 101, 102, 103, 110, 121, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 284, 285, 286, 287, 289, 291, 293, 300, 302, 303, 304, 305, 306, 307, 308, 309, 315, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 343, 344, 347, 348, 349, 351, 352, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 488, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 545, 546, 547, 548, 549, 551, 554, 557, 559, 561, 562, 563, 564, 565, 570, 571, 572, 575, 577, 578, 579, 581, 582, 583, 584, 585, 586, 588, 589, 590, 592, 593, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 669, 673, 674, 675, 676, 677, 679, 682, 683, 684, 690, 694, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 736, 737, 739, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 810, 813, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 835, 840, 841, 843, 844, 845, 846, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 866, 868, 870, 871, 874, 876, 880, 881, 882, 887, 888, 890, 891, 892, 897, 898, 899, 903, 906, 908, 909, 910, 912, 913, 914, 915, 916, 919, 920, 921, 922, 923, 925, 928, 929, 930, 933, 934, 936, 938, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 958, 969, 971, 972, 973, 976, 978, 980, 986, 987, 989, 990, 991, 992, 995, 997, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1056, 1058, 1060, 1061, 1062, 1063, 1064, 1066, 1069, 1074, 1076, 1077, 1078, 1080, 1085, 1086, 1087, 1092, 1093, 1096, 1097, 1098, 1101, 1103, 1104, 1105, 1107, 1108, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1145, 1152, 1153], "column_0": [1, 195, 244, 278], "register_dataframe_namespac": [1, 73, 74, 75], "split": [1, 33, 72, 190, 278, 577, 578, 1092, 1093], "splitfram": [1, 72], "df": [1, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 53, 56, 57, 72, 73, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 121, 135, 137, 143, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 643, 644, 645, 646, 647, 648, 649, 651, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 690, 694, 731, 759, 763, 776, 777, 790, 792, 800, 804, 807, 828, 829, 840, 898, 961, 962, 972, 1078, 1087, 1092, 1093, 1123, 1145, 1153], "_df": [1, 72], "by_alternate_row": 1, "list": [1, 2, 32, 33, 41, 56, 60, 71, 72, 74, 77, 78, 96, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 135, 136, 137, 139, 153, 156, 159, 160, 161, 165, 171, 173, 174, 182, 189, 202, 205, 216, 217, 218, 221, 229, 235, 236, 244, 245, 246, 247, 253, 257, 258, 278, 286, 308, 335, 390, 396, 405, 473, 475, 477, 486, 487, 503, 511, 517, 518, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 547, 548, 560, 576, 595, 596, 601, 605, 624, 628, 639, 642, 644, 652, 654, 656, 659, 674, 676, 682, 694, 717, 721, 723, 727, 730, 731, 761, 769, 775, 776, 780, 782, 785, 786, 804, 807, 829, 845, 859, 913, 918, 923, 926, 930, 931, 942, 1023, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1075, 1091, 1117, 1125, 1128, 1145, 1153], "with_row_count": [1, 278, 476, 525, 526, 528, 531, 532, 533, 694, 804, 1049, 1145], "name": [1, 18, 22, 24, 30, 31, 33, 36, 50, 57, 58, 59, 60, 61, 72, 73, 74, 75, 79, 85, 96, 98, 99, 100, 101, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 132, 133, 134, 135, 137, 138, 139, 140, 149, 150, 153, 156, 157, 158, 161, 165, 166, 167, 170, 172, 173, 176, 188, 189, 191, 192, 195, 199, 200, 205, 207, 211, 216, 217, 218, 220, 221, 222, 229, 235, 237, 239, 242, 243, 244, 245, 246, 247, 248, 253, 254, 255, 256, 257, 278, 287, 292, 310, 312, 313, 314, 335, 388, 408, 423, 465, 474, 477, 485, 487, 503, 509, 511, 548, 560, 561, 595, 596, 598, 615, 616, 617, 618, 620, 622, 623, 624, 627, 628, 629, 630, 632, 635, 636, 638, 645, 651, 652, 660, 661, 664, 665, 668, 670, 671, 672, 673, 676, 677, 678, 679, 681, 684, 690, 694, 710, 712, 717, 719, 720, 723, 727, 730, 733, 739, 740, 749, 750, 757, 760, 761, 762, 763, 769, 774, 775, 776, 777, 780, 781, 783, 785, 804, 807, 810, 846, 859, 997, 1023, 1028, 1074, 1075, 1076, 1086, 1110, 1112, 1122, 1123, 1127, 1145, 1152, 1153], "n": [1, 14, 17, 25, 30, 37, 41, 43, 50, 58, 59, 72, 73, 74, 75, 105, 107, 108, 121, 146, 151, 162, 174, 180, 189, 190, 194, 195, 217, 218, 219, 230, 232, 233, 236, 238, 250, 262, 272, 278, 315, 334, 337, 342, 343, 350, 375, 380, 391, 404, 428, 437, 444, 454, 463, 465, 504, 507, 517, 531, 533, 535, 545, 550, 564, 565, 571, 577, 578, 581, 582, 588, 600, 602, 606, 607, 612, 614, 630, 638, 639, 640, 641, 642, 643, 649, 651, 667, 670, 671, 672, 675, 679, 683, 685, 694, 713, 715, 731, 736, 743, 770, 772, 773, 778, 790, 800, 804, 807, 813, 835, 846, 858, 861, 867, 868, 875, 904, 909, 919, 920, 929, 959, 969, 976, 986, 995, 997, 1019, 1041, 1043, 1045, 1060, 1064, 1079, 1080, 1086, 1092, 1093, 1103, 1116, 1118, 1124, 1129, 1134, 1145, 1152, 1153], "filter": [1, 72, 111, 121, 122, 127, 158, 185, 186, 187, 207, 264, 278, 485, 487, 557, 579, 613, 647, 684, 694, 720, 724, 737, 792, 804, 807, 1048, 1145], "col": [1, 14, 30, 33, 50, 71, 72, 73, 74, 100, 102, 121, 135, 137, 165, 173, 174, 186, 188, 193, 195, 203, 206, 207, 215, 216, 221, 229, 246, 247, 253, 257, 278, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 406, 407, 408, 409, 412, 413, 416, 417, 419, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 465, 467, 468, 469, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 589, 590, 592, 593, 594, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 625, 627, 628, 629, 633, 634, 635, 643, 646, 647, 648, 649, 650, 655, 660, 664, 668, 669, 677, 684, 694, 714, 727, 730, 731, 737, 742, 753, 759, 761, 769, 776, 780, 782, 785, 804, 807, 828, 829, 840, 895, 898, 961, 962, 972, 1029, 1048, 1049, 1078, 1101, 1145, 1153], "0": [1, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 52, 53, 56, 61, 71, 72, 73, 75, 79, 81, 97, 107, 108, 109, 110, 112, 113, 115, 118, 119, 121, 124, 125, 126, 127, 129, 134, 135, 136, 137, 139, 145, 146, 148, 150, 151, 152, 154, 155, 156, 159, 163, 164, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 188, 189, 190, 191, 193, 195, 196, 197, 198, 201, 202, 203, 204, 207, 208, 209, 213, 217, 218, 219, 220, 221, 226, 228, 229, 230, 231, 237, 238, 239, 240, 241, 244, 247, 249, 250, 253, 255, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 278, 284, 286, 287, 289, 292, 294, 295, 296, 297, 298, 299, 302, 303, 304, 316, 317, 320, 321, 323, 324, 325, 326, 327, 329, 334, 335, 336, 339, 340, 351, 355, 356, 358, 359, 365, 369, 371, 372, 377, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 397, 398, 401, 402, 403, 407, 410, 411, 414, 415, 417, 418, 419, 420, 421, 423, 424, 426, 431, 432, 435, 436, 438, 440, 443, 445, 449, 451, 462, 465, 466, 468, 469, 470, 472, 473, 475, 476, 478, 479, 480, 486, 491, 492, 494, 496, 497, 498, 499, 501, 502, 504, 507, 508, 511, 512, 513, 514, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 542, 543, 544, 545, 549, 550, 553, 554, 559, 560, 566, 568, 569, 574, 580, 586, 588, 594, 597, 599, 603, 604, 605, 607, 612, 613, 615, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 632, 633, 638, 640, 644, 647, 653, 654, 657, 659, 662, 663, 667, 668, 669, 670, 674, 680, 681, 682, 683, 684, 685, 690, 694, 709, 712, 713, 714, 719, 721, 725, 726, 729, 730, 731, 732, 733, 734, 735, 738, 739, 742, 744, 745, 748, 752, 754, 755, 756, 760, 761, 766, 767, 769, 770, 778, 780, 782, 783, 784, 785, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 807, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 836, 841, 843, 844, 846, 851, 852, 853, 858, 859, 860, 862, 863, 864, 876, 881, 882, 883, 884, 885, 886, 888, 893, 894, 898, 900, 901, 906, 912, 914, 915, 916, 921, 925, 928, 930, 933, 938, 939, 941, 943, 945, 947, 948, 949, 950, 956, 957, 967, 970, 972, 975, 977, 981, 994, 997, 998, 1003, 1007, 1008, 1019, 1023, 1024, 1025, 1032, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1057, 1058, 1059, 1063, 1064, 1066, 1068, 1069, 1074, 1075, 1078, 1081, 1083, 1084, 1089, 1095, 1101, 1103, 1109, 1119, 1120, 1122, 1127, 1128, 1132, 1134, 1135, 1145, 1153], "drop": [1, 99, 157, 158, 195, 245, 253, 278, 337, 339, 340, 437, 439, 511, 694, 720, 775, 780, 804, 861, 863, 864, 969, 971, 1023, 1145], "aaa": [1, 33, 278, 552, 595, 596, 1067], "bbb": [1, 33, 278, 595, 596, 807], "ccc": [1, 33, 278, 595, 596], "ddd": [1, 33, 278, 595, 596], "eee": [1, 33, 278, 807], "fff": 1, "column": [1, 17, 18, 21, 22, 24, 32, 33, 36, 41, 62, 71, 72, 79, 81, 83, 85, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 137, 149, 150, 154, 156, 157, 158, 159, 161, 165, 166, 167, 170, 172, 173, 174, 175, 176, 177, 178, 182, 183, 188, 189, 191, 192, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 220, 221, 222, 223, 229, 230, 231, 235, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 257, 278, 287, 288, 290, 302, 328, 335, 343, 345, 346, 347, 351, 353, 354, 355, 357, 359, 361, 364, 367, 368, 371, 373, 374, 376, 378, 379, 381, 388, 390, 394, 396, 408, 423, 427, 433, 441, 460, 464, 465, 476, 477, 483, 485, 487, 503, 509, 511, 515, 517, 518, 522, 525, 526, 527, 528, 529, 531, 532, 533, 540, 547, 548, 558, 577, 578, 586, 587, 588, 589, 591, 598, 613, 615, 616, 617, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 694, 710, 712, 719, 720, 721, 723, 727, 730, 731, 732, 733, 734, 735, 739, 740, 745, 746, 747, 748, 749, 751, 752, 753, 755, 757, 759, 760, 761, 762, 763, 764, 769, 770, 771, 774, 775, 776, 777, 778, 780, 781, 782, 783, 785, 792, 804, 807, 811, 812, 839, 841, 859, 870, 871, 872, 876, 878, 879, 883, 885, 888, 890, 893, 896, 897, 900, 902, 903, 905, 907, 908, 910, 918, 927, 965, 973, 992, 996, 1023, 1029, 1054, 1073, 1092, 1093, 1101, 1102, 1103, 1104, 1106, 1114, 1122, 1123, 1145, 1153], "txt": [1, 14, 121], "utf8": [1, 20, 32, 99, 107, 108, 121, 134, 136, 139, 150, 159, 160, 161, 168, 220, 239, 278, 312, 373, 376, 446, 476, 551, 556, 558, 559, 560, 561, 563, 575, 576, 577, 578, 586, 587, 588, 589, 591, 629, 694, 712, 721, 723, 760, 804, 807, 902, 905, 955, 978, 1066, 1071, 1073, 1074, 1075, 1076, 1078, 1090, 1091, 1092, 1093, 1101, 1102, 1103, 1104, 1106, 1145], "register_lazyframe_namespac": [1, 72, 73, 75], "dtypeoper": [1, 74], "ldf": [1, 74, 785, 786, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799], "_ldf": [1, 74], "upcast_integer_typ": [1, 74], "with_column": [1, 14, 74, 174, 206, 215, 247, 254, 278, 285, 287, 303, 312, 317, 319, 322, 323, 324, 330, 333, 335, 337, 341, 347, 349, 350, 351, 359, 361, 366, 367, 368, 369, 370, 371, 373, 375, 376, 378, 379, 383, 384, 392, 393, 398, 401, 402, 403, 407, 408, 412, 416, 417, 419, 420, 421, 423, 426, 440, 454, 455, 456, 457, 472, 474, 476, 477, 492, 494, 498, 499, 503, 504, 507, 508, 509, 511, 514, 521, 522, 525, 526, 527, 528, 529, 531, 532, 533, 538, 539, 552, 557, 560, 561, 564, 565, 571, 572, 575, 576, 577, 578, 579, 584, 585, 594, 597, 598, 605, 607, 614, 616, 618, 627, 629, 636, 639, 644, 654, 658, 661, 665, 674, 678, 682, 684, 690, 694, 731, 753, 759, 781, 804, 807, 840, 859, 898, 972, 1023, 1145], "tp": [1, 74], "cast": [1, 32, 73, 74, 96, 130, 131, 132, 133, 168, 174, 175, 177, 178, 206, 215, 240, 253, 278, 291, 319, 332, 333, 342, 373, 376, 476, 502, 507, 516, 522, 562, 563, 594, 599, 605, 629, 674, 694, 731, 732, 734, 735, 753, 759, 780, 804, 807, 840, 842, 856, 857, 867, 902, 905, 1027, 1077, 1078, 1115, 1123, 1128, 1145], "int64": [1, 2, 32, 33, 36, 73, 74, 79, 107, 159, 168, 174, 175, 177, 178, 193, 206, 215, 220, 234, 240, 278, 305, 306, 307, 308, 332, 333, 348, 352, 356, 358, 360, 365, 372, 388, 507, 516, 522, 562, 599, 605, 621, 645, 653, 654, 656, 670, 676, 694, 714, 721, 731, 732, 734, 735, 737, 742, 753, 759, 760, 763, 804, 826, 827, 828, 829, 856, 857, 873, 877, 884, 886, 889, 894, 901, 1027, 1047, 1115, 1126, 1127, 1128, 1145], "int8": [1, 74, 168, 278, 332, 333, 599, 667, 670, 685, 694, 856, 857, 861, 1004, 1030, 1115, 1132, 1145], "int16": [1, 74, 332, 333, 599, 694, 807, 856, 857, 1004, 1115, 1124, 1145], "int32": [1, 74, 79, 96, 99, 112, 136, 137, 174, 175, 177, 178, 190, 215, 278, 317, 354, 381, 522, 570, 605, 670, 694, 731, 732, 734, 735, 759, 804, 807, 879, 910, 1003, 1085, 1128, 1145], "b": [1, 29, 30, 32, 34, 35, 38, 58, 59, 61, 63, 74, 79, 96, 97, 98, 99, 100, 101, 102, 103, 112, 145, 147, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 179, 180, 182, 183, 185, 187, 188, 189, 190, 191, 193, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 214, 216, 217, 218, 219, 220, 221, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 278, 285, 287, 288, 290, 291, 304, 309, 310, 312, 313, 314, 317, 319, 328, 335, 338, 388, 390, 392, 393, 394, 396, 399, 403, 405, 407, 408, 410, 414, 417, 419, 420, 421, 423, 427, 433, 440, 446, 454, 455, 456, 457, 474, 477, 482, 493, 500, 501, 503, 507, 509, 511, 514, 519, 521, 540, 546, 548, 558, 562, 571, 598, 609, 613, 615, 616, 617, 618, 620, 624, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 644, 645, 646, 647, 648, 651, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 671, 672, 675, 676, 677, 678, 679, 683, 694, 708, 710, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 736, 739, 741, 742, 743, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 760, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 782, 783, 785, 786, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 810, 813, 839, 840, 841, 842, 859, 860, 862, 912, 913, 919, 922, 934, 942, 955, 972, 986, 987, 989, 1023, 1028, 1047, 1073, 1077, 1086, 1114, 1127, 1131, 1145, 1152], "4": [1, 2, 17, 25, 29, 30, 32, 33, 34, 35, 38, 53, 56, 58, 59, 61, 63, 71, 72, 73, 74, 75, 79, 96, 97, 98, 99, 100, 101, 102, 103, 112, 121, 129, 139, 145, 147, 149, 150, 151, 152, 155, 158, 161, 162, 163, 164, 168, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 199, 200, 202, 203, 205, 206, 207, 208, 212, 215, 217, 218, 224, 229, 232, 233, 234, 235, 236, 237, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 284, 285, 286, 287, 289, 291, 304, 305, 306, 307, 309, 315, 317, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 334, 336, 338, 343, 347, 352, 360, 367, 368, 369, 370, 372, 373, 376, 377, 379, 383, 384, 389, 390, 392, 393, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 408, 420, 421, 423, 426, 427, 428, 436, 437, 439, 440, 441, 444, 454, 455, 456, 457, 458, 459, 463, 469, 472, 474, 476, 477, 492, 494, 498, 499, 502, 503, 505, 506, 507, 508, 509, 512, 514, 518, 519, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 539, 542, 546, 547, 548, 549, 552, 554, 560, 564, 565, 567, 570, 571, 573, 575, 576, 577, 578, 584, 585, 586, 595, 596, 597, 598, 600, 601, 602, 605, 606, 607, 614, 616, 618, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 641, 642, 644, 646, 647, 651, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 690, 694, 708, 710, 712, 713, 714, 715, 716, 720, 722, 723, 724, 725, 726, 728, 730, 731, 736, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 759, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 813, 816, 823, 826, 827, 828, 835, 844, 845, 847, 858, 860, 862, 876, 877, 883, 885, 888, 889, 890, 891, 892, 893, 897, 898, 899, 901, 902, 905, 906, 907, 908, 919, 921, 922, 929, 930, 933, 934, 936, 942, 947, 948, 949, 950, 954, 969, 971, 972, 973, 976, 986, 987, 989, 990, 991, 995, 1004, 1011, 1019, 1020, 1021, 1025, 1029, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1057, 1061, 1062, 1067, 1069, 1075, 1079, 1080, 1082, 1085, 1088, 1090, 1092, 1093, 1099, 1100, 1101, 1114, 1116, 1117, 1118, 1124, 1127, 1128, 1129, 1136, 1145, 1153], "c": [1, 29, 30, 32, 34, 35, 38, 58, 59, 61, 63, 72, 74, 79, 97, 99, 101, 103, 112, 121, 135, 145, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 165, 166, 168, 169, 171, 172, 173, 174, 180, 182, 183, 190, 191, 193, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 216, 219, 220, 221, 225, 226, 228, 229, 230, 231, 232, 234, 237, 238, 239, 240, 241, 243, 244, 247, 248, 250, 251, 253, 257, 260, 261, 262, 263, 265, 266, 268, 271, 272, 278, 285, 287, 288, 290, 292, 309, 335, 408, 423, 433, 446, 474, 477, 503, 507, 511, 540, 577, 586, 609, 616, 618, 620, 626, 627, 629, 630, 631, 632, 633, 634, 636, 646, 647, 648, 651, 655, 658, 660, 661, 662, 663, 664, 665, 666, 675, 677, 678, 679, 683, 690, 694, 710, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 727, 730, 731, 739, 742, 749, 752, 754, 757, 758, 760, 761, 767, 768, 769, 774, 777, 780, 782, 785, 788, 789, 790, 791, 793, 794, 796, 799, 800, 804, 807, 841, 859, 860, 934, 955, 1023, 1092, 1101, 1131, 1145], "5": [1, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 34, 35, 38, 59, 61, 63, 71, 72, 74, 75, 79, 96, 99, 100, 101, 102, 103, 105, 108, 129, 130, 132, 137, 150, 151, 152, 155, 161, 162, 163, 164, 168, 170, 171, 172, 173, 174, 180, 181, 183, 184, 186, 188, 189, 192, 193, 194, 195, 197, 199, 202, 203, 205, 207, 208, 209, 212, 215, 218, 224, 229, 232, 233, 234, 235, 236, 237, 239, 242, 247, 248, 249, 252, 253, 255, 257, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 278, 285, 286, 289, 315, 317, 319, 321, 322, 323, 324, 334, 335, 336, 337, 338, 343, 344, 348, 369, 371, 372, 373, 376, 384, 387, 388, 391, 393, 397, 398, 401, 402, 404, 405, 408, 412, 416, 417, 419, 420, 421, 423, 426, 428, 436, 440, 441, 444, 448, 451, 454, 455, 456, 457, 461, 463, 492, 494, 499, 502, 503, 504, 505, 506, 507, 511, 512, 514, 518, 519, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 542, 548, 554, 563, 564, 565, 570, 594, 597, 600, 602, 606, 607, 620, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 643, 644, 645, 646, 647, 651, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 675, 677, 678, 679, 683, 690, 694, 712, 713, 714, 715, 716, 722, 723, 724, 725, 726, 728, 730, 731, 736, 738, 740, 741, 742, 743, 747, 748, 749, 754, 759, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 779, 780, 783, 785, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 813, 816, 820, 823, 835, 840, 845, 847, 854, 858, 859, 860, 861, 862, 868, 869, 870, 871, 872, 873, 898, 900, 901, 902, 903, 905, 907, 908, 916, 919, 920, 929, 930, 933, 934, 940, 946, 972, 973, 976, 980, 986, 987, 989, 995, 1003, 1004, 1011, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1032, 1034, 1035, 1036, 1038, 1039, 1042, 1045, 1047, 1057, 1063, 1069, 1078, 1079, 1085, 1116, 1129, 1132, 1136, 1145, 1153], "6": [1, 29, 30, 32, 33, 34, 35, 36, 37, 38, 59, 61, 62, 63, 72, 74, 79, 80, 81, 96, 99, 100, 101, 102, 129, 150, 153, 156, 157, 158, 159, 161, 162, 165, 166, 169, 170, 171, 172, 174, 180, 182, 183, 184, 186, 188, 189, 191, 195, 196, 197, 198, 199, 201, 204, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 244, 246, 247, 249, 250, 251, 253, 255, 262, 271, 272, 278, 285, 289, 309, 317, 332, 333, 338, 343, 347, 361, 366, 367, 368, 378, 379, 382, 384, 392, 393, 399, 404, 405, 407, 428, 429, 430, 441, 454, 455, 456, 457, 477, 499, 502, 510, 513, 514, 515, 518, 520, 522, 525, 526, 527, 528, 529, 531, 532, 533, 536, 548, 554, 558, 564, 565, 570, 597, 600, 602, 614, 633, 634, 635, 644, 647, 658, 659, 677, 690, 694, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 731, 736, 738, 739, 741, 743, 745, 749, 752, 754, 757, 759, 760, 761, 763, 765, 766, 767, 768, 769, 772, 773, 776, 779, 780, 783, 790, 799, 800, 804, 807, 845, 851, 853, 856, 857, 862, 895, 908, 930, 961, 962, 973, 986, 987, 989, 1011, 1025, 1029, 1031, 1037, 1039, 1041, 1043, 1047, 1069, 1073, 1079, 1085, 1115, 1145, 1152, 1153], "7": [1, 29, 30, 32, 33, 34, 35, 36, 37, 38, 61, 72, 74, 79, 150, 153, 154, 155, 156, 157, 159, 161, 165, 166, 169, 174, 180, 182, 184, 191, 196, 197, 198, 200, 201, 204, 207, 209, 211, 213, 215, 216, 218, 219, 220, 221, 225, 226, 228, 230, 231, 232, 233, 238, 239, 240, 241, 247, 249, 250, 251, 278, 285, 289, 307, 333, 343, 347, 367, 369, 370, 377, 379, 389, 404, 407, 428, 454, 455, 456, 457, 476, 502, 514, 518, 522, 532, 548, 589, 600, 602, 633, 634, 641, 647, 658, 659, 677, 694, 712, 717, 719, 721, 723, 727, 731, 736, 738, 739, 743, 750, 752, 755, 757, 759, 760, 761, 772, 773, 804, 807, 820, 828, 868, 872, 879, 898, 899, 906, 908, 956, 986, 987, 989, 1004, 1029, 1042, 1104, 1145, 1153], "float32": [1, 30, 50, 74, 150, 168, 238, 239, 278, 656, 712, 804, 807, 937, 1003, 1145], "lazi": [1, 56, 57, 58, 59, 61, 74, 79, 121, 137, 192, 206, 207, 278, 477, 649, 667, 670, 685, 694, 739, 740, 782, 785, 786, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 807, 1152, 1153], "i16": [1, 74, 540, 694, 807, 1004, 1124, 1145, 1153], "i32": [1, 74, 96, 99, 103, 136, 137, 221, 278, 317, 354, 381, 520, 540, 570, 684, 694, 761, 804, 879, 910, 1003, 1031, 1085, 1145, 1153], "f32": [1, 74, 150, 158, 238, 278, 540, 694, 712, 720, 804, 807, 1003, 1145], "i64": [1, 2, 17, 21, 53, 56, 58, 72, 73, 74, 75, 79, 96, 97, 98, 99, 100, 101, 102, 103, 109, 121, 149, 151, 152, 153, 156, 158, 159, 161, 162, 164, 165, 170, 171, 172, 173, 174, 180, 182, 183, 185, 187, 191, 192, 195, 196, 199, 200, 201, 205, 206, 207, 208, 211, 212, 213, 214, 215, 219, 221, 225, 226, 228, 229, 231, 232, 233, 235, 241, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 256, 257, 258, 261, 262, 263, 264, 265, 268, 271, 272, 278, 285, 287, 291, 305, 306, 307, 308, 309, 315, 319, 322, 323, 324, 330, 331, 332, 333, 335, 337, 338, 348, 350, 352, 356, 358, 360, 365, 372, 375, 388, 390, 391, 393, 394, 395, 396, 398, 399, 404, 405, 406, 407, 408, 412, 416, 417, 419, 420, 421, 423, 425, 428, 437, 439, 440, 441, 442, 443, 444, 447, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 471, 474, 475, 477, 492, 493, 494, 503, 504, 507, 508, 509, 510, 511, 514, 515, 516, 518, 519, 520, 521, 522, 535, 537, 538, 539, 540, 541, 542, 546, 547, 548, 571, 572, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 608, 610, 613, 621, 627, 629, 633, 634, 635, 636, 643, 644, 645, 646, 647, 651, 653, 654, 655, 656, 658, 659, 660, 661, 664, 665, 669, 673, 674, 677, 678, 679, 684, 690, 694, 710, 713, 715, 716, 718, 719, 720, 723, 724, 726, 727, 728, 730, 731, 736, 739, 740, 741, 743, 745, 746, 749, 750, 751, 753, 754, 757, 758, 759, 761, 763, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 780, 783, 785, 786, 789, 790, 791, 792, 793, 796, 799, 800, 804, 807, 810, 813, 826, 827, 828, 829, 835, 840, 847, 850, 854, 855, 856, 857, 859, 860, 873, 875, 877, 884, 886, 889, 894, 901, 904, 919, 920, 922, 923, 929, 942, 969, 971, 972, 973, 976, 986, 987, 989, 990, 991, 992, 995, 997, 1005, 1010, 1023, 1028, 1029, 1031, 1035, 1038, 1042, 1045, 1048, 1049, 1052, 1056, 1057, 1061, 1062, 1114, 1116, 1117, 1118, 1123, 1129, 1130, 1136, 1145, 1152, 1153], "register_series_namespac": [1, 72, 73, 74], "math": [1, 75, 336, 622, 623, 694, 851, 853, 1058, 1119, 1145], "mathshortcut": [1, 75], "": [1, 2, 13, 30, 33, 38, 50, 56, 59, 63, 75, 96, 97, 103, 107, 108, 109, 110, 112, 118, 122, 123, 126, 127, 139, 149, 150, 158, 160, 173, 174, 176, 177, 183, 191, 192, 199, 205, 207, 212, 213, 218, 221, 222, 229, 233, 237, 243, 245, 246, 247, 248, 253, 254, 278, 350, 373, 376, 388, 424, 444, 446, 458, 459, 463, 475, 477, 486, 493, 496, 497, 503, 504, 516, 520, 548, 552, 559, 560, 561, 567, 571, 573, 575, 576, 578, 586, 587, 588, 591, 592, 594, 595, 596, 615, 616, 617, 618, 624, 630, 635, 636, 645, 648, 649, 658, 659, 660, 661, 664, 665, 673, 674, 676, 677, 678, 690, 694, 710, 712, 719, 720, 730, 731, 733, 734, 740, 749, 761, 762, 769, 774, 775, 776, 777, 780, 781, 787, 792, 804, 807, 810, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 835, 836, 838, 839, 841, 842, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 868, 872, 874, 875, 878, 880, 881, 885, 887, 891, 892, 896, 899, 900, 902, 905, 906, 908, 909, 910, 913, 914, 915, 916, 920, 921, 922, 923, 925, 928, 929, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 969, 971, 973, 976, 978, 980, 990, 991, 992, 995, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1056, 1057, 1058, 1059, 1061, 1062, 1064, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1082, 1085, 1086, 1088, 1090, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1145], "_": [1, 71, 75, 207, 237, 278, 446, 560, 564, 565, 576, 577, 841, 1075, 1079, 1080, 1092, 1122, 1145], "squar": [1, 75, 264, 424, 549, 694, 792, 957, 1063, 1145], "cube": [1, 75, 320, 508, 694, 843, 1145], "s2": [1, 62, 80, 81, 132, 133, 168, 278, 845, 862, 942, 956, 997, 1011, 1047, 1127, 1136, 1145], "renam": [1, 99, 107, 108, 146, 148, 175, 176, 177, 178, 221, 222, 253, 254, 257, 259, 278, 287, 292, 411, 415, 418, 435, 438, 445, 449, 462, 466, 473, 474, 489, 509, 523, 553, 566, 568, 569, 574, 580, 596, 598, 619, 657, 673, 676, 694, 709, 732, 733, 734, 735, 744, 756, 761, 762, 780, 781, 784, 785, 787, 804, 810, 814, 859, 939, 945, 967, 970, 977, 981, 994, 998, 1023, 1033, 1068, 1081, 1083, 1084, 1089, 1095, 1112, 1123, 1145], "n2": [1, 465], "in_plac": [1, 182, 227, 251, 278, 1026, 1055, 1062, 1145], "true": [1, 6, 12, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 36, 38, 50, 51, 52, 56, 58, 60, 77, 78, 79, 96, 97, 101, 103, 105, 107, 108, 109, 111, 112, 113, 115, 118, 119, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 139, 143, 145, 149, 150, 151, 152, 155, 164, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 183, 185, 186, 187, 189, 192, 193, 197, 202, 203, 205, 207, 208, 215, 216, 217, 218, 219, 221, 229, 235, 237, 239, 240, 243, 244, 245, 246, 247, 249, 253, 258, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 278, 286, 287, 288, 289, 290, 291, 292, 303, 310, 311, 313, 314, 317, 329, 330, 331, 332, 333, 335, 342, 344, 347, 348, 350, 352, 353, 355, 356, 358, 360, 362, 363, 365, 366, 367, 369, 370, 371, 372, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 401, 402, 408, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 424, 426, 429, 430, 434, 460, 464, 465, 472, 477, 481, 482, 483, 484, 485, 486, 488, 489, 498, 499, 500, 502, 505, 506, 511, 516, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 540, 545, 547, 548, 552, 554, 555, 557, 562, 563, 570, 576, 577, 579, 586, 587, 588, 591, 595, 596, 601, 608, 611, 614, 615, 616, 617, 618, 619, 621, 624, 625, 630, 631, 638, 639, 640, 641, 642, 647, 653, 654, 659, 667, 670, 676, 681, 682, 684, 685, 694, 710, 712, 713, 714, 715, 716, 722, 724, 726, 730, 731, 732, 733, 734, 735, 739, 740, 742, 744, 745, 749, 754, 759, 761, 763, 767, 769, 774, 775, 776, 780, 786, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 804, 807, 811, 812, 813, 814, 824, 831, 836, 839, 842, 845, 846, 859, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 904, 906, 907, 908, 912, 914, 915, 916, 923, 927, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 955, 957, 961, 962, 992, 996, 1005, 1011, 1017, 1020, 1021, 1023, 1027, 1040, 1047, 1060, 1062, 1067, 1069, 1070, 1072, 1077, 1078, 1085, 1091, 1092, 1094, 1101, 1102, 1103, 1106, 1126, 1127, 1135, 1136, 1145, 1152, 1153], "s3": [1, 32, 111, 122, 123, 126, 127, 278, 997, 1145], "n3": 1, "8": [1, 13, 29, 30, 32, 34, 35, 36, 37, 38, 49, 56, 61, 68, 70, 71, 72, 74, 75, 79, 129, 135, 150, 153, 154, 155, 156, 157, 158, 159, 161, 165, 166, 169, 172, 180, 182, 191, 195, 196, 197, 198, 201, 209, 211, 213, 216, 218, 219, 220, 221, 225, 226, 228, 230, 231, 232, 233, 238, 239, 240, 241, 247, 250, 251, 253, 278, 289, 291, 304, 328, 330, 333, 334, 343, 407, 427, 437, 440, 449, 454, 455, 456, 457, 494, 502, 508, 518, 519, 524, 540, 546, 548, 566, 567, 569, 573, 586, 602, 614, 620, 626, 630, 631, 632, 634, 636, 644, 646, 651, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 675, 678, 679, 683, 694, 712, 717, 719, 720, 721, 723, 727, 736, 739, 743, 745, 754, 757, 760, 761, 772, 773, 780, 804, 807, 813, 853, 858, 879, 930, 956, 969, 972, 981, 986, 987, 989, 1019, 1029, 1032, 1034, 1037, 1039, 1041, 1043, 1081, 1082, 1084, 1088, 1101, 1145, 1153], "9": [1, 29, 30, 32, 33, 34, 35, 38, 56, 61, 71, 79, 129, 154, 155, 168, 175, 180, 184, 195, 215, 217, 218, 221, 232, 247, 251, 253, 271, 278, 285, 289, 291, 304, 316, 328, 330, 333, 336, 343, 407, 413, 423, 427, 437, 453, 460, 502, 513, 518, 522, 524, 530, 532, 542, 546, 560, 589, 602, 628, 633, 634, 682, 694, 732, 736, 738, 743, 759, 761, 772, 780, 799, 804, 807, 860, 872, 883, 885, 893, 899, 906, 907, 942, 956, 969, 992, 1029, 1034, 1040, 1042, 1044, 1057, 1075, 1104, 1145], "27": [1, 75, 271, 333, 361, 368, 378, 694, 799, 1145, 1153], "16": [1, 33, 46, 65, 73, 174, 215, 253, 278, 330, 333, 407, 494, 508, 522, 570, 633, 643, 644, 647, 694, 731, 759, 767, 780, 804, 807, 899, 906, 1019, 1058, 1085, 1119, 1145], "64": [1, 45, 48, 67, 73, 75, 128, 145, 327, 494, 508, 694, 1019, 1145], "25": [1, 33, 75, 103, 137, 155, 174, 192, 215, 249, 253, 278, 337, 347, 349, 367, 370, 377, 379, 511, 522, 525, 526, 527, 528, 529, 531, 532, 533, 607, 638, 639, 641, 642, 643, 649, 659, 681, 682, 694, 731, 740, 747, 759, 778, 780, 804, 807, 860, 861, 874, 899, 906, 912, 930, 1019, 1023, 1145], "125": [1, 33, 75, 278, 285, 694, 1019, 1145], "arg": [2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 165, 206, 240, 278, 507, 624, 648, 694, 727, 753, 804, 1005, 1126, 1127, 1145], "ani": [2, 3, 4, 5, 9, 30, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69, 70, 76, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 134, 136, 137, 139, 143, 146, 154, 158, 162, 164, 165, 168, 188, 189, 190, 195, 205, 206, 216, 217, 218, 235, 236, 239, 240, 245, 247, 248, 278, 285, 288, 289, 292, 317, 371, 383, 384, 393, 398, 401, 402, 413, 426, 433, 440, 472, 473, 475, 476, 477, 489, 492, 494, 498, 499, 502, 503, 507, 509, 518, 523, 524, 536, 570, 586, 587, 588, 591, 597, 598, 601, 607, 614, 615, 618, 619, 630, 646, 655, 656, 659, 684, 694, 720, 726, 727, 753, 775, 777, 804, 807, 811, 813, 814, 862, 900, 919, 922, 942, 956, 965, 972, 1004, 1005, 1029, 1033, 1034, 1046, 1049, 1085, 1101, 1102, 1103, 1106, 1117, 1125, 1126, 1127, 1145, 1152, 1153], "kwarg": [2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 109, 154, 165, 206, 240, 278, 507, 694, 727, 753, 804, 1127, 1145, 1152], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 694, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1145, 1152], "nest": [2, 53, 62, 103, 119, 126, 160, 278, 705, 913, 1145, 1152, 1153], "fix": [2, 112, 135, 137, 380, 525, 526, 527, 528, 529, 531, 532, 533, 643, 694, 909], "length": [2, 53, 79, 121, 135, 172, 174, 175, 177, 178, 215, 228, 278, 334, 370, 377, 459, 465, 486, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 546, 564, 565, 567, 569, 573, 575, 594, 667, 670, 671, 672, 685, 694, 731, 732, 734, 735, 754, 759, 768, 804, 845, 858, 868, 899, 906, 991, 997, 1016, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1061, 1079, 1080, 1082, 1084, 1088, 1090, 1109, 1145], "inner": [2, 53, 136, 191, 248, 278, 305, 306, 307, 308, 338, 446, 517, 605, 694, 739, 763, 777, 804, 826, 827, 828, 829, 862, 978, 1128, 1145], "width": [2, 26, 33, 107, 108, 121, 278, 305, 306, 307, 308, 567, 573, 594, 804, 826, 827, 828, 829, 1082, 1088, 1109], "int": [2, 14, 15, 17, 25, 26, 30, 33, 38, 42, 50, 52, 58, 61, 73, 99, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 121, 122, 124, 125, 126, 127, 128, 135, 136, 137, 138, 139, 140, 141, 146, 149, 151, 160, 163, 164, 166, 172, 179, 180, 181, 183, 188, 189, 190, 192, 194, 195, 196, 197, 201, 202, 203, 213, 216, 219, 224, 225, 226, 228, 230, 231, 232, 233, 238, 241, 243, 247, 250, 252, 255, 262, 272, 278, 285, 309, 315, 334, 337, 385, 386, 387, 391, 392, 393, 399, 403, 404, 428, 434, 437, 443, 444, 458, 459, 463, 464, 465, 502, 504, 507, 508, 511, 514, 517, 518, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 546, 550, 559, 562, 567, 570, 571, 573, 575, 577, 578, 589, 594, 600, 601, 602, 606, 612, 614, 621, 630, 631, 637, 640, 643, 649, 651, 653, 654, 663, 666, 667, 670, 671, 672, 675, 676, 679, 680, 683, 685, 694, 710, 713, 724, 725, 726, 736, 740, 743, 754, 765, 766, 768, 770, 772, 773, 774, 778, 779, 783, 790, 800, 804, 821, 822, 835, 836, 845, 846, 858, 861, 913, 914, 915, 916, 920, 921, 922, 928, 929, 930, 956, 958, 959, 966, 967, 968, 969, 975, 976, 990, 991, 995, 996, 997, 1007, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1025, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1056, 1061, 1064, 1074, 1077, 1082, 1085, 1086, 1088, 1090, 1092, 1093, 1104, 1109, 1115, 1116, 1117, 1118, 1124, 1129, 1134, 1145, 1152, 1153], "polarsdatatyp": [2, 53, 107, 108, 114, 120, 121, 134, 135, 136, 137, 139, 146, 150, 159, 195, 278, 292, 317, 388, 473, 475, 476, 477, 562, 619, 645, 656, 657, 658, 659, 667, 670, 685, 690, 694, 712, 721, 804, 807, 814, 836, 1004, 1005, 1077, 1145], "pythondatatyp": [2, 53], "null": [2, 30, 32, 50, 58, 71, 79, 99, 107, 108, 117, 121, 127, 145, 149, 151, 155, 158, 164, 168, 169, 184, 191, 197, 198, 204, 207, 209, 225, 226, 229, 230, 231, 235, 240, 243, 246, 248, 250, 253, 260, 278, 288, 290, 291, 292, 302, 309, 311, 322, 323, 324, 328, 330, 333, 337, 339, 340, 348, 352, 356, 358, 360, 365, 366, 372, 384, 385, 386, 387, 388, 391, 392, 393, 399, 407, 417, 419, 420, 421, 427, 429, 430, 437, 439, 442, 443, 447, 448, 454, 455, 456, 457, 458, 464, 465, 476, 477, 499, 500, 501, 504, 515, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 542, 547, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567, 570, 573, 575, 577, 578, 579, 594, 595, 596, 605, 615, 616, 617, 618, 627, 628, 629, 631, 636, 645, 656, 661, 665, 671, 672, 676, 678, 684, 694, 710, 713, 720, 726, 738, 739, 752, 763, 765, 766, 769, 774, 776, 777, 780, 782, 788, 804, 811, 812, 814, 823, 831, 846, 847, 861, 863, 864, 873, 877, 884, 886, 889, 894, 901, 914, 915, 916, 920, 922, 927, 933, 949, 950, 958, 961, 962, 969, 971, 980, 987, 989, 990, 996, 997, 1005, 1018, 1019, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1052, 1053, 1057, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1085, 1088, 1090, 1092, 1093, 1094, 1124, 1126, 1127, 1128, 1135, 1145, 1152, 1153], "paramet": [2, 7, 8, 11, 13, 14, 15, 16, 17, 20, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 50, 51, 52, 53, 56, 57, 58, 59, 61, 63, 71, 72, 73, 74, 75, 77, 78, 79, 81, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 145, 146, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 202, 203, 205, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 259, 262, 264, 270, 272, 278, 285, 287, 288, 289, 290, 291, 292, 302, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 322, 323, 324, 329, 330, 331, 332, 333, 334, 335, 337, 338, 342, 343, 344, 350, 366, 369, 370, 371, 373, 375, 376, 377, 380, 382, 383, 384, 385, 386, 387, 388, 391, 393, 394, 398, 399, 400, 401, 402, 403, 404, 407, 408, 413, 424, 426, 428, 433, 434, 435, 436, 437, 440, 443, 444, 446, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 467, 468, 472, 473, 474, 475, 476, 477, 488, 492, 494, 498, 499, 502, 503, 504, 507, 508, 509, 511, 512, 514, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 594, 595, 596, 597, 598, 600, 601, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 694, 710, 712, 713, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 743, 744, 745, 749, 750, 753, 754, 755, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 787, 790, 792, 798, 800, 804, 807, 810, 811, 812, 813, 814, 823, 829, 830, 831, 832, 833, 834, 835, 836, 840, 846, 847, 848, 849, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 868, 869, 875, 895, 898, 899, 900, 902, 904, 905, 906, 909, 912, 913, 914, 915, 916, 919, 920, 921, 922, 923, 928, 929, 930, 933, 934, 944, 952, 953, 957, 959, 965, 966, 967, 968, 969, 972, 975, 976, 978, 986, 987, 988, 989, 990, 991, 992, 995, 996, 997, 999, 1004, 1005, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1056, 1060, 1061, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1082, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1109, 1110, 1112, 1116, 1117, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1133, 1134, 1135, 1136, 1145, 1152], "The": [2, 20, 31, 32, 33, 38, 52, 53, 56, 60, 62, 63, 71, 76, 77, 81, 96, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 116, 117, 119, 121, 125, 127, 130, 131, 132, 141, 155, 157, 158, 159, 161, 162, 165, 172, 173, 174, 177, 179, 184, 189, 192, 195, 200, 205, 215, 216, 217, 218, 221, 222, 239, 246, 249, 253, 254, 257, 264, 278, 287, 309, 310, 311, 312, 335, 339, 340, 347, 361, 366, 367, 370, 373, 377, 378, 388, 391, 394, 399, 403, 439, 464, 475, 477, 503, 511, 514, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 542, 545, 551, 555, 556, 562, 567, 568, 573, 574, 580, 581, 582, 583, 584, 585, 586, 594, 645, 649, 659, 671, 672, 673, 676, 684, 686, 687, 689, 690, 694, 695, 696, 700, 701, 702, 720, 723, 727, 731, 734, 736, 738, 740, 743, 745, 750, 754, 759, 761, 762, 763, 776, 780, 781, 785, 792, 804, 810, 813, 830, 831, 832, 846, 859, 860, 863, 864, 872, 890, 895, 896, 899, 902, 906, 907, 919, 920, 923, 928, 971, 996, 1005, 1023, 1025, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1049, 1057, 1060, 1066, 1070, 1071, 1077, 1082, 1083, 1088, 1089, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1109, 1137, 1139, 1141, 1145, 1146, 1149, 1150, 1151, 1153], "size": [2, 15, 38, 52, 107, 108, 109, 135, 136, 137, 139, 141, 160, 247, 278, 518, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 621, 653, 654, 671, 672, 694, 715, 804, 913, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1145, 1153], "datatyp": [2, 30, 36, 50, 53, 69, 96, 98, 99, 100, 102, 104, 112, 114, 116, 117, 120, 125, 139, 159, 161, 168, 220, 278, 317, 388, 540, 605, 645, 656, 694, 705, 723, 760, 763, 804, 814, 836, 860, 944, 951, 953, 955, 1005, 1054, 1128, 1145], "valu": [2, 9, 13, 14, 17, 28, 30, 33, 36, 50, 53, 54, 56, 60, 62, 69, 71, 79, 81, 99, 101, 107, 108, 109, 110, 112, 121, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 147, 148, 149, 155, 158, 162, 163, 164, 165, 169, 172, 174, 177, 179, 180, 184, 188, 189, 192, 194, 195, 196, 197, 198, 199, 201, 203, 205, 207, 208, 209, 211, 215, 216, 217, 218, 219, 225, 226, 229, 230, 231, 232, 235, 236, 240, 243, 244, 247, 248, 249, 250, 260, 261, 263, 265, 266, 268, 269, 278, 284, 285, 286, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 334, 335, 337, 339, 340, 343, 347, 361, 367, 378, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 429, 430, 431, 432, 435, 436, 437, 439, 442, 443, 444, 447, 448, 450, 451, 452, 458, 461, 463, 467, 469, 471, 472, 475, 476, 477, 478, 479, 480, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 507, 508, 511, 512, 514, 517, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 559, 562, 563, 571, 572, 575, 577, 578, 579, 594, 597, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 617, 620, 627, 629, 631, 633, 634, 635, 636, 646, 647, 652, 655, 656, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 677, 678, 684, 694, 708, 709, 710, 720, 725, 726, 727, 731, 734, 737, 738, 740, 746, 747, 748, 749, 751, 752, 755, 757, 759, 763, 765, 766, 769, 770, 771, 774, 777, 778, 788, 789, 791, 793, 794, 796, 797, 804, 807, 809, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 833, 834, 840, 844, 847, 848, 849, 851, 852, 853, 858, 859, 860, 861, 863, 864, 868, 872, 890, 896, 907, 913, 914, 915, 916, 919, 920, 921, 922, 925, 927, 928, 929, 930, 931, 933, 934, 936, 938, 939, 940, 942, 943, 945, 946, 947, 948, 949, 950, 954, 958, 959, 961, 962, 963, 964, 967, 968, 969, 971, 974, 975, 976, 979, 980, 982, 983, 984, 990, 995, 999, 1004, 1006, 1007, 1009, 1010, 1012, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1057, 1058, 1059, 1060, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1086, 1087, 1090, 1092, 1093, 1094, 1109, 1115, 1116, 1117, 1118, 1119, 1120, 1126, 1127, 1128, 1131, 1133, 1135, 1136, 1145, 1153], "within": [2, 53, 130, 131, 132, 133, 173, 174, 175, 176, 177, 178, 192, 215, 249, 278, 514, 522, 548, 694, 731, 732, 734, 735, 740, 759, 804, 1152], "exampl": [2, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 74, 75, 79, 80, 81, 96, 97, 98, 99, 100, 101, 102, 103, 105, 108, 109, 110, 111, 112, 118, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 690, 694, 705, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 919, 920, 921, 922, 923, 925, 928, 929, 930, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 958, 961, 962, 969, 971, 972, 973, 976, 978, 980, 986, 987, 989, 990, 991, 992, 995, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1056, 1057, 1058, 1059, 1061, 1062, 1064, 1066, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1085, 1086, 1087, 1088, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1145, 1152], "dtype": [2, 33, 41, 62, 74, 80, 81, 96, 98, 100, 102, 103, 107, 108, 109, 110, 116, 117, 118, 121, 134, 135, 136, 137, 139, 145, 150, 174, 175, 177, 178, 192, 215, 238, 239, 240, 247, 278, 292, 317, 318, 322, 323, 324, 332, 333, 380, 388, 433, 464, 471, 473, 475, 476, 477, 516, 517, 522, 525, 526, 527, 528, 529, 531, 532, 533, 540, 562, 586, 599, 601, 605, 610, 619, 621, 631, 645, 649, 653, 654, 656, 657, 658, 659, 667, 670, 676, 685, 694, 712, 731, 732, 734, 735, 740, 759, 804, 807, 826, 827, 836, 838, 839, 841, 846, 847, 848, 849, 856, 857, 860, 861, 909, 913, 937, 944, 953, 965, 996, 1003, 1004, 1030, 1047, 1054, 1077, 1101, 1115, 1124, 1126, 1127, 1128, 1132, 1145, 1153], "method": [2, 3, 4, 5, 9, 29, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 97, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 134, 143, 146, 148, 158, 162, 173, 175, 176, 177, 178, 184, 189, 195, 203, 209, 216, 217, 218, 245, 253, 259, 264, 270, 278, 285, 288, 289, 292, 316, 373, 376, 383, 384, 391, 398, 401, 402, 407, 411, 415, 418, 423, 426, 435, 438, 445, 449, 462, 466, 472, 473, 477, 492, 494, 498, 499, 502, 508, 509, 512, 514, 523, 525, 526, 527, 528, 529, 531, 532, 533, 553, 566, 568, 569, 574, 580, 589, 597, 598, 607, 609, 614, 630, 638, 659, 668, 670, 681, 686, 687, 689, 690, 694, 695, 696, 699, 700, 701, 702, 705, 709, 716, 718, 720, 729, 732, 733, 734, 735, 738, 744, 755, 756, 775, 780, 784, 787, 792, 798, 804, 813, 814, 902, 905, 919, 920, 933, 939, 945, 967, 970, 977, 981, 994, 998, 1005, 1024, 1025, 1033, 1039, 1068, 1081, 1083, 1084, 1089, 1095, 1104, 1128, 1137, 1139, 1141, 1145, 1146, 1149, 1150, 1151], "attribut": [2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69, 70, 134, 278, 686, 687, 689, 690, 695, 696, 700, 701, 702, 804, 1137, 1139, 1141, 1146, 1149, 1150, 1151], "A": [5, 30, 33, 50, 56, 59, 77, 78, 103, 107, 108, 109, 110, 121, 123, 128, 141, 168, 174, 191, 192, 207, 235, 247, 248, 249, 253, 254, 278, 284, 339, 340, 343, 383, 384, 391, 401, 402, 410, 414, 417, 419, 426, 465, 472, 475, 486, 498, 499, 519, 524, 525, 526, 527, 528, 529, 531, 532, 533, 552, 553, 554, 559, 560, 561, 563, 571, 572, 594, 628, 643, 644, 648, 694, 731, 739, 740, 757, 777, 780, 781, 804, 807, 863, 864, 868, 920, 1034, 1035, 1036, 1038, 1041, 1042, 1043, 1067, 1068, 1069, 1074, 1075, 1076, 1078, 1086, 1087, 1109, 1145, 1152], "encod": [5, 70, 107, 108, 121, 237, 278, 311, 400, 555, 694, 831, 1070], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 20, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 50, 51, 52, 71, 72, 97, 99, 102, 107, 108, 109, 112, 113, 115, 118, 119, 121, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 145, 153, 158, 167, 173, 174, 175, 176, 177, 178, 179, 189, 192, 199, 215, 219, 221, 228, 237, 239, 244, 245, 247, 253, 278, 288, 290, 292, 316, 335, 380, 403, 413, 438, 445, 454, 455, 456, 457, 459, 462, 464, 465, 466, 476, 477, 507, 511, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 541, 545, 546, 568, 574, 575, 580, 581, 582, 583, 586, 587, 588, 591, 611, 615, 617, 621, 625, 638, 639, 641, 642, 653, 654, 667, 670, 671, 672, 676, 681, 682, 684, 685, 694, 705, 715, 720, 722, 730, 731, 732, 733, 734, 735, 739, 740, 744, 745, 749, 759, 761, 763, 768, 775, 780, 784, 787, 792, 804, 811, 812, 813, 842, 859, 909, 928, 942, 970, 977, 986, 987, 988, 989, 991, 994, 996, 997, 998, 1004, 1005, 1023, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1056, 1060, 1061, 1083, 1089, 1090, 1095, 1096, 1097, 1098, 1101, 1102, 1103, 1106, 1126, 1133, 1145, 1153], "string": [5, 7, 8, 10, 11, 14, 15, 16, 20, 30, 31, 33, 36, 37, 41, 50, 56, 62, 70, 80, 81, 103, 107, 108, 109, 110, 121, 130, 131, 132, 133, 134, 135, 136, 139, 142, 149, 168, 172, 173, 174, 176, 192, 205, 207, 215, 218, 221, 222, 229, 238, 243, 244, 247, 249, 253, 254, 257, 278, 285, 313, 319, 366, 370, 373, 376, 377, 388, 390, 396, 400, 408, 446, 476, 488, 503, 507, 522, 525, 526, 527, 528, 529, 531, 532, 533, 548, 551, 552, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 594, 616, 618, 624, 627, 628, 629, 636, 638, 639, 641, 642, 648, 661, 665, 673, 676, 678, 681, 682, 684, 694, 710, 722, 729, 730, 731, 733, 740, 759, 761, 762, 763, 769, 774, 780, 781, 784, 785, 804, 807, 833, 839, 840, 895, 899, 902, 905, 906, 918, 934, 978, 1065, 1066, 1067, 1069, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1107, 1108, 1109, 1124, 1145, 1153], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 400, 694, 718, 729, 756, 804], "activ": [6, 12, 18, 19, 21, 22, 23, 24, 27, 440, 560, 972, 1075], "bool": [6, 12, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 36, 38, 50, 51, 52, 71, 77, 78, 79, 80, 81, 96, 97, 101, 103, 107, 108, 112, 113, 115, 117, 118, 119, 121, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 145, 149, 150, 151, 152, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 185, 186, 187, 192, 205, 207, 215, 218, 219, 223, 227, 229, 235, 237, 239, 240, 243, 244, 245, 246, 249, 251, 253, 261, 263, 265, 268, 278, 287, 288, 289, 290, 291, 292, 302, 308, 310, 311, 313, 314, 317, 329, 330, 331, 332, 333, 334, 335, 353, 369, 371, 377, 382, 383, 384, 385, 386, 387, 401, 402, 408, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 424, 426, 429, 430, 434, 440, 460, 464, 467, 472, 473, 475, 477, 481, 482, 483, 484, 485, 488, 498, 499, 500, 502, 505, 506, 511, 514, 516, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 540, 545, 547, 548, 552, 554, 555, 557, 570, 571, 572, 576, 577, 579, 586, 587, 588, 591, 596, 608, 611, 614, 615, 616, 617, 618, 619, 621, 624, 625, 630, 633, 638, 639, 640, 641, 642, 653, 654, 656, 659, 667, 670, 676, 681, 682, 685, 694, 710, 712, 713, 715, 716, 722, 724, 726, 727, 730, 731, 732, 733, 734, 735, 739, 740, 744, 745, 749, 754, 759, 764, 767, 769, 774, 775, 776, 780, 789, 791, 793, 796, 804, 807, 811, 812, 813, 814, 823, 829, 831, 836, 839, 842, 846, 854, 855, 856, 857, 858, 859, 878, 898, 900, 906, 912, 914, 915, 916, 923, 927, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 961, 962, 966, 967, 968, 972, 992, 996, 999, 1005, 1017, 1020, 1021, 1023, 1025, 1026, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1055, 1060, 1062, 1067, 1069, 1070, 1072, 1085, 1086, 1087, 1091, 1092, 1094, 1101, 1102, 1103, 1106, 1125, 1126, 1127, 1130, 1133, 1135, 1145, 1152], "none": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 50, 51, 52, 54, 56, 58, 59, 61, 71, 78, 81, 96, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 146, 151, 155, 158, 163, 164, 172, 174, 175, 177, 178, 179, 184, 188, 191, 192, 193, 195, 197, 199, 203, 204, 207, 215, 216, 219, 226, 228, 229, 235, 237, 240, 244, 245, 246, 247, 248, 249, 278, 288, 290, 291, 292, 304, 309, 322, 323, 324, 328, 330, 333, 335, 339, 340, 366, 369, 370, 377, 384, 385, 386, 387, 388, 391, 392, 393, 399, 403, 407, 408, 417, 419, 420, 421, 427, 429, 430, 439, 443, 448, 454, 455, 456, 457, 459, 465, 473, 475, 476, 477, 485, 488, 490, 499, 500, 501, 504, 508, 511, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 539, 540, 541, 542, 546, 547, 551, 552, 554, 556, 557, 560, 562, 563, 564, 565, 567, 568, 570, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 591, 594, 595, 596, 605, 615, 616, 617, 618, 619, 627, 629, 631, 636, 638, 639, 640, 641, 642, 643, 645, 646, 655, 656, 657, 658, 659, 661, 665, 670, 671, 672, 675, 676, 678, 680, 681, 682, 683, 684, 694, 713, 714, 716, 720, 725, 726, 731, 732, 734, 735, 738, 739, 740, 742, 744, 745, 749, 752, 759, 763, 766, 767, 768, 769, 775, 776, 777, 782, 784, 787, 792, 804, 807, 811, 812, 813, 814, 821, 822, 846, 847, 859, 860, 862, 863, 864, 880, 881, 882, 887, 898, 899, 906, 911, 912, 914, 915, 916, 920, 921, 922, 924, 928, 930, 932, 933, 934, 944, 949, 950, 953, 956, 957, 958, 961, 962, 971, 975, 980, 986, 987, 989, 991, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1023, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1049, 1051, 1053, 1056, 1057, 1060, 1061, 1064, 1066, 1067, 1069, 1071, 1072, 1075, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1101, 1102, 1103, 1106, 1123, 1124, 1125, 1127, 1128, 1134, 1135, 1145, 1152], "decim": [6, 13, 30, 33, 50, 278, 534, 589, 694, 804, 1044, 1104, 1145], "temporari": 6, "remov": [6, 9, 82, 107, 108, 121, 145, 156, 237, 278, 292, 388, 474, 477, 568, 574, 580, 581, 582, 583, 584, 585, 645, 694, 719, 804, 813, 859, 1023, 1083, 1089, 1095, 1096, 1097, 1098, 1099, 1100, 1103, 1145], "onc": [6, 59, 107, 108, 112, 141, 195, 217, 219, 257, 278, 316, 477, 535, 584, 585, 694, 711, 785, 804, 1005, 1045, 1099, 1100, 1145], "stabil": 6, "current": [6, 7, 8, 10, 11, 28, 58, 97, 103, 109, 110, 126, 151, 152, 191, 192, 278, 349, 370, 465, 504, 694, 705, 713, 714, 715, 739, 740, 804, 807, 846, 850, 866, 874, 899, 1019, 1145, 1152], "consid": [6, 78, 80, 81, 107, 108, 121, 127, 130, 131, 132, 158, 169, 195, 199, 217, 245, 247, 248, 278, 292, 322, 323, 324, 334, 370, 475, 477, 525, 526, 527, 528, 529, 531, 532, 533, 633, 647, 690, 694, 716, 720, 736, 743, 749, 775, 792, 804, 839, 842, 847, 848, 849, 858, 899, 930, 944, 1005, 1023, 1047, 1048, 1049, 1145], "beta": 6, "cfg": [7, 9, 17, 143], "previous": [7, 8], "save": [7, 8, 11, 174, 192, 215, 249, 278, 341, 349, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 643, 681, 682, 690, 694, 705, 731, 740, 759, 804, 874, 895, 899, 906], "option": [7, 8, 9, 10, 11, 28, 32, 33, 42, 71, 107, 109, 111, 112, 113, 115, 119, 122, 123, 124, 126, 127, 129, 134, 135, 136, 137, 138, 139, 140, 174, 188, 192, 199, 235, 239, 244, 278, 424, 523, 525, 526, 527, 528, 529, 531, 532, 533, 545, 575, 611, 656, 676, 684, 694, 705, 731, 739, 740, 749, 763, 804, 807, 953, 957, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1060, 1090, 1123, 1133, 1145], "from": [7, 8, 9, 10, 11, 30, 33, 50, 56, 57, 58, 71, 79, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 150, 155, 156, 160, 162, 167, 172, 174, 177, 189, 190, 192, 193, 199, 207, 211, 215, 216, 218, 219, 221, 222, 237, 244, 245, 247, 248, 249, 278, 329, 335, 336, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 384, 388, 400, 407, 424, 465, 477, 496, 497, 499, 504, 507, 511, 513, 522, 524, 525, 526, 528, 531, 532, 533, 535, 548, 559, 560, 562, 570, 584, 585, 586, 587, 588, 591, 609, 622, 623, 627, 637, 638, 639, 640, 641, 643, 670, 675, 680, 681, 682, 690, 693, 694, 712, 718, 719, 724, 729, 731, 734, 740, 749, 756, 757, 759, 761, 762, 775, 777, 782, 804, 807, 813, 859, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 919, 953, 957, 997, 1014, 1015, 1016, 1019, 1023, 1034, 1045, 1074, 1075, 1077, 1085, 1099, 1100, 1101, 1102, 1103, 1106, 1136, 1145, 1152, 1153], "json": [7, 8, 10, 11, 36, 37, 116, 117, 123, 125, 278, 400, 490, 562, 563, 694, 705, 718, 729, 756, 763, 784, 804, 1077, 1078], "produc": [7, 8, 136, 137, 139, 435, 436, 485, 658, 744, 745, 804, 967, 968], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 29, 30, 34, 35, 36, 37, 38, 50, 51, 52, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 162, 278, 490, 718, 756, 763, 784, 804, 813, 919, 1145], "path": [8, 11, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 278, 490, 537, 563, 694, 718, 756, 763, 767, 784, 804, 1050, 1078, 1145, 1153], "load": [8, 10, 11, 99, 101, 109, 111, 112, 118, 122, 123, 138, 140, 278, 705, 736, 743, 804, 1153], "reset": [9, 143], "default": [9, 12, 15, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 50, 52, 71, 78, 79, 96, 98, 99, 100, 101, 102, 103, 107, 108, 110, 112, 116, 117, 118, 119, 121, 134, 135, 136, 137, 138, 139, 143, 155, 158, 160, 173, 174, 175, 176, 177, 178, 179, 189, 191, 192, 199, 205, 207, 215, 216, 217, 218, 219, 230, 237, 245, 247, 250, 255, 278, 287, 288, 290, 319, 335, 369, 370, 377, 382, 384, 385, 386, 387, 403, 459, 464, 465, 468, 476, 485, 496, 497, 499, 504, 511, 514, 522, 525, 526, 527, 528, 529, 531, 532, 533, 535, 541, 550, 559, 568, 570, 574, 575, 580, 581, 582, 583, 586, 587, 588, 591, 611, 612, 615, 617, 621, 625, 630, 638, 639, 640, 641, 642, 649, 653, 654, 656, 667, 670, 675, 676, 681, 682, 683, 685, 694, 715, 716, 720, 722, 730, 731, 732, 733, 734, 735, 739, 740, 749, 759, 763, 770, 775, 778, 784, 804, 811, 812, 813, 840, 859, 860, 898, 899, 906, 912, 913, 914, 915, 916, 928, 991, 996, 997, 1004, 1014, 1015, 1019, 1023, 1025, 1045, 1056, 1064, 1067, 1074, 1083, 1085, 1089, 1090, 1095, 1096, 1097, 1098, 1101, 1102, 1103, 1106, 1133, 1134, 1145, 1153], "state": [9, 77, 78, 89, 633, 705, 715, 716, 722, 724, 754, 767, 804], "note": [9, 20, 32, 33, 42, 56, 60, 61, 62, 71, 78, 80, 81, 96, 97, 98, 100, 102, 103, 107, 109, 110, 111, 112, 116, 117, 119, 122, 123, 126, 127, 135, 137, 139, 141, 143, 145, 149, 154, 155, 163, 174, 175, 177, 178, 188, 189, 191, 192, 195, 203, 206, 207, 215, 216, 217, 218, 236, 239, 243, 244, 248, 249, 253, 278, 332, 333, 339, 340, 362, 363, 366, 370, 377, 408, 417, 419, 423, 440, 464, 475, 477, 509, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 545, 552, 559, 560, 561, 564, 565, 571, 581, 582, 583, 586, 598, 599, 607, 633, 638, 639, 641, 642, 643, 647, 656, 667, 669, 670, 681, 682, 684, 685, 690, 694, 704, 710, 716, 724, 725, 731, 732, 734, 735, 736, 740, 743, 757, 759, 767, 769, 774, 777, 780, 804, 856, 857, 860, 863, 864, 891, 892, 895, 906, 927, 972, 996, 1005, 1040, 1048, 1049, 1055, 1060, 1067, 1074, 1075, 1076, 1079, 1080, 1086, 1096, 1097, 1098, 1101, 1115, 1126, 1145, 1152], "oper": [9, 33, 62, 79, 81, 86, 87, 96, 98, 99, 100, 101, 102, 107, 109, 119, 146, 152, 162, 165, 168, 173, 176, 183, 193, 195, 200, 203, 205, 206, 210, 215, 218, 219, 234, 239, 240, 244, 247, 256, 257, 278, 285, 286, 289, 329, 330, 331, 332, 333, 334, 383, 384, 398, 401, 402, 423, 426, 454, 455, 456, 457, 465, 472, 489, 492, 494, 498, 499, 502, 508, 509, 516, 522, 535, 597, 598, 607, 614, 615, 617, 628, 629, 644, 694, 705, 714, 724, 730, 733, 736, 739, 743, 749, 750, 759, 777, 785, 804, 813, 850, 854, 855, 856, 857, 858, 919, 986, 987, 988, 989, 1027, 1045, 1121, 1125, 1126, 1127, 1135, 1145], "environ": [9, 28, 126, 138, 141], "local": [9, 32, 109, 111, 122, 123, 126, 139, 278, 377, 505, 506, 694, 839, 841, 870, 871, 903, 906, 1020, 1021, 1145], "non": [9, 30, 32, 33, 42, 50, 71, 101, 128, 175, 178, 190, 199, 215, 221, 222, 244, 248, 253, 254, 278, 408, 465, 476, 504, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 553, 554, 560, 564, 616, 618, 627, 628, 629, 636, 643, 661, 665, 671, 672, 673, 676, 678, 694, 732, 735, 749, 759, 761, 762, 777, 780, 781, 804, 934, 997, 1019, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1068, 1069, 1075, 1079, 1126, 1145], "env": [9, 140], "back": [9, 71, 162, 240, 278, 503, 592, 694, 763, 804, 813, 919, 1107, 1127, 1145], "contain": [10, 30, 31, 32, 33, 50, 71, 76, 97, 98, 101, 103, 109, 111, 122, 123, 130, 131, 136, 149, 158, 174, 177, 190, 203, 207, 243, 248, 278, 288, 290, 292, 313, 314, 413, 476, 477, 557, 559, 561, 563, 578, 579, 615, 617, 659, 694, 710, 720, 731, 734, 754, 774, 777, 804, 807, 811, 812, 859, 1004, 1011, 1023, 1072, 1074, 1076, 1078, 1093, 1094, 1121, 1145], "save_to_fil": 10, "json_str": 10, "written": [11, 29, 30, 33, 34, 35, 36, 37, 38, 50, 51, 52, 278, 763, 784, 804], "leav": [11, 199, 278, 465, 749, 804], "directli": [11, 28, 58, 78, 109, 137, 139, 143, 218, 278, 385, 386, 387, 670, 694, 716, 804, 914, 915, 916, 1145, 1153], "json_fil": 11, "ascii": [12, 20, 564, 565, 567, 573, 594, 1079, 1080, 1082, 1088, 1109], "charact": [12, 14, 20, 26, 30, 31, 50, 107, 108, 121, 278, 366, 558, 560, 564, 565, 567, 568, 569, 573, 574, 576, 577, 580, 581, 582, 583, 594, 754, 804, 807, 895, 1073, 1075, 1079, 1080, 1082, 1083, 1084, 1088, 1089, 1091, 1092, 1095, 1096, 1097, 1098, 1109], "displai": [12, 13, 14, 17, 19, 23, 25, 33, 172, 278], "tabl": [12, 16, 17, 19, 20, 21, 22, 23, 25, 26, 31, 32, 33, 57, 58, 59, 61, 96, 103, 107, 108, 111, 112, 121, 122, 123, 207, 234, 240, 247, 248, 278, 777, 804, 1127, 1145, 1152], "outlin": 12, "fals": [12, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 32, 33, 36, 38, 50, 51, 52, 56, 71, 77, 78, 97, 101, 103, 107, 108, 109, 112, 113, 115, 117, 118, 119, 121, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 145, 149, 150, 151, 152, 155, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 185, 186, 187, 189, 192, 193, 197, 202, 203, 205, 207, 208, 215, 216, 217, 218, 219, 223, 227, 229, 235, 237, 239, 240, 243, 244, 245, 249, 251, 253, 260, 261, 263, 265, 266, 268, 271, 278, 288, 289, 290, 292, 302, 308, 310, 313, 314, 329, 330, 331, 332, 333, 334, 335, 353, 369, 371, 377, 382, 383, 384, 385, 386, 387, 401, 402, 408, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 424, 426, 429, 430, 434, 440, 460, 464, 467, 472, 473, 475, 477, 481, 484, 486, 488, 498, 499, 500, 502, 505, 506, 511, 514, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 540, 545, 547, 548, 552, 554, 557, 562, 570, 571, 572, 576, 577, 579, 586, 587, 588, 608, 611, 614, 615, 616, 617, 618, 621, 624, 625, 630, 633, 638, 639, 640, 641, 642, 653, 654, 656, 667, 670, 676, 681, 682, 684, 685, 694, 710, 712, 713, 714, 715, 716, 722, 724, 730, 731, 732, 733, 734, 735, 739, 740, 742, 744, 745, 754, 759, 764, 767, 769, 774, 775, 780, 788, 789, 791, 793, 794, 796, 799, 804, 807, 811, 812, 813, 823, 829, 836, 839, 842, 845, 846, 854, 855, 856, 857, 858, 859, 878, 898, 900, 906, 912, 914, 915, 916, 923, 927, 934, 935, 936, 938, 940, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 957, 961, 962, 972, 992, 996, 999, 1011, 1017, 1020, 1021, 1023, 1025, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1050, 1055, 1060, 1062, 1067, 1069, 1072, 1077, 1085, 1086, 1087, 1091, 1092, 1094, 1101, 1102, 1103, 1126, 1127, 1130, 1133, 1135, 1136, 1145, 1152], "revert": 12, "utf8_full_condens": [12, 20, 103], "format": [12, 13, 16, 20, 30, 33, 34, 35, 50, 106, 107, 108, 109, 121, 127, 161, 172, 189, 199, 217, 218, 236, 276, 278, 370, 373, 376, 488, 586, 587, 588, 591, 643, 723, 729, 749, 763, 784, 804, 902, 905, 1101, 1102, 1103, 1106, 1144], "style": [12, 20, 33, 109, 119, 126, 207, 278], "abc": [12, 18, 19, 20, 21, 22, 23, 24, 25, 285, 560, 571, 694, 807, 1075, 1086], "xyz": [12, 18, 19, 20, 21, 22, 23, 24, 25, 285, 554, 560, 694, 1069, 1075, 1123, 1145], "f64": [12, 13, 16, 18, 19, 21, 22, 23, 24, 25, 53, 56, 71, 73, 75, 79, 97, 99, 127, 137, 151, 152, 154, 155, 156, 159, 163, 164, 168, 171, 172, 173, 174, 183, 184, 191, 192, 197, 198, 207, 208, 209, 228, 229, 230, 250, 253, 257, 261, 263, 265, 266, 267, 268, 270, 271, 278, 284, 287, 294, 295, 296, 297, 298, 299, 317, 320, 321, 325, 326, 327, 334, 335, 336, 339, 340, 371, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 397, 398, 401, 402, 407, 417, 419, 420, 421, 423, 424, 426, 440, 451, 468, 469, 470, 472, 478, 479, 480, 491, 494, 496, 497, 498, 499, 504, 508, 511, 512, 513, 514, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 543, 544, 545, 549, 550, 603, 604, 607, 612, 622, 623, 626, 627, 628, 630, 632, 644, 645, 659, 662, 663, 674, 675, 683, 690, 694, 713, 719, 725, 726, 730, 731, 738, 739, 740, 747, 748, 755, 769, 770, 778, 780, 782, 785, 789, 791, 793, 794, 795, 796, 798, 799, 804, 807, 815, 816, 817, 818, 819, 820, 843, 844, 851, 852, 853, 858, 859, 860, 863, 864, 900, 914, 915, 916, 921, 925, 930, 933, 972, 1019, 1023, 1025, 1034, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1058, 1059, 1063, 1119, 1120, 1132, 1145, 1153], "fmt": [13, 406, 648, 694, 737, 804], "floatfmt": 13, "mix": [13, 860, 1103, 1145], "control": [13, 33, 61, 78, 79, 135, 278, 716, 722, 804], "how": [13, 32, 33, 71, 79, 99, 102, 110, 126, 158, 191, 207, 247, 248, 278, 319, 337, 369, 370, 377, 407, 435, 436, 437, 503, 517, 530, 562, 586, 588, 640, 684, 694, 720, 739, 777, 804, 840, 861, 898, 899, 906, 967, 968, 969, 1040, 1077, 1101, 1103, 1145], "float": [13, 30, 33, 44, 45, 50, 112, 127, 130, 131, 132, 133, 134, 137, 139, 145, 155, 160, 163, 192, 209, 219, 226, 270, 278, 321, 335, 339, 340, 371, 382, 383, 384, 385, 386, 387, 392, 397, 401, 402, 407, 410, 414, 417, 419, 420, 421, 426, 434, 468, 472, 478, 491, 496, 497, 498, 499, 508, 511, 512, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 607, 626, 662, 663, 668, 670, 675, 683, 694, 725, 740, 755, 766, 767, 798, 804, 807, 836, 844, 859, 860, 862, 863, 864, 900, 912, 913, 914, 915, 916, 921, 925, 930, 941, 957, 966, 967, 968, 1000, 1007, 1008, 1014, 1015, 1022, 1023, 1024, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1060, 1064, 1115, 1126, 1134, 1145, 1153], "point": [13, 33, 44, 45, 137, 139, 163, 174, 177, 193, 278, 321, 335, 339, 371, 392, 397, 417, 419, 477, 534, 535, 694, 725, 731, 734, 744, 745, 757, 804, 844, 859, 863, 900, 921, 925, 941, 1023, 1044, 1045, 1126, 1145], "full": [13, 41, 71, 76, 79, 107, 108, 111, 121, 122, 123, 174, 175, 177, 178, 215, 278, 522, 586, 587, 588, 591, 694, 731, 732, 734, 735, 744, 745, 759, 804, 807, 1101, 1102, 1103, 1106, 1153], "number": [13, 14, 15, 17, 25, 30, 33, 38, 50, 52, 62, 71, 81, 90, 96, 98, 100, 102, 105, 107, 108, 110, 112, 116, 117, 118, 121, 125, 126, 128, 135, 137, 138, 140, 141, 149, 151, 160, 161, 163, 164, 172, 180, 189, 190, 193, 194, 202, 203, 219, 225, 226, 230, 232, 243, 247, 250, 260, 262, 272, 278, 303, 309, 315, 328, 334, 335, 337, 351, 354, 359, 361, 371, 378, 379, 381, 385, 386, 387, 391, 393, 399, 404, 417, 419, 427, 428, 437, 444, 448, 449, 458, 463, 465, 507, 511, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 538, 539, 541, 550, 564, 565, 566, 569, 571, 577, 578, 589, 600, 606, 612, 630, 631, 643, 651, 671, 672, 675, 679, 683, 694, 710, 713, 723, 724, 725, 726, 736, 743, 754, 765, 766, 770, 772, 774, 778, 788, 790, 800, 804, 835, 846, 858, 859, 861, 876, 879, 888, 890, 900, 907, 908, 910, 913, 914, 915, 916, 920, 922, 929, 941, 958, 959, 969, 976, 980, 981, 990, 995, 997, 1011, 1012, 1023, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1052, 1053, 1056, 1064, 1079, 1080, 1081, 1084, 1086, 1092, 1093, 1104, 1116, 1129, 1134, 1145, 1153], "limit": [13, 52, 109, 110, 121, 164, 278, 309, 322, 323, 324, 393, 399, 694, 726, 736, 804, 847, 848, 849, 922, 1145], "place": [13, 30, 50, 149, 157, 162, 182, 183, 207, 212, 218, 225, 226, 229, 243, 251, 278, 302, 446, 458, 538, 539, 547, 694, 710, 765, 766, 769, 774, 804, 813, 823, 919, 978, 990, 1026, 1052, 1053, 1062, 1145], "scientif": 13, "notat": [13, 33, 278], "larg": [13, 15, 32, 71, 109, 174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "small": [13, 110, 136, 193, 278, 370, 724, 804, 1153], "print": [13, 14, 17, 19, 20, 25, 108, 129, 159, 172, 173, 190, 193, 238, 256, 278, 406, 488, 694, 715, 737, 804, 942, 1124, 1145, 1153], "precis": [13, 30, 32, 33, 41, 42, 50, 109, 189, 217, 218, 236, 278, 342, 589, 804, 807, 867, 1104], "2304980958725870923": 13, "1e6": 13, "1e": [13, 130, 131, 132, 133], "230498": 13, "0000e": 13, "230498095872587": 13, "1000000": [13, 365, 594, 894], "00000001": [13, 614, 694], "plai": [14, 629], "sam": 14, "As": [14, 62, 80, 81, 96, 98, 99, 100, 102, 112, 116, 117, 125, 278, 804], "time": [14, 32, 41, 43, 56, 61, 76, 77, 78, 119, 121, 162, 174, 175, 177, 178, 192, 215, 249, 278, 315, 341, 342, 343, 344, 345, 349, 350, 366, 369, 370, 373, 375, 376, 377, 380, 433, 434, 465, 522, 525, 526, 527, 528, 529, 531, 532, 533, 541, 586, 588, 591, 605, 606, 628, 629, 638, 639, 640, 641, 642, 643, 649, 681, 682, 694, 715, 716, 731, 732, 734, 735, 740, 754, 759, 804, 807, 813, 835, 866, 867, 868, 869, 874, 875, 895, 898, 899, 902, 904, 905, 906, 909, 919, 965, 967, 968, 1056, 1101, 1103, 1106, 1128, 1129, 1145, 1153], "goe": 14, "By": [14, 15, 28, 71, 107, 108, 121, 174, 192, 215, 230, 249, 250, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 550, 612, 630, 638, 639, 641, 642, 643, 656, 675, 681, 682, 683, 694, 715, 731, 740, 759, 770, 778, 804, 895, 899, 906, 1064, 1126, 1134, 1145], "begin": [14, 33, 278, 385, 386, 387, 559, 694, 914, 915, 916, 1074, 1145], "beauti": 14, "friendship": 14, "len_byt": [14, 565, 566, 1080, 1081], "len": [14, 33, 135, 137, 190, 278, 329, 449, 477, 567, 573, 594, 694, 981, 1082, 1088, 1109, 1145], "u32": [14, 56, 109, 147, 150, 204, 255, 260, 269, 271, 278, 286, 293, 300, 301, 302, 303, 304, 328, 329, 347, 351, 355, 359, 361, 367, 368, 371, 378, 379, 427, 431, 432, 436, 448, 476, 495, 501, 514, 521, 525, 526, 528, 531, 532, 533, 536, 554, 564, 565, 605, 609, 615, 620, 624, 625, 631, 666, 694, 708, 712, 752, 783, 788, 797, 799, 804, 823, 824, 825, 836, 841, 872, 876, 883, 885, 888, 890, 893, 896, 897, 900, 907, 908, 930, 980, 1025, 1032, 1069, 1079, 1080, 1128, 1131, 1133, 1145], "37": 14, "beaut": 14, "48": [14, 215, 278, 522, 694, 759, 804], "fmt_str_length": 14, "50": [14, 33, 155, 162, 172, 278, 322, 323, 324, 370, 377, 694, 847, 860, 906, 1145], "overwrit": [15, 31, 32, 96, 98, 99, 100, 102, 107, 108, 116, 117, 121, 125, 145, 278, 287, 694, 724, 804], "chunk": [15, 52, 105, 107, 108, 119, 121, 124, 125, 126, 137, 139, 162, 190, 202, 278, 291, 515, 694, 804, 813, 845, 919, 926, 1011, 1026, 1121, 1145], "stream": [15, 34, 35, 50, 51, 52, 77, 78, 115, 149, 173, 176, 191, 243, 245, 278, 710, 715, 716, 722, 724, 730, 733, 739, 744, 745, 749, 754, 767, 769, 774, 775, 804], "engin": [15, 31, 109, 110, 112, 141, 173, 176, 191, 195, 245, 264, 278, 730, 733, 739, 744, 745, 749, 775, 792, 804, 1005, 1145], "determin": [15, 30, 33, 50, 69, 71, 79, 99, 102, 107, 108, 109, 112, 118, 119, 121, 126, 128, 146, 156, 168, 174, 177, 189, 190, 195, 207, 215, 244, 249, 278, 319, 353, 369, 370, 377, 465, 476, 485, 511, 517, 525, 526, 527, 528, 529, 531, 532, 533, 545, 562, 586, 588, 589, 640, 667, 670, 685, 694, 731, 734, 759, 804, 840, 878, 898, 899, 906, 930, 997, 1004, 1023, 1060, 1077, 1101, 1103, 1104, 1145], "schema": [15, 32, 56, 72, 73, 74, 79, 91, 92, 94, 96, 98, 99, 100, 102, 107, 108, 109, 110, 114, 116, 117, 120, 121, 125, 126, 135, 137, 146, 151, 152, 159, 160, 190, 195, 200, 203, 239, 278, 305, 306, 307, 465, 485, 562, 614, 676, 694, 713, 714, 721, 744, 745, 750, 763, 787, 792, 804, 807, 828, 850, 1077, 1145], "thread": [15, 30, 50, 78, 105, 107, 108, 110, 141, 278, 292, 440, 477, 694, 716, 804, 972], "pool": [15, 78, 141, 716, 804], "For": [15, 32, 33, 110, 111, 112, 122, 123, 158, 162, 191, 192, 215, 264, 278, 385, 386, 387, 465, 477, 486, 516, 545, 552, 559, 560, 561, 571, 633, 643, 647, 648, 690, 694, 720, 740, 759, 792, 804, 813, 914, 915, 916, 919, 1027, 1060, 1067, 1074, 1075, 1076, 1086, 1126, 1145], "some": [15, 28, 32, 33, 62, 81, 99, 107, 108, 109, 112, 121, 145, 158, 278, 690, 720, 804, 942, 1145, 1153], "dataset": [15, 38, 107, 108, 119, 121, 126, 127, 191, 278, 424, 694, 705, 739, 744, 745, 804, 957, 1145], "esp": 15, "when": [15, 17, 19, 23, 30, 33, 38, 41, 50, 52, 61, 62, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 108, 109, 112, 113, 115, 118, 119, 121, 122, 124, 125, 127, 130, 131, 132, 137, 139, 146, 149, 159, 160, 162, 164, 168, 174, 175, 177, 178, 191, 195, 206, 215, 216, 218, 221, 222, 229, 237, 239, 243, 245, 254, 278, 322, 323, 324, 385, 386, 387, 393, 465, 476, 486, 507, 521, 522, 547, 548, 564, 565, 581, 582, 583, 586, 624, 633, 647, 694, 710, 726, 731, 732, 734, 735, 739, 744, 745, 759, 761, 762, 769, 774, 775, 781, 804, 813, 847, 848, 849, 906, 913, 914, 915, 916, 919, 922, 1004, 1032, 1048, 1049, 1079, 1080, 1096, 1097, 1098, 1101, 1122, 1145], "have": [15, 28, 32, 33, 41, 62, 71, 81, 97, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 126, 137, 139, 162, 189, 210, 215, 217, 218, 236, 278, 334, 385, 386, 387, 477, 486, 514, 522, 561, 694, 718, 749, 756, 759, 767, 783, 804, 807, 813, 858, 914, 915, 916, 919, 927, 1025, 1103, 1145, 1153], "element": [15, 25, 136, 139, 149, 188, 207, 216, 230, 243, 250, 278, 292, 294, 295, 296, 297, 298, 299, 315, 320, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 340, 389, 390, 394, 403, 413, 427, 435, 436, 438, 439, 440, 441, 445, 448, 449, 454, 455, 456, 457, 462, 466, 469, 470, 477, 503, 504, 514, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 542, 543, 544, 549, 550, 577, 578, 589, 603, 604, 606, 612, 630, 671, 672, 675, 683, 694, 710, 769, 770, 774, 778, 804, 814, 815, 816, 817, 818, 819, 820, 835, 843, 846, 851, 852, 853, 854, 855, 856, 857, 858, 863, 864, 917, 918, 923, 929, 942, 956, 958, 959, 967, 968, 970, 971, 972, 973, 977, 980, 981, 986, 987, 988, 989, 994, 998, 1001, 1002, 1005, 1019, 1025, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1057, 1058, 1059, 1063, 1064, 1092, 1093, 1104, 1116, 1119, 1120, 1124, 1129, 1130, 1134, 1145], "too": [15, 174, 192, 215, 249, 278, 366, 370, 377, 521, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 724, 731, 740, 759, 804, 895, 899, 906], "optimist": 15, "lead": [15, 38, 103, 127, 174, 175, 177, 178, 215, 278, 475, 477, 522, 537, 568, 580, 581, 583, 594, 601, 630, 694, 731, 732, 734, 735, 744, 745, 759, 787, 792, 804, 1005, 1050, 1083, 1095, 1096, 1098, 1109, 1145], "out": [15, 50, 51, 52, 103, 129, 215, 218, 278, 311, 443, 464, 552, 555, 684, 759, 804, 831, 975, 996, 1067, 1070], "memori": [15, 52, 79, 96, 97, 100, 101, 102, 107, 108, 109, 112, 113, 119, 121, 124, 125, 126, 145, 162, 195, 218, 227, 264, 278, 503, 515, 540, 694, 715, 804, 813, 919, 1005, 1026, 1054, 1055, 1145], "error": [15, 32, 78, 107, 108, 121, 150, 174, 192, 207, 215, 216, 249, 278, 287, 311, 317, 366, 370, 377, 423, 446, 464, 522, 525, 526, 527, 528, 529, 531, 532, 533, 552, 555, 559, 561, 562, 563, 586, 587, 588, 591, 638, 639, 641, 642, 681, 682, 694, 712, 716, 731, 740, 759, 787, 792, 804, 831, 836, 895, 899, 906, 978, 996, 1067, 1070, 1074, 1076, 1077, 1078, 1101, 1102, 1103, 1106, 1145], "row": [15, 20, 25, 30, 33, 36, 38, 50, 52, 71, 72, 74, 79, 88, 90, 95, 99, 100, 102, 103, 107, 108, 109, 112, 113, 115, 119, 121, 124, 125, 126, 127, 130, 131, 135, 137, 146, 149, 151, 158, 162, 165, 168, 172, 173, 174, 176, 179, 180, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 203, 218, 219, 228, 232, 233, 236, 238, 243, 245, 247, 248, 255, 262, 264, 272, 278, 303, 390, 404, 428, 441, 465, 503, 504, 518, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 548, 558, 562, 600, 621, 624, 633, 634, 647, 651, 653, 654, 669, 671, 672, 679, 684, 694, 710, 713, 715, 720, 724, 727, 728, 731, 736, 739, 740, 741, 743, 745, 749, 768, 772, 773, 774, 775, 777, 783, 790, 792, 800, 804, 813, 918, 919, 929, 973, 1019, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1061, 1073, 1077, 1116, 1145, 1153], "per": [15, 30, 33, 50, 135, 137, 149, 172, 203, 204, 222, 229, 243, 254, 267, 269, 270, 278, 292, 316, 440, 443, 464, 477, 548, 611, 624, 694, 710, 762, 769, 774, 781, 795, 797, 798, 804, 972, 975, 996, 1133, 1145], "everi": [15, 30, 50, 107, 108, 121, 174, 177, 233, 236, 249, 278, 329, 330, 331, 332, 333, 334, 370, 377, 390, 431, 432, 437, 441, 443, 444, 454, 459, 463, 558, 602, 633, 634, 694, 724, 731, 734, 773, 804, 854, 855, 856, 857, 858, 899, 906, 918, 927, 963, 964, 969, 973, 975, 976, 986, 991, 995, 1073, 1118, 1145], "process": [15, 30, 50, 51, 52, 107, 108, 109, 121, 141, 278, 715, 804], "liter": [16, 20, 32, 56, 78, 109, 112, 118, 137, 138, 139, 140, 172, 189, 196, 197, 201, 202, 205, 216, 217, 221, 222, 231, 235, 248, 253, 254, 278, 287, 310, 343, 383, 384, 391, 398, 401, 402, 408, 426, 472, 476, 492, 494, 498, 499, 508, 552, 554, 571, 572, 597, 607, 616, 618, 621, 625, 627, 628, 629, 636, 637, 638, 639, 640, 641, 642, 653, 654, 656, 661, 665, 667, 670, 673, 676, 678, 680, 681, 682, 685, 694, 716, 726, 761, 762, 777, 780, 781, 804, 807, 811, 812, 830, 859, 868, 920, 934, 1023, 1048, 1049, 1067, 1069, 1086, 1087, 1145, 1152], "left": [16, 33, 58, 71, 130, 131, 132, 133, 174, 175, 177, 178, 191, 192, 215, 248, 278, 335, 385, 386, 387, 407, 408, 511, 522, 525, 526, 527, 528, 529, 531, 532, 533, 536, 567, 594, 605, 627, 633, 634, 638, 639, 641, 642, 647, 669, 681, 682, 684, 694, 731, 732, 734, 735, 739, 740, 759, 777, 804, 859, 914, 915, 916, 934, 1023, 1046, 1082, 1109, 1128, 1145], "center": [16, 33, 278, 385, 386, 387, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 694, 914, 915, 916, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1145], "right": [16, 18, 33, 107, 108, 130, 131, 132, 133, 174, 175, 177, 178, 191, 192, 215, 248, 278, 335, 385, 386, 387, 408, 454, 455, 456, 457, 511, 522, 525, 526, 527, 528, 529, 531, 532, 533, 536, 545, 573, 627, 638, 639, 641, 642, 681, 682, 694, 731, 732, 734, 735, 739, 740, 759, 777, 804, 859, 914, 915, 916, 934, 986, 987, 988, 989, 1023, 1046, 1060, 1088, 1145], "cell": [16, 33, 278], "align": [16, 33, 71, 79, 278, 594, 1109], "valueerror": [16, 20], "recognis": [16, 20, 134], "column_abc": 16, "column_xyz": 16, "visibl": [17, 160, 278, 913, 1145], "eg": [17, 25, 33, 79, 110, 143, 278, 370, 586, 588, 607, 694, 927, 1101, 1103, 1145], "low": [17, 109, 141, 511, 694, 1023, 1145], "rang": [17, 33, 109, 110, 155, 160, 174, 190, 278, 336, 347, 361, 367, 368, 370, 377, 378, 407, 621, 628, 637, 638, 639, 640, 641, 642, 653, 654, 680, 681, 682, 694, 731, 804, 860, 872, 890, 896, 897, 899, 906, 907, 913, 1019, 1145], "100": [17, 33, 99, 102, 107, 108, 121, 125, 278, 562, 589, 594, 804, 1035, 1036, 1038, 1077, 1104, 1145, 1153], "98": [17, 183, 278, 315, 547, 589, 601, 606, 694, 1104], "99": [17, 33, 163, 164, 183, 186, 248, 278, 286, 315, 391, 393, 547, 601, 606, 694, 725, 726, 777, 804, 912, 920, 1145], "tbl_col": 17, "10": [17, 29, 30, 32, 33, 34, 35, 38, 52, 56, 71, 79, 103, 110, 121, 129, 137, 139, 152, 162, 171, 172, 174, 180, 182, 183, 184, 202, 206, 207, 208, 212, 213, 215, 221, 232, 253, 257, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 278, 287, 291, 300, 301, 302, 304, 322, 328, 330, 333, 337, 341, 343, 349, 362, 363, 369, 370, 377, 380, 403, 404, 407, 413, 423, 427, 428, 437, 438, 444, 445, 458, 459, 462, 463, 466, 469, 485, 487, 504, 507, 522, 546, 594, 600, 614, 627, 633, 638, 641, 644, 647, 649, 651, 656, 658, 679, 682, 694, 715, 716, 731, 736, 738, 743, 753, 754, 759, 761, 771, 772, 780, 785, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 804, 807, 847, 861, 866, 868, 874, 898, 906, 909, 912, 929, 942, 959, 969, 970, 976, 977, 990, 991, 994, 995, 998, 1001, 1005, 1019, 1048, 1049, 1116, 1145, 1153], "95": [17, 286, 694], "96": [17, 286, 694], "97": [17, 183, 278, 286, 694], "move": [18, 218, 278, 385, 386, 387, 525, 526, 528, 532, 694, 914, 915, 916, 1035, 1036, 1038, 1042, 1145], "inlin": [18, 218, 278, 552, 559, 560, 571, 1067, 1074, 1075, 1086], "parenthes": 18, "inform": [19, 23, 32, 76, 111, 122, 123, 126, 154, 278, 322, 323, 324, 424, 545, 552, 559, 560, 571, 694, 754, 804, 841, 847, 848, 849, 957, 1060, 1067, 1074, 1075, 1086, 1145], "below": [19, 32, 111, 122, 123, 158, 174, 207, 278, 393, 638, 639, 641, 642, 681, 682, 684, 690, 694, 720, 731, 804], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_no_bord": 20, "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_horizontal_onli": 20, "ascii_markdown": 20, "utf8_ful": [20, 71, 103], "utf8_no_bord": 20, "utf8_borders_onli": 20, "utf8_horizontal_onli": 20, "noth": [20, 316, 559, 563, 694, 1074, 1078], "rounded_corn": 20, "border": 20, "line": [20, 33, 107, 108, 112, 121, 172, 185, 187, 278, 559, 1074], "includ": [20, 28, 30, 32, 33, 50, 76, 109, 111, 122, 123, 137, 149, 155, 160, 205, 218, 243, 244, 247, 278, 335, 371, 408, 511, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 576, 577, 581, 582, 633, 671, 672, 694, 710, 774, 804, 807, 859, 860, 900, 913, 934, 1023, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1091, 1092, 1096, 1135, 1145], "divid": [20, 335, 370, 377, 385, 386, 387, 424, 511, 694, 859, 899, 906, 914, 915, 916, 957, 1023, 1145], "same": [20, 32, 33, 60, 62, 71, 77, 78, 79, 80, 81, 113, 121, 130, 131, 132, 133, 135, 143, 173, 195, 207, 218, 229, 245, 253, 254, 257, 264, 278, 284, 291, 339, 340, 481, 484, 503, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 548, 564, 596, 601, 694, 715, 716, 730, 744, 745, 769, 775, 780, 781, 785, 804, 809, 813, 814, 859, 863, 864, 868, 1005, 1023, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1079, 1136, 1145], "dens": [20, 172, 278, 514, 694, 1025, 1145], "space": [20, 174, 278, 731, 804], "horizont": [20, 79, 168, 182, 247, 278, 616, 618, 628, 629, 633, 634, 636, 644, 647, 661, 665, 669, 678], "markdown": 20, "compat": [20, 33, 38, 52, 278, 552, 553, 554, 559, 560, 561, 571, 572, 804, 807, 1067, 1068, 1069, 1074, 1075, 1076, 1086, 1087], "No": [20, 592, 1107], "appli": [20, 30, 33, 50, 56, 79, 121, 134, 137, 139, 168, 195, 206, 264, 278, 345, 346, 347, 351, 353, 354, 355, 357, 359, 361, 364, 367, 368, 371, 374, 378, 379, 381, 386, 387, 473, 475, 477, 507, 523, 525, 526, 528, 532, 571, 586, 587, 588, 591, 633, 634, 647, 657, 658, 659, 669, 684, 694, 736, 743, 744, 745, 753, 792, 804, 870, 871, 872, 876, 878, 879, 883, 885, 888, 890, 893, 896, 897, 900, 903, 907, 908, 910, 915, 916, 1005, 1033, 1035, 1036, 1038, 1042, 1086, 1101, 1102, 1103, 1106, 1145], "round": [20, 33, 73, 103, 109, 278, 321, 327, 397, 603, 694, 844, 925, 1145], "corner": [20, 33, 103, 278], "op": [20, 139, 278, 517, 694, 804, 1103, 1145], "one": [20, 30, 31, 33, 50, 61, 71, 88, 96, 98, 99, 100, 101, 102, 107, 108, 112, 116, 117, 118, 121, 138, 139, 140, 143, 164, 165, 172, 173, 174, 175, 177, 178, 189, 199, 207, 215, 216, 217, 223, 239, 242, 258, 278, 286, 335, 393, 465, 470, 522, 547, 560, 601, 659, 674, 684, 690, 694, 726, 727, 730, 731, 732, 734, 735, 749, 759, 764, 782, 786, 804, 813, 859, 922, 953, 997, 1002, 1023, 1075, 1110, 1145], "more": [20, 33, 36, 38, 52, 61, 71, 79, 80, 81, 95, 96, 97, 98, 99, 100, 101, 102, 109, 110, 111, 112, 116, 117, 118, 119, 122, 123, 137, 139, 143, 154, 155, 189, 193, 195, 199, 203, 216, 217, 219, 239, 245, 264, 278, 289, 292, 308, 322, 323, 324, 424, 467, 470, 475, 477, 502, 535, 545, 560, 564, 586, 587, 588, 608, 674, 684, 694, 749, 775, 804, 807, 814, 829, 841, 847, 848, 849, 860, 953, 957, 999, 1005, 1045, 1060, 1075, 1079, 1101, 1102, 1103, 1130, 1145, 1153], "semigraph": 20, "box": [20, 195, 278], "draw": [20, 25, 136, 1153], "found": [20, 30, 33, 50, 58, 83, 92, 94, 99, 103, 159, 278, 536, 563, 584, 585, 586, 588, 694, 804, 1046, 1078, 1099, 1100, 1101, 1103, 1145, 1152], "unicod": 20, "block": [20, 78, 173, 176, 245, 278, 684, 716, 730, 733, 757, 775, 783, 792, 804, 1048, 1049, 1145], "http": [20, 33, 34, 35, 97, 109, 110, 145, 154, 278, 559, 561, 1074, 1076], "en": [20, 33, 278], "wikipedia": 20, "org": [20, 34, 35, 97, 109, 110, 145, 154, 278], "wiki": 20, "drawing_charact": 20, "box_draw": 20, "mno": 20, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "hide": [21, 22, 23, 24, 33, 278], "etc": [21, 32, 33, 107, 111, 113, 115, 119, 122, 123, 124, 278, 807, 1048, 1049, 1145], "separ": [24, 30, 50, 105, 107, 108, 121, 205, 207, 237, 244, 246, 278, 292, 441, 446, 477, 558, 629, 633, 634, 694, 776, 804, 973, 978, 1073, 1114, 1122, 1145], "between": [24, 79, 134, 135, 137, 139, 154, 209, 270, 278, 317, 338, 408, 438, 445, 446, 454, 455, 456, 457, 462, 466, 504, 511, 512, 529, 551, 622, 623, 630, 632, 668, 671, 672, 694, 755, 798, 804, 836, 841, 862, 934, 970, 977, 978, 986, 987, 988, 989, 994, 998, 1019, 1023, 1024, 1039, 1066, 1145], "set_tbl_column_data_type_inlin": 24, "max": [25, 33, 38, 52, 56, 141, 155, 164, 173, 207, 215, 278, 322, 323, 330, 393, 465, 503, 514, 522, 525, 537, 578, 661, 674, 694, 726, 730, 759, 804, 847, 848, 854, 860, 922, 997, 1025, 1035, 1050, 1093, 1145], "both": [25, 30, 50, 62, 80, 81, 112, 174, 175, 177, 178, 191, 192, 200, 215, 216, 248, 278, 291, 335, 388, 408, 511, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 690, 694, 704, 731, 732, 734, 735, 739, 740, 750, 759, 777, 804, 934, 944, 1145], "tbl_row": 25, "maximum": [26, 30, 50, 107, 108, 121, 127, 135, 136, 137, 139, 172, 174, 196, 278, 431, 478, 496, 505, 514, 660, 661, 694, 731, 746, 804, 847, 880, 963, 1006, 1014, 1020, 1025, 1145], "enabl": [27, 62, 80, 81, 130, 131, 132, 133, 142, 221, 253, 278, 288, 290, 537, 611, 690, 694, 715, 761, 780, 804, 811, 812, 1050, 1133, 1145], "addit": [27, 32, 33, 99, 111, 112, 122, 123, 135, 156, 158, 161, 173, 176, 205, 221, 222, 223, 229, 246, 253, 254, 257, 278, 285, 349, 388, 391, 503, 548, 552, 559, 560, 571, 624, 627, 628, 629, 645, 673, 676, 694, 719, 723, 730, 733, 761, 762, 764, 769, 776, 780, 781, 785, 804, 866, 874, 920, 1067, 1074, 1075, 1086, 1145], "verbos": [27, 143, 560, 1075], "debug": [27, 715, 724, 744, 745, 804, 1153], "log": [27, 73, 315, 382, 470, 494, 508, 606, 694, 835, 912, 1129, 1145], "do_polars_oper": 27, "if_set": 28, "env_onli": 28, "dict": [28, 32, 33, 38, 59, 72, 74, 76, 96, 98, 99, 100, 101, 102, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 137, 167, 189, 205, 211, 216, 217, 218, 220, 235, 236, 244, 278, 476, 521, 694, 757, 760, 804, 1004, 1145], "show": [28, 33, 60, 158, 172, 193, 204, 278, 720, 754, 767, 804], "variabl": [28, 53, 58, 126, 138, 141, 199, 237, 278, 749, 804, 1122, 1145, 1152], "chang": [28, 71, 78, 107, 108, 109, 127, 247, 248, 249, 278, 292, 334, 335, 337, 370, 477, 504, 511, 525, 526, 527, 528, 529, 531, 532, 533, 694, 716, 804, 813, 841, 842, 858, 859, 899, 930, 1019, 1023, 1055, 1145], "restrict": [28, 578, 1093], "dictionari": [28, 33, 96, 98, 99, 100, 102, 107, 108, 109, 110, 114, 116, 117, 120, 121, 125, 189, 205, 216, 217, 218, 235, 236, 278, 476, 694, 804, 1004, 1145], "those": [28, 33, 107, 112, 218, 248, 278, 514, 559, 659, 694, 777, 804, 807, 1025, 1074, 1145], "been": [28, 33, 145, 146, 148, 175, 176, 177, 178, 259, 278, 292, 316, 411, 415, 418, 435, 438, 445, 449, 462, 466, 473, 477, 514, 523, 525, 526, 527, 528, 529, 531, 532, 533, 553, 566, 568, 569, 574, 580, 619, 657, 694, 709, 732, 733, 734, 735, 744, 756, 784, 787, 804, 814, 939, 945, 967, 970, 977, 981, 994, 998, 1025, 1033, 1068, 1081, 1083, 1084, 1089, 1095, 1145], "set_fmt_float": 28, "via": [28, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 125, 126, 189, 217, 278, 292, 477, 561, 694, 718, 756, 804, 1076], "set_stat": 28, "all_stat": 28, "binaryio": [29, 34, 35, 106, 107, 112, 113, 114, 115, 118, 119, 120, 278], "bytesio": [29, 30, 33, 34, 35, 38, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 278, 718, 756, 804], "compress": [29, 34, 35, 38, 51, 52, 278, 804], "avrocompress": [29, 278], "uncompress": [29, 34, 35, 38, 52, 113, 124, 278, 804], "write": [29, 30, 31, 32, 33, 34, 35, 36, 38, 50, 51, 52, 108, 113, 143, 278, 322, 323, 324, 490, 694, 742, 767, 804, 847, 848, 849, 1145], "apach": [29, 34, 35, 38, 106, 109, 110, 123, 278, 705], "avro": [29, 106, 278, 705], "should": [29, 30, 31, 33, 34, 35, 36, 37, 38, 50, 51, 52, 79, 96, 98, 100, 102, 111, 116, 117, 119, 121, 125, 126, 134, 135, 139, 149, 156, 174, 189, 192, 195, 215, 216, 217, 218, 236, 237, 243, 246, 249, 264, 278, 286, 319, 334, 366, 370, 377, 380, 388, 417, 419, 440, 477, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 536, 545, 611, 638, 639, 641, 642, 643, 645, 652, 656, 659, 671, 672, 681, 682, 684, 694, 710, 719, 724, 731, 739, 740, 745, 759, 763, 767, 769, 774, 776, 784, 804, 807, 840, 858, 895, 899, 906, 909, 972, 1005, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1046, 1060, 1133, 1145], "snappi": [29, 38, 52, 278, 804], "deflat": [29, 278], "import": [29, 30, 32, 33, 34, 35, 38, 41, 71, 96, 97, 100, 101, 121, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 150, 155, 156, 158, 172, 174, 190, 192, 199, 205, 207, 237, 239, 240, 247, 249, 278, 336, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 524, 525, 526, 528, 531, 532, 533, 622, 623, 638, 639, 641, 643, 681, 682, 690, 694, 705, 712, 716, 718, 719, 720, 731, 740, 745, 749, 763, 804, 851, 853, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 938, 943, 947, 948, 953, 1034, 1058, 1119, 1145, 1153], "pathlib": [29, 30, 34, 35, 38, 121, 278], "foo": [29, 30, 32, 34, 35, 36, 37, 38, 60, 150, 153, 154, 156, 157, 158, 159, 162, 165, 166, 168, 169, 170, 171, 179, 180, 181, 182, 183, 184, 186, 191, 195, 196, 197, 198, 201, 204, 207, 209, 211, 212, 213, 216, 219, 220, 221, 224, 225, 226, 228, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 244, 245, 246, 250, 251, 252, 256, 278, 318, 322, 323, 324, 335, 366, 404, 406, 428, 434, 442, 443, 447, 481, 484, 485, 486, 487, 488, 489, 511, 518, 538, 539, 551, 554, 556, 558, 560, 561, 576, 578, 581, 582, 583, 584, 585, 590, 593, 600, 602, 620, 626, 630, 631, 632, 646, 650, 651, 655, 660, 662, 663, 664, 666, 668, 673, 675, 679, 683, 684, 690, 694, 712, 717, 719, 720, 721, 727, 737, 738, 739, 752, 757, 760, 761, 775, 776, 779, 782, 804, 807, 838, 847, 859, 895, 978, 1023, 1029, 1069, 1071, 1073, 1075, 1076, 1093, 1099, 1100, 1105, 1108, 1145], "bar": [29, 30, 32, 34, 35, 36, 37, 38, 60, 150, 153, 154, 156, 157, 158, 159, 162, 165, 166, 168, 169, 170, 171, 180, 182, 183, 184, 186, 191, 195, 196, 197, 198, 201, 204, 207, 209, 211, 212, 213, 216, 219, 220, 221, 225, 226, 228, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 245, 246, 250, 251, 256, 278, 318, 406, 481, 482, 483, 484, 485, 486, 487, 488, 489, 545, 554, 556, 558, 560, 561, 576, 578, 584, 585, 620, 626, 630, 631, 632, 646, 651, 655, 660, 662, 663, 664, 666, 673, 675, 679, 683, 684, 690, 694, 712, 717, 719, 720, 721, 727, 737, 738, 739, 752, 757, 760, 761, 775, 776, 779, 804, 807, 838, 978, 1060, 1069, 1071, 1073, 1075, 1076, 1093, 1099, 1100, 1145], "ham": [29, 30, 32, 34, 35, 38, 150, 153, 154, 156, 157, 158, 159, 165, 166, 169, 179, 180, 182, 191, 196, 197, 198, 201, 204, 209, 211, 213, 216, 219, 220, 221, 225, 226, 228, 230, 231, 232, 237, 238, 239, 240, 241, 245, 250, 251, 278, 318, 488, 712, 717, 719, 720, 721, 727, 739, 752, 757, 760, 761, 775, 782, 804, 838], "d": [29, 30, 32, 33, 34, 35, 38, 99, 127, 155, 172, 174, 179, 180, 183, 191, 232, 234, 247, 251, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 278, 285, 287, 350, 373, 376, 408, 507, 540, 554, 560, 577, 586, 587, 588, 627, 643, 649, 694, 731, 739, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 804, 841, 875, 902, 905, 934, 1069, 1075, 1092, 1101, 1102, 1103, 1145], "e": [29, 30, 32, 34, 35, 38, 50, 97, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 155, 172, 174, 180, 192, 215, 232, 234, 239, 247, 249, 278, 285, 292, 366, 370, 377, 382, 388, 408, 468, 476, 477, 482, 483, 485, 486, 487, 488, 489, 522, 525, 526, 527, 528, 529, 531, 532, 533, 540, 545, 638, 639, 641, 642, 645, 659, 681, 682, 684, 694, 718, 731, 740, 742, 756, 757, 759, 804, 807, 895, 899, 906, 912, 934, 1047, 1060, 1126, 1145, 1153], "dirpath": [29, 30, 34, 35, 38, 121, 278], "new_fil": [29, 30, 34, 35, 38, 278], "has_head": [30, 33, 50, 107, 108, 112, 121, 278, 804], "line_termin": [30, 50, 278, 804], "quote_char": [30, 50, 107, 108, 121, 278, 804], "batch_siz": [30, 50, 107, 108, 109, 125, 127, 278, 804], "1024": [30, 50, 52, 107, 108, 109, 125, 278, 804], "datetime_format": [30, 50, 278, 804], "date_format": [30, 50, 278, 804], "time_format": [30, 50, 278, 804], "float_precis": [30, 33, 50, 278, 804], "null_valu": [30, 50, 107, 108, 121, 278, 804], "quote_styl": [30, 50, 278, 804], "csvquotestyl": [30, 50, 278, 804], "textiowrapp": [30, 278], "comma": [30, 278], "csv": [30, 50, 51, 52, 107, 108, 112, 121, 278, 705, 804], "result": [30, 36, 37, 50, 51, 52, 71, 79, 100, 102, 109, 110, 111, 112, 121, 124, 126, 127, 139, 162, 174, 177, 191, 203, 207, 215, 218, 226, 240, 249, 257, 278, 373, 376, 385, 386, 387, 391, 424, 465, 475, 477, 503, 511, 518, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 537, 539, 576, 577, 588, 607, 633, 634, 638, 639, 640, 641, 642, 643, 658, 667, 670, 671, 672, 685, 694, 711, 731, 732, 734, 735, 739, 744, 745, 754, 759, 763, 766, 784, 785, 804, 813, 859, 902, 905, 914, 915, 916, 919, 957, 1005, 1023, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1050, 1053, 1091, 1092, 1103, 1126, 1145, 1152, 1153], "If": [30, 31, 32, 33, 34, 35, 36, 37, 38, 50, 52, 56, 62, 76, 78, 79, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 130, 131, 132, 138, 145, 146, 149, 158, 162, 172, 174, 175, 177, 178, 180, 188, 189, 192, 194, 195, 203, 207, 215, 217, 218, 219, 228, 232, 236, 237, 239, 243, 244, 245, 247, 248, 278, 288, 290, 292, 322, 323, 324, 343, 362, 363, 377, 394, 424, 459, 465, 475, 476, 477, 488, 503, 511, 514, 516, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 541, 545, 546, 560, 561, 562, 568, 574, 575, 576, 577, 578, 580, 581, 582, 583, 586, 587, 588, 591, 611, 615, 617, 619, 621, 625, 630, 631, 633, 638, 639, 641, 642, 643, 647, 653, 654, 656, 659, 667, 670, 671, 672, 676, 681, 682, 684, 685, 694, 710, 715, 716, 720, 722, 731, 732, 734, 735, 739, 740, 745, 749, 757, 759, 763, 768, 774, 775, 784, 787, 792, 804, 807, 811, 812, 813, 814, 847, 848, 849, 859, 868, 891, 892, 906, 919, 927, 929, 930, 956, 957, 959, 991, 997, 1005, 1023, 1025, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1050, 1056, 1060, 1061, 1075, 1076, 1077, 1083, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1101, 1102, 1103, 1106, 1116, 1121, 1126, 1133, 1135, 1145, 1152], "instead": [30, 36, 37, 56, 60, 71, 78, 79, 107, 108, 109, 112, 118, 119, 121, 126, 137, 172, 174, 189, 192, 195, 203, 205, 215, 216, 217, 218, 221, 222, 240, 249, 253, 254, 278, 302, 335, 366, 369, 370, 377, 388, 475, 511, 522, 525, 526, 527, 528, 529, 531, 532, 533, 564, 565, 568, 574, 580, 581, 582, 583, 586, 588, 621, 625, 626, 638, 639, 640, 641, 642, 643, 653, 654, 667, 670, 676, 681, 682, 685, 694, 716, 725, 731, 740, 759, 761, 762, 763, 777, 780, 781, 784, 804, 807, 823, 859, 895, 898, 899, 906, 1023, 1048, 1049, 1079, 1080, 1083, 1089, 1095, 1096, 1097, 1098, 1101, 1103, 1127, 1145, 1152], "whether": [30, 50, 100, 102, 139, 142, 149, 223, 243, 278, 288, 290, 353, 371, 429, 430, 482, 483, 537, 694, 710, 744, 745, 764, 769, 774, 804, 807, 811, 812, 839, 842, 878, 900, 961, 962, 1145, 1152], "header": [30, 33, 38, 50, 52, 103, 107, 108, 112, 121, 159, 207, 244, 278, 804], "field": [30, 32, 50, 63, 92, 94, 99, 239, 246, 278, 465, 476, 520, 560, 561, 562, 577, 578, 596, 633, 634, 658, 676, 694, 776, 804, 859, 997, 1023, 1031, 1076, 1090, 1092, 1093, 1112, 1114, 1145], "symbol": [30, 50, 278, 804], "end": [30, 33, 50, 107, 108, 119, 121, 174, 278, 310, 313, 314, 341, 370, 388, 408, 459, 552, 557, 560, 575, 579, 621, 638, 639, 641, 642, 645, 653, 654, 681, 682, 684, 694, 731, 736, 743, 754, 804, 807, 833, 866, 899, 934, 991, 1072, 1075, 1090, 1094, 1145], "each": [30, 33, 50, 71, 108, 109, 125, 130, 131, 132, 133, 135, 172, 173, 174, 175, 176, 177, 178, 190, 192, 195, 205, 215, 219, 240, 246, 248, 249, 256, 257, 260, 262, 264, 272, 278, 335, 370, 377, 411, 412, 415, 416, 444, 448, 449, 463, 470, 477, 511, 514, 521, 527, 529, 531, 533, 535, 541, 548, 560, 564, 565, 566, 569, 577, 578, 621, 624, 629, 653, 654, 676, 684, 694, 715, 731, 732, 734, 735, 740, 754, 759, 776, 777, 785, 787, 788, 790, 792, 800, 804, 845, 859, 899, 906, 939, 940, 945, 946, 976, 980, 981, 995, 1023, 1025, 1032, 1045, 1056, 1075, 1079, 1080, 1081, 1084, 1092, 1093, 1114, 1145, 1153], "byte": [30, 50, 52, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 160, 278, 564, 566, 804, 913, 1079, 1081, 1145], "quot": [30, 31, 50, 107, 108, 121, 278, 804], "specifi": [30, 33, 50, 71, 83, 92, 94, 112, 118, 137, 149, 150, 156, 160, 161, 164, 173, 174, 175, 176, 177, 178, 191, 205, 215, 216, 218, 221, 222, 223, 229, 243, 246, 253, 254, 257, 278, 385, 386, 387, 388, 393, 476, 503, 517, 525, 526, 527, 528, 529, 531, 532, 533, 548, 567, 573, 624, 627, 628, 629, 638, 639, 641, 642, 645, 673, 676, 681, 682, 694, 710, 712, 719, 723, 726, 730, 731, 732, 733, 734, 735, 739, 759, 761, 762, 764, 769, 774, 776, 780, 781, 785, 804, 913, 914, 915, 916, 922, 1082, 1088, 1145], "defin": [30, 33, 41, 50, 109, 134, 135, 137, 146, 150, 158, 161, 174, 175, 177, 178, 195, 203, 206, 215, 248, 259, 264, 278, 292, 408, 464, 477, 507, 511, 521, 522, 525, 526, 527, 528, 529, 531, 532, 533, 619, 638, 639, 641, 642, 656, 659, 676, 681, 682, 694, 712, 720, 723, 731, 732, 734, 735, 753, 759, 777, 787, 792, 804, 807, 814, 934, 996, 1005, 1023, 1032, 1145], "chrono": [30, 50, 278, 373, 376, 586, 587, 588, 591, 804, 902, 905, 1101, 1102, 1103, 1106], "rust": [30, 38, 50, 89, 109, 113, 115, 119, 195, 264, 278, 561, 804, 1005, 1076, 1145], "crate": [30, 50, 278, 552, 553, 554, 559, 560, 561, 571, 572, 586, 587, 588, 591, 804, 807, 1067, 1068, 1069, 1074, 1075, 1076, 1086, 1087, 1101, 1102, 1103, 1106], "fraction": [30, 50, 130, 131, 132, 133, 219, 278, 371, 504, 535, 586, 588, 694, 804, 900, 1019, 1045, 1101, 1103, 1145], "second": [30, 50, 130, 131, 132, 136, 174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 586, 588, 638, 639, 640, 641, 642, 643, 680, 681, 682, 684, 694, 731, 740, 759, 804, 807, 895, 899, 906, 1101, 1103, 1153], "infer": [30, 50, 96, 98, 99, 100, 101, 102, 107, 108, 109, 112, 116, 117, 121, 125, 126, 146, 195, 278, 518, 562, 586, 587, 588, 589, 591, 670, 694, 804, 1029, 1077, 1101, 1102, 1103, 1104, 1106, 1145], "timeunit": [30, 41, 43, 50, 278, 342, 343, 375, 380, 588, 638, 639, 640, 641, 642, 643, 804, 807, 867, 868, 904, 909, 1103], "frame": [30, 31, 33, 50, 56, 57, 58, 59, 60, 61, 71, 78, 79, 99, 108, 112, 118, 130, 131, 137, 150, 151, 189, 190, 195, 200, 203, 206, 216, 217, 218, 240, 247, 248, 278, 712, 713, 750, 753, 777, 804, 807, 846, 1145, 1152, 1153], "datetim": [30, 32, 33, 50, 71, 103, 112, 137, 150, 155, 172, 174, 175, 177, 178, 190, 192, 215, 249, 278, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 434, 522, 525, 526, 527, 528, 529, 531, 532, 533, 586, 588, 605, 638, 639, 641, 642, 643, 649, 656, 681, 682, 694, 712, 731, 732, 734, 735, 740, 759, 804, 807, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 953, 966, 967, 968, 1014, 1015, 1049, 1101, 1103, 1128, 1145], "float64": [30, 33, 50, 99, 107, 137, 159, 160, 168, 220, 240, 253, 278, 294, 295, 296, 297, 298, 299, 317, 325, 326, 327, 336, 371, 388, 417, 419, 513, 543, 544, 603, 604, 645, 667, 670, 685, 694, 721, 760, 780, 804, 807, 900, 1127, 1132, 1145], "repres": [30, 33, 50, 54, 69, 96, 98, 100, 101, 102, 109, 112, 230, 250, 256, 278, 417, 419, 475, 550, 612, 615, 630, 643, 645, 656, 658, 659, 671, 672, 675, 683, 690, 694, 770, 778, 804, 1049, 1064, 1134, 1145], "empti": [30, 50, 87, 99, 107, 108, 112, 118, 121, 151, 152, 174, 186, 199, 278, 656, 673, 713, 714, 731, 749, 804, 807, 846, 850, 937, 1145], "necessari": [30, 50, 62, 81, 112, 278, 804], "alwai": [30, 32, 50, 56, 107, 136, 173, 176, 195, 264, 278, 485, 586, 638, 684, 745, 804, 813, 1005, 1101, 1145, 1152, 1153], "non_numer": [30, 50, 278, 804], "never": [30, 50, 109, 216, 278, 804], "strategi": [30, 50, 71, 79, 107, 134, 135, 136, 137, 139, 164, 174, 177, 191, 192, 202, 248, 278, 292, 393, 465, 477, 694, 726, 731, 734, 739, 740, 777, 804, 922, 997, 1145], "put": [30, 50, 278, 804], "around": [30, 50, 278, 804], "thei": [30, 32, 33, 50, 62, 78, 79, 80, 81, 99, 121, 143, 193, 218, 278, 716, 804, 807], "record": [30, 35, 50, 115, 127, 192, 239, 278, 740, 804], "termin": [30, 50, 278, 804], "also": [30, 33, 50, 61, 62, 99, 109, 112, 118, 121, 135, 136, 137, 138, 139, 143, 159, 173, 174, 175, 177, 178, 200, 203, 215, 217, 221, 229, 248, 253, 278, 330, 333, 366, 369, 408, 477, 514, 525, 526, 527, 528, 529, 531, 532, 533, 548, 581, 582, 633, 634, 638, 647, 649, 669, 684, 693, 694, 699, 730, 731, 732, 734, 735, 750, 759, 761, 769, 777, 780, 782, 804, 807, 898, 934, 1025, 1068, 1069, 1096, 1145], "indistinguish": [30, 50, 278, 804], "even": [30, 50, 107, 278, 507, 511, 694, 804, 1023, 1145], "invalid": [30, 50, 107, 108, 121, 278, 562, 563, 570, 607, 694, 804, 1077, 1078, 1085], "g": [30, 50, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 145, 174, 192, 215, 239, 247, 249, 278, 285, 292, 366, 370, 377, 388, 477, 522, 525, 526, 527, 528, 529, 531, 532, 533, 540, 638, 639, 641, 642, 645, 681, 682, 694, 718, 731, 740, 756, 757, 759, 804, 895, 899, 906, 1047, 1126, 1145, 1153], "numer": [30, 33, 50, 150, 156, 192, 199, 207, 247, 278, 285, 322, 323, 324, 398, 408, 470, 492, 494, 508, 517, 540, 561, 597, 607, 694, 705, 712, 719, 740, 749, 804, 807, 847, 848, 849, 860, 934, 951, 1047, 1054, 1076, 1126, 1145, 1153], "doe": [30, 32, 50, 71, 79, 90, 96, 98, 99, 100, 102, 103, 107, 108, 109, 111, 112, 116, 117, 121, 122, 125, 127, 152, 162, 190, 191, 216, 217, 218, 245, 253, 278, 316, 380, 465, 476, 609, 646, 655, 690, 694, 714, 724, 739, 745, 775, 780, 804, 813, 850, 909, 919, 927, 1004, 1055, 1135, 1145], "pars": [30, 50, 56, 107, 108, 112, 117, 121, 124, 125, 149, 173, 176, 221, 222, 229, 243, 253, 254, 257, 278, 408, 476, 503, 548, 562, 570, 589, 616, 618, 624, 627, 628, 629, 636, 649, 661, 665, 673, 674, 676, 678, 684, 694, 710, 730, 733, 761, 762, 769, 774, 780, 781, 785, 804, 934, 1077, 1085, 1103, 1104, 1145], "valid": [30, 33, 41, 50, 56, 109, 113, 115, 119, 139, 143, 160, 191, 278, 334, 552, 553, 554, 559, 560, 561, 563, 571, 572, 684, 694, 739, 804, 807, 858, 913, 927, 1067, 1068, 1069, 1074, 1075, 1076, 1078, 1086, 1087, 1145], "integ": [30, 32, 33, 46, 47, 48, 49, 50, 65, 66, 67, 68, 128, 135, 137, 138, 140, 158, 174, 215, 237, 278, 289, 321, 371, 397, 398, 502, 511, 516, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 570, 614, 621, 649, 653, 654, 670, 694, 720, 731, 759, 804, 807, 844, 900, 925, 944, 1023, 1027, 1040, 1049, 1085, 1145, 1152, 1153], "aren": [30, 50, 278, 804], "t": [30, 50, 58, 59, 79, 107, 112, 118, 121, 174, 195, 206, 245, 247, 278, 292, 334, 341, 349, 369, 382, 385, 386, 387, 440, 477, 503, 507, 559, 583, 586, 588, 684, 694, 731, 753, 775, 804, 807, 858, 898, 912, 914, 915, 916, 972, 1005, 1047, 1074, 1097, 1098, 1101, 1103, 1126, 1135, 1145], "strictli": [30, 50, 62, 81, 278, 724, 804], "table_nam": [31, 33, 278], "connect": [31, 107, 109, 110, 113, 115, 119, 124, 126, 127, 278, 706], "if_exist": [31, 278], "dbwritemod": [31, 278], "fail": [31, 32, 97, 111, 113, 117, 122, 126, 130, 131, 145, 245, 278, 303, 374, 465, 586, 587, 588, 591, 694, 775, 804, 1005, 1101, 1102, 1103, 1106, 1145], "dbwriteengin": [31, 278], "sqlalchemi": [31, 109, 129, 278], "databas": [31, 109, 110, 278, 705], "creat": [31, 33, 62, 81, 96, 100, 102, 109, 110, 122, 123, 135, 136, 137, 138, 139, 140, 151, 152, 174, 175, 178, 204, 207, 215, 249, 253, 278, 343, 370, 377, 465, 515, 522, 525, 526, 528, 531, 532, 533, 575, 628, 637, 638, 639, 640, 641, 642, 643, 680, 681, 682, 690, 694, 713, 714, 722, 731, 732, 735, 759, 780, 804, 846, 850, 859, 868, 899, 906, 1016, 1023, 1026, 1090, 1126, 1145, 1152, 1153], "append": [31, 32, 137, 162, 191, 192, 278, 515, 684, 694, 739, 740, 804, 919, 1145], "your": [31, 33, 62, 71, 81, 107, 108, 109, 112, 133, 189, 195, 217, 218, 221, 236, 253, 257, 264, 278, 292, 477, 561, 586, 587, 588, 659, 694, 736, 743, 745, 761, 780, 785, 792, 804, 1005, 1076, 1101, 1102, 1103, 1145, 1153], "special": [31, 107, 108, 121, 278, 524, 560, 694, 814, 1005, 1034, 1075, 1145], "uri": [31, 32, 109, 110, 111, 122, 123, 278], "postgresql": [31, 109, 110, 278, 503, 694], "user": [31, 109, 110, 146, 195, 206, 259, 264, 278, 292, 475, 477, 507, 537, 619, 659, 694, 753, 787, 792, 804, 814, 1005, 1050, 1145], "pass": [31, 32, 33, 38, 59, 71, 98, 109, 110, 112, 121, 126, 127, 135, 137, 139, 149, 154, 156, 173, 174, 177, 180, 194, 205, 206, 215, 221, 229, 232, 243, 249, 253, 257, 278, 292, 350, 366, 369, 391, 406, 477, 503, 507, 525, 526, 527, 528, 529, 531, 532, 533, 548, 581, 582, 583, 615, 624, 638, 649, 676, 684, 690, 694, 710, 719, 730, 731, 732, 734, 735, 737, 744, 745, 753, 759, 761, 767, 769, 774, 780, 785, 792, 804, 814, 875, 898, 920, 929, 959, 1005, 1096, 1097, 1098, 1116, 1145], "server": [31, 109, 110, 278], "port": [31, 107, 109, 110, 113, 115, 119, 124, 278], "sqlite": [31, 109, 278], "db": [31, 110, 278], "replac": [31, 32, 107, 108, 121, 163, 164, 213, 244, 253, 254, 278, 343, 369, 476, 572, 694, 725, 780, 781, 804, 868, 898, 1004, 1048, 1049, 1087, 1145], "insert": [31, 107, 108, 113, 115, 119, 121, 124, 125, 126, 183, 212, 244, 246, 278, 536, 551, 594, 694, 776, 804, 1046, 1066, 1109, 1145], "mode": [31, 32, 50, 51, 52, 56, 207, 278, 560, 667, 670, 685, 694, 715, 804, 1075, 1145, 1152], "new": [31, 32, 33, 112, 121, 143, 182, 183, 195, 203, 204, 211, 212, 233, 244, 246, 247, 248, 253, 254, 278, 287, 343, 390, 407, 474, 571, 572, 577, 578, 595, 596, 602, 690, 694, 705, 757, 773, 776, 777, 780, 781, 787, 792, 804, 810, 868, 918, 1016, 1028, 1086, 1087, 1092, 1093, 1110, 1112, 1118, 1123, 1145, 1152], "alreadi": [31, 32, 278, 334, 440, 611, 694, 858, 972, 1133, 1145], "adbc": [31, 109, 110, 278], "deltalak": [32, 111, 122, 129, 278], "deltat": [32, 278], "ignor": [32, 136, 137, 139, 197, 231, 278, 288, 290, 337, 369, 385, 386, 387, 437, 496, 497, 615, 617, 694, 811, 812, 861, 898, 914, 915, 916, 969, 1014, 1015, 1145], "overwrite_schema": [32, 278], "storage_opt": [32, 107, 111, 113, 115, 119, 122, 123, 124, 126, 278], "delta_write_opt": [32, 278], "delta": [32, 43, 111, 122, 230, 250, 278, 531, 533, 550, 612, 630, 671, 672, 675, 683, 694, 705, 770, 778, 804, 1041, 1043, 1064, 1134, 1145], "object": [32, 33, 34, 35, 61, 79, 97, 98, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 135, 137, 139, 145, 173, 174, 176, 177, 192, 193, 215, 218, 239, 240, 278, 638, 639, 641, 642, 656, 681, 682, 705, 718, 731, 732, 734, 735, 740, 756, 759, 804, 807, 837, 865, 960, 1065, 1121, 1145], "handl": [32, 79, 103, 107, 108, 121, 127, 278, 337, 437, 594, 694, 715, 804, 861, 969, 1109, 1145], "throw": [32, 150, 278, 317, 562, 563, 694, 712, 804, 836, 1077, 1078, 1145], "add": [32, 33, 108, 162, 174, 177, 195, 253, 254, 255, 278, 335, 509, 511, 598, 643, 647, 684, 694, 731, 734, 739, 780, 781, 782, 783, 804, 813, 919, 1145], "anyth": [32, 216, 278], "updat": [32, 278, 804], "extra": [32, 38, 52, 107, 108, 111, 112, 113, 115, 119, 121, 122, 123, 124, 162, 174, 278, 731, 804, 813, 919, 1145], "storag": [32, 107, 111, 113, 115, 119, 122, 123, 124, 126, 278], "backend": [32, 109, 110, 111, 122, 123, 278], "cloud": [32, 109, 111, 122, 123, 126, 127, 278], "configur": [32, 111, 122, 123, 143, 278], "authent": [32, 111, 122, 123, 278], "see": [32, 33, 34, 35, 41, 109, 110, 111, 112, 122, 123, 126, 130, 131, 132, 133, 137, 139, 154, 174, 191, 206, 207, 278, 322, 323, 324, 393, 424, 475, 545, 552, 559, 560, 571, 638, 639, 641, 642, 669, 681, 682, 690, 694, 715, 731, 804, 807, 841, 847, 848, 849, 957, 1060, 1067, 1074, 1075, 1086, 1145, 1153], "here": [32, 33, 38, 96, 98, 99, 100, 102, 109, 110, 111, 116, 117, 122, 123, 125, 126, 135, 137, 139, 278, 477, 561, 563, 694, 804, 1078], "gc": [32, 111, 122, 123, 278], "azur": [32, 111, 122, 123, 126, 278], "keyword": [32, 59, 111, 119, 122, 154, 206, 216, 221, 222, 253, 254, 257, 278, 507, 673, 676, 694, 753, 761, 762, 780, 781, 785, 804, 1145], "argument": [32, 38, 81, 107, 111, 119, 121, 122, 154, 156, 161, 173, 174, 175, 176, 177, 178, 197, 205, 206, 207, 215, 221, 222, 223, 229, 231, 240, 246, 249, 253, 254, 257, 278, 370, 377, 388, 408, 503, 507, 522, 525, 526, 527, 528, 529, 531, 532, 533, 548, 581, 582, 583, 615, 622, 623, 624, 627, 628, 629, 638, 645, 670, 673, 676, 681, 694, 719, 723, 730, 731, 732, 733, 734, 735, 753, 759, 761, 762, 764, 769, 776, 780, 781, 785, 804, 813, 899, 906, 934, 1096, 1097, 1098, 1127, 1145], "while": [32, 78, 108, 111, 112, 122, 137, 139, 143, 189, 199, 244, 248, 278, 565, 716, 749, 777, 804, 927, 1080, 1145], "lake": [32, 111, 122, 278, 705], "typeerror": [32, 278], "unsupport": [32, 278], "arrowinvaliderror": [32, 278], "could": [32, 69, 84, 150, 278, 317, 633, 643, 647, 694, 712, 720, 804, 836, 927, 1145], "primit": [32, 278, 413, 694, 1126, 1145], "categor": [32, 62, 80, 81, 97, 130, 131, 132, 133, 191, 237, 238, 278, 318, 319, 335, 476, 511, 605, 694, 807, 837, 838, 839, 840, 841, 842, 859, 1023, 1128, 1145], "protocol": [32, 97, 110, 145, 278], "associ": [32, 33, 57, 59, 71, 110, 136, 218, 278], "affect": [32, 278], "follow": [32, 33, 38, 76, 107, 108, 111, 121, 122, 123, 130, 174, 192, 195, 206, 215, 249, 278, 366, 370, 377, 507, 514, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 596, 607, 638, 639, 641, 642, 659, 681, 682, 684, 686, 687, 689, 694, 695, 696, 700, 701, 702, 731, 740, 753, 759, 804, 895, 899, 906, 1025, 1048, 1049, 1137, 1139, 1141, 1145, 1146, 1149, 1150, 1151, 1153], "unsign": [32, 65, 66, 67, 68, 278, 516, 694, 807, 944, 1027, 1145], "millisecond": [32, 174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 643, 681, 682, 694, 731, 740, 759, 804, 807, 895, 899, 906], "nanosecond": [32, 174, 192, 215, 249, 278, 366, 370, 371, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 643, 681, 682, 694, 731, 740, 759, 804, 895, 899, 900, 906], "zone": [32, 41, 278, 341, 344, 369, 588, 638, 639, 640, 641, 642, 807, 866, 869, 898, 1103], "binari": [32, 34, 109, 112, 278, 310, 312, 313, 314, 807, 830, 833, 834], "nullabl": [32, 278], "To": [32, 78, 163, 278, 339, 340, 393, 552, 559, 560, 571, 592, 638, 694, 725, 804, 863, 864, 927, 1067, 1074, 1075, 1086, 1107, 1126, 1145], "pyarrow": [32, 38, 96, 97, 101, 107, 110, 111, 113, 115, 119, 122, 127, 129, 234, 239, 240, 278, 706, 1121, 1125, 1126, 1127, 1145], "ha": [32, 33, 71, 78, 109, 112, 121, 145, 146, 148, 174, 175, 176, 177, 178, 215, 249, 259, 278, 292, 315, 316, 334, 411, 415, 418, 435, 438, 445, 449, 462, 466, 473, 486, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 553, 566, 568, 569, 574, 580, 606, 619, 657, 690, 694, 709, 716, 731, 732, 733, 734, 735, 744, 756, 759, 784, 787, 792, 804, 814, 835, 846, 858, 860, 927, 939, 941, 945, 967, 970, 977, 981, 994, 998, 1033, 1068, 1081, 1083, 1084, 1089, 1095, 1129, 1145], "last": [32, 130, 131, 132, 133, 149, 180, 192, 194, 207, 218, 229, 232, 243, 245, 272, 278, 302, 334, 347, 362, 367, 378, 415, 416, 423, 443, 463, 509, 547, 578, 598, 600, 638, 679, 694, 710, 740, 769, 772, 774, 775, 800, 804, 807, 823, 858, 872, 891, 896, 907, 929, 945, 946, 959, 975, 995, 1093, 1116, 1145], "filesystem": [32, 111, 122, 123, 278], "table_path": [32, 111, 122, 123, 278], "match": [32, 33, 41, 79, 90, 96, 98, 99, 100, 102, 116, 117, 125, 130, 131, 132, 133, 164, 192, 216, 248, 278, 483, 530, 552, 553, 554, 557, 559, 560, 562, 563, 571, 572, 579, 586, 587, 588, 694, 726, 740, 777, 804, 807, 944, 953, 1040, 1067, 1068, 1069, 1072, 1074, 1075, 1077, 1078, 1086, 1087, 1094, 1101, 1102, 1103, 1145], "version": [32, 76, 81, 111, 112, 122, 129, 145, 146, 148, 174, 175, 176, 177, 178, 259, 278, 292, 316, 362, 363, 369, 377, 411, 415, 418, 435, 438, 445, 449, 462, 466, 473, 523, 553, 566, 568, 569, 574, 580, 586, 588, 619, 626, 638, 640, 657, 669, 670, 681, 694, 709, 729, 731, 732, 733, 734, 735, 744, 756, 784, 787, 804, 813, 814, 859, 891, 892, 898, 906, 939, 945, 967, 970, 977, 981, 994, 998, 1023, 1033, 1068, 1081, 1083, 1084, 1089, 1095, 1101, 1103, 1145], "old": [32, 211, 278, 757, 804], "existing_table_path": [32, 278], "store": [32, 107, 119, 123, 162, 189, 217, 278, 318, 813, 838, 919, 1145], "like": [32, 78, 97, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 174, 185, 187, 191, 239, 278, 328, 341, 427, 440, 448, 489, 514, 559, 611, 690, 694, 716, 718, 731, 756, 804, 813, 866, 958, 972, 980, 1025, 1074, 1133, 1145], "bucket": [32, 111, 122, 123, 126, 278, 370, 377, 899, 906, 930, 1145], "prefix": [32, 143, 278, 287, 314, 474, 579, 584, 594, 598, 694, 807, 834, 1094, 1099, 1109], "aws_region": [32, 122, 126, 278], "the_aws_region": [32, 278], "aws_access_key_id": [32, 111, 122, 126, 278], "the_aws_access_key_id": [32, 111, 122, 123, 278], "aws_secret_access_kei": [32, 111, 122, 126, 278], "the_aws_secret_access_kei": [32, 111, 122, 123, 278], "pa": [32, 96, 127, 278], "workbook": [33, 112, 278], "worksheet": [33, 112, 118, 278], "posit": [33, 156, 161, 173, 176, 205, 221, 222, 223, 229, 246, 253, 254, 257, 278, 385, 386, 387, 388, 503, 511, 548, 561, 570, 622, 623, 624, 627, 628, 629, 645, 673, 676, 694, 719, 723, 730, 733, 761, 762, 764, 769, 776, 780, 781, 785, 804, 914, 915, 916, 1023, 1076, 1085, 1145], "tupl": [33, 110, 112, 118, 146, 189, 195, 216, 217, 218, 224, 256, 278, 518, 694, 754, 767, 804, 807, 1029, 1145], "a1": [33, 72, 74, 278], "table_styl": [33, 278], "column_format": [33, 278], "columnformatdict": [33, 278], "dtype_format": [33, 278], "oneormoredatatyp": [33, 135, 278, 953, 1145], "conditional_format": [33, 278], "conditionalformatdict": [33, 278], "header_format": [33, 278], "column_tot": [33, 278], "columntotalsdefinit": [33, 278], "column_width": [33, 278], "columnwidthsdefinit": [33, 278], "row_tot": [33, 278], "rowtotalsdefinit": [33, 278], "row_height": [33, 278], "sparklin": [33, 278], "sequenc": [33, 63, 71, 77, 78, 96, 98, 99, 100, 102, 107, 108, 109, 112, 116, 117, 118, 121, 125, 135, 136, 137, 149, 155, 161, 162, 191, 192, 199, 203, 205, 206, 207, 218, 229, 237, 243, 247, 248, 249, 278, 335, 413, 465, 473, 475, 507, 511, 548, 596, 619, 624, 633, 634, 647, 649, 657, 658, 659, 669, 674, 694, 710, 723, 739, 740, 749, 753, 769, 774, 777, 804, 813, 859, 860, 862, 919, 997, 1023, 1049, 1112, 1145], "formula": [33, 278, 382, 694, 912, 1145], "autofilt": [33, 278], "autofit": [33, 278], "hidden_column": [33, 278], "selectortyp": [33, 278, 807], "hide_gridlin": [33, 278], "sheet_zoom": [33, 278], "freeze_pan": [33, 278], "excel": [33, 112, 278], "open": [33, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 126, 278, 718, 756, 804], "xlsxwriter": [33, 129, 278], "close": [33, 109, 174, 175, 177, 178, 215, 278, 335, 408, 470, 511, 522, 525, 526, 527, 528, 529, 531, 532, 533, 545, 638, 639, 641, 642, 681, 682, 694, 731, 732, 734, 735, 759, 804, 859, 934, 1023, 1060, 1145], "xlsx": [33, 112, 278], "work": [33, 42, 97, 108, 212, 222, 254, 278, 288, 290, 292, 308, 321, 322, 323, 324, 388, 397, 440, 467, 477, 503, 521, 564, 565, 608, 694, 762, 781, 804, 807, 811, 812, 829, 844, 847, 848, 849, 925, 972, 999, 1079, 1080, 1130, 1145], "directori": [33, 38, 119, 126, 278], "sheet1": [33, 278], "medium": [33, 278], "kei": [33, 71, 76, 79, 123, 126, 174, 189, 191, 192, 200, 205, 207, 211, 214, 217, 218, 248, 278, 477, 676, 694, 724, 731, 739, 740, 750, 757, 758, 777, 804], "first_column": [33, 278], "last_column": [33, 278], "banded_column": [33, 278], "banded_row": [33, 278], "sheet": [33, 112, 118, 278], "chart": [33, 278, 754, 804], "subsequ": [33, 61, 210, 240, 278, 465, 684, 722, 804], "colnam": [33, 121, 137, 159, 278, 721, 804], "given": [33, 56, 57, 71, 96, 98, 99, 100, 102, 107, 108, 109, 110, 112, 116, 117, 118, 121, 125, 126, 134, 135, 137, 138, 139, 140, 146, 149, 160, 161, 163, 174, 175, 177, 178, 188, 195, 205, 206, 215, 216, 218, 225, 226, 229, 243, 248, 278, 341, 344, 373, 375, 376, 382, 408, 434, 458, 465, 468, 477, 503, 507, 514, 517, 518, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 560, 561, 586, 588, 596, 619, 645, 657, 658, 659, 670, 671, 672, 694, 710, 723, 731, 732, 734, 735, 744, 745, 753, 759, 765, 766, 769, 774, 777, 787, 792, 804, 807, 814, 866, 869, 902, 904, 905, 912, 913, 930, 934, 956, 966, 990, 997, 1000, 1003, 1005, 1016, 1025, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1052, 1053, 1075, 1076, 1101, 1103, 1132, 1136, 1145, 1152, 1153], "dd": [33, 278], "mm": [33, 278], "yyyi": [33, 278], "00": [33, 137, 174, 192, 249, 278, 341, 342, 344, 348, 349, 351, 352, 355, 356, 358, 359, 360, 362, 363, 365, 366, 369, 370, 371, 372, 373, 376, 377, 380, 525, 526, 528, 531, 532, 533, 586, 588, 591, 641, 643, 681, 682, 694, 731, 740, 804, 807, 866, 867, 869, 870, 871, 873, 874, 875, 876, 877, 882, 883, 884, 886, 888, 889, 891, 892, 893, 894, 895, 898, 899, 901, 903, 904, 906, 909, 1101, 1103, 1106], "overridden": [33, 96, 98, 100, 102, 116, 117, 141, 278, 804], "basi": [33, 137, 278], "param": [33, 96, 98, 99, 100, 102, 107, 108, 116, 117, 121, 136, 137, 139, 216, 278, 804], "It": [33, 62, 81, 200, 206, 264, 278, 316, 485, 521, 690, 694, 744, 745, 750, 792, 804, 1048, 1049, 1145], "group": [33, 38, 52, 56, 108, 173, 174, 175, 176, 177, 178, 190, 203, 205, 207, 215, 218, 247, 249, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 286, 334, 390, 396, 440, 477, 485, 487, 503, 514, 521, 522, 547, 548, 552, 559, 560, 561, 571, 601, 611, 659, 694, 730, 731, 732, 733, 734, 735, 759, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 858, 972, 1032, 1067, 1074, 1075, 1076, 1086, 1133, 1145], "float_dtyp": [33, 278], "simplifi": [33, 50, 51, 52, 77, 78, 278, 715, 716, 722, 724, 754, 767, 804], "uniform": [33, 278, 511, 694, 1023, 1145], "condit": [33, 158, 165, 216, 278, 557, 579, 625, 647, 684, 720, 727, 804], "suppli": [33, 96, 98, 99, 100, 102, 109, 116, 117, 125, 165, 216, 278, 507, 694, 727, 804], "typenam": [33, 278], "3_color_scal": [33, 278], "data_bar": [33, 278], "make": [33, 63, 79, 96, 101, 107, 108, 113, 115, 119, 124, 200, 203, 210, 249, 278, 386, 387, 476, 503, 517, 577, 594, 694, 750, 804, 915, 916, 930, 1004, 1092, 1109, 1145, 1153], "icon": [33, 278], "multipl": [33, 59, 77, 78, 79, 107, 108, 112, 118, 121, 124, 125, 126, 135, 139, 149, 156, 160, 162, 165, 173, 174, 182, 190, 205, 207, 218, 221, 223, 229, 243, 248, 253, 257, 278, 464, 482, 486, 493, 494, 503, 518, 521, 525, 526, 527, 528, 529, 531, 532, 533, 548, 624, 633, 634, 647, 657, 658, 660, 664, 669, 674, 677, 684, 690, 694, 710, 715, 716, 719, 727, 730, 731, 761, 764, 769, 774, 777, 780, 785, 792, 804, 813, 913, 919, 996, 1010, 1029, 1145], "singl": [33, 57, 71, 78, 79, 107, 108, 109, 110, 112, 119, 121, 126, 135, 150, 156, 157, 158, 162, 170, 188, 191, 195, 205, 216, 218, 229, 278, 292, 366, 394, 435, 436, 464, 475, 477, 515, 518, 548, 551, 613, 619, 624, 628, 629, 654, 658, 659, 674, 682, 694, 712, 715, 719, 720, 739, 769, 804, 813, 895, 919, 967, 968, 996, 1026, 1029, 1066, 1121, 1145], "across": [33, 71, 278, 616, 618, 636, 661, 665, 678], "effect": [33, 168, 174, 177, 239, 278, 349, 477, 638, 639, 694, 731, 734, 783, 804, 866, 874], "heatmap": [33, 278], "min": [33, 38, 52, 155, 164, 207, 215, 278, 322, 324, 331, 393, 503, 514, 522, 528, 665, 673, 694, 726, 759, 804, 847, 849, 855, 860, 922, 1025, 1038, 1145, 1153], "entir": [33, 278, 715, 804], "final": [33, 71, 126, 278, 385, 386, 387, 694, 724, 804, 914, 915, 916, 1145], "made": [33, 109, 278, 1126, 1145], "up": [33, 63, 110, 189, 192, 217, 218, 236, 278, 292, 321, 477, 594, 694, 739, 740, 745, 804, 807, 844, 1109, 1145], "abov": [33, 130, 207, 278, 684], "order": [33, 50, 51, 52, 56, 58, 71, 77, 99, 109, 128, 130, 131, 149, 158, 165, 173, 174, 175, 176, 177, 178, 191, 205, 206, 207, 215, 219, 223, 229, 239, 243, 245, 249, 278, 302, 308, 319, 339, 340, 394, 439, 460, 467, 514, 522, 526, 527, 528, 529, 531, 533, 535, 536, 537, 547, 548, 596, 608, 609, 611, 624, 694, 704, 710, 720, 727, 730, 731, 732, 733, 734, 735, 739, 749, 759, 764, 769, 774, 775, 804, 823, 829, 840, 842, 863, 864, 923, 952, 971, 992, 999, 1025, 1030, 1045, 1046, 1050, 1062, 1112, 1130, 1131, 1133, 1145, 1153], "than": [33, 50, 51, 52, 95, 100, 102, 107, 108, 109, 112, 118, 121, 127, 137, 139, 151, 173, 176, 189, 192, 195, 205, 216, 217, 219, 247, 264, 278, 401, 402, 426, 472, 477, 488, 511, 521, 535, 545, 564, 567, 573, 578, 594, 630, 638, 659, 694, 715, 730, 733, 740, 792, 804, 1005, 1023, 1032, 1045, 1060, 1079, 1082, 1088, 1093, 1109, 1145, 1153], "bold": [33, 278], "font_color": [33, 278], "702963": [33, 278], "total": [33, 160, 278, 913, 1145], "export": [33, 189, 190, 217, 218, 236, 239, 278, 690], "sum": [33, 56, 160, 168, 173, 174, 188, 207, 215, 257, 278, 332, 333, 382, 394, 465, 477, 485, 487, 488, 489, 522, 525, 528, 532, 613, 615, 633, 635, 636, 647, 659, 669, 678, 694, 715, 716, 718, 722, 724, 730, 731, 752, 754, 759, 763, 767, 785, 804, 807, 856, 857, 912, 913, 1035, 1036, 1038, 1041, 1042, 1043, 1145], "must": [33, 97, 98, 111, 122, 123, 127, 155, 161, 174, 175, 177, 178, 192, 200, 215, 216, 278, 335, 465, 475, 511, 522, 525, 526, 527, 528, 529, 531, 532, 533, 684, 694, 723, 731, 732, 734, 735, 740, 744, 745, 750, 759, 804, 859, 860, 1023, 1145], "funcnam": [33, 278], "averag": [33, 278, 385, 386, 387, 514, 694, 914, 915, 916, 1025, 1145], "count_num": [33, 278], "count": [33, 56, 107, 108, 113, 115, 119, 121, 124, 125, 126, 127, 147, 148, 155, 174, 192, 203, 204, 207, 215, 244, 248, 249, 255, 264, 269, 278, 293, 329, 366, 427, 435, 436, 477, 485, 487, 495, 501, 522, 525, 526, 527, 528, 529, 531, 532, 533, 553, 554, 609, 611, 620, 666, 694, 708, 709, 731, 740, 752, 759, 783, 792, 797, 804, 860, 895, 930, 967, 968, 1012, 1018, 1068, 1069, 1131, 1133, 1145], "std_dev": [33, 278], "var": [33, 140, 278, 533, 694, 804, 1145], "pixel": [33, 278], "unit": [33, 41, 43, 130, 131, 132, 133, 137, 139, 160, 278, 342, 343, 350, 375, 380, 471, 486, 586, 588, 610, 638, 639, 640, 641, 642, 643, 649, 694, 754, 804, 807, 867, 868, 875, 904, 909, 913, 1003, 1101, 1103, 1132, 1145, 1153], "hand": [33, 107, 108, 121, 278, 454, 455, 456, 457, 986, 987, 988, 989], "side": [33, 174, 175, 177, 178, 215, 278, 408, 454, 455, 456, 457, 522, 525, 526, 527, 528, 529, 531, 532, 533, 536, 638, 639, 641, 642, 681, 682, 694, 731, 732, 734, 735, 759, 804, 934, 986, 987, 988, 989, 1046, 1145], "call": [33, 60, 62, 81, 108, 109, 130, 131, 132, 133, 137, 139, 143, 173, 174, 177, 193, 195, 215, 277, 278, 292, 330, 333, 423, 477, 509, 541, 598, 690, 694, 706, 730, 731, 732, 734, 735, 759, 803, 804, 807, 814, 1005, 1056, 1145], "ad": [33, 99, 112, 174, 177, 244, 248, 253, 254, 278, 291, 391, 633, 634, 694, 731, 734, 777, 780, 781, 804, 859, 920, 1023, 1145], "wise": [33, 71, 109, 168, 278, 294, 295, 296, 297, 298, 299, 325, 326, 327, 389, 469, 542, 543, 544, 603, 604, 633, 634, 647, 669, 694, 815, 816, 817, 818, 819, 820, 851, 852, 853, 917, 1001, 1002, 1057, 1058, 1059, 1119, 1120, 1145], "particip": [33, 278], "distinct": [33, 139, 205, 278, 308, 411, 412, 415, 416, 467, 514, 643, 694, 829, 939, 940, 945, 946, 999, 1025, 1145, 1153], "referenc": [33, 278, 596], "differ": [33, 107, 127, 130, 132, 162, 174, 189, 215, 217, 218, 236, 244, 278, 337, 347, 366, 367, 369, 378, 384, 437, 454, 456, 462, 476, 477, 496, 497, 499, 586, 609, 646, 649, 655, 694, 722, 731, 759, 804, 807, 813, 841, 861, 872, 895, 896, 898, 907, 919, 969, 986, 988, 994, 1005, 1014, 1015, 1047, 1101, 1145], "row_index": [33, 278], "height": [33, 158, 278], "provid": [33, 59, 107, 108, 110, 111, 121, 122, 123, 126, 137, 139, 165, 188, 278, 311, 312, 388, 465, 475, 477, 555, 556, 559, 562, 563, 649, 676, 694, 705, 727, 804, 831, 832, 930, 956, 1005, 1070, 1071, 1074, 1077, 1078, 1145, 1152, 1153], "intersect": [33, 278, 455, 807, 987], "bodi": [33, 278], "start": [33, 106, 107, 108, 109, 110, 113, 115, 118, 119, 121, 124, 125, 126, 141, 173, 174, 176, 177, 193, 228, 249, 255, 278, 310, 313, 314, 347, 361, 367, 370, 377, 378, 388, 408, 459, 525, 526, 528, 531, 532, 533, 546, 552, 557, 560, 575, 579, 621, 633, 638, 639, 641, 642, 645, 647, 653, 654, 681, 682, 684, 694, 730, 731, 733, 734, 754, 768, 783, 804, 807, 834, 867, 869, 872, 875, 876, 883, 885, 888, 890, 893, 896, 899, 904, 906, 907, 934, 991, 1061, 1072, 1075, 1090, 1094, 1145, 1153], "zero": [33, 96, 97, 106, 107, 108, 113, 115, 119, 136, 145, 164, 189, 216, 234, 239, 240, 278, 393, 465, 470, 536, 545, 594, 607, 694, 713, 726, 804, 846, 922, 997, 1060, 1109, 1121, 1126, 1127, 1145], "unless": [33, 71, 98, 240, 278, 581, 582, 670, 804, 1096, 1127, 1135, 1145], "marker": [33, 278], "compliant": [33, 278], "case": [33, 62, 71, 78, 96, 98, 99, 100, 102, 109, 116, 117, 125, 126, 141, 146, 162, 174, 175, 177, 178, 189, 195, 215, 217, 218, 236, 278, 341, 474, 475, 485, 486, 522, 552, 560, 571, 694, 716, 731, 732, 734, 735, 759, 804, 807, 813, 866, 919, 1067, 1075, 1086, 1145], "three": [33, 242, 278, 335, 465, 511, 536, 694, 859, 997, 1023, 1145], "avail": [33, 105, 109, 110, 111, 122, 123, 135, 143, 207, 277, 278, 514, 686, 687, 689, 693, 694, 695, 696, 699, 700, 701, 702, 705, 706, 724, 803, 804, 807, 1025, 1137, 1139, 1141, 1145, 1146, 1149, 1150, 1151], "insert_befor": [33, 278], "insert_aft": [33, 278], "respect": [33, 278, 807], "direct": [33, 110, 119, 123, 126, 130, 247, 278], "far": [33, 278], "strongli": [33, 141, 195, 216, 264, 278, 477, 694, 1005, 1145], "advis": [33, 62, 81, 193, 278], "structur": [33, 87, 91, 93, 162, 206, 218, 239, 278, 507, 694, 753, 804, 813, 919, 1145], "wherev": [33, 195, 264, 278, 477, 694, 1005, 1145], "possibl": [33, 107, 149, 173, 176, 189, 195, 217, 243, 245, 264, 278, 471, 477, 485, 524, 578, 610, 694, 710, 730, 733, 769, 774, 775, 804, 1005, 1034, 1093, 1145], "simpl": [33, 139, 203, 278], "colx": [33, 61, 278, 807, 1153], "coli": [33, 278, 807, 1153], "after": [33, 61, 79, 99, 106, 107, 108, 113, 115, 119, 121, 124, 125, 126, 162, 246, 277, 278, 388, 476, 503, 514, 594, 694, 776, 804, 813, 919, 1004, 1025, 1109, 1145], "befor": [33, 107, 109, 112, 121, 127, 130, 131, 132, 133, 141, 143, 162, 174, 177, 192, 246, 278, 332, 333, 334, 476, 503, 504, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 594, 599, 671, 672, 694, 731, 734, 737, 740, 776, 804, 813, 856, 857, 858, 919, 1004, 1019, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1109, 1115, 1145], "most": [33, 58, 96, 107, 108, 110, 121, 130, 131, 132, 133, 278, 486, 493, 504, 578, 694, 1010, 1019, 1093, 1145, 1152], "mandatori": [33, 278], "return_dtyp": [33, 146, 195, 278, 292, 473, 475, 476, 477, 619, 657, 658, 659, 694, 814, 1004, 1005, 1145], "latter": [33, 162, 278, 813, 919, 1145], "appropri": [33, 127, 239, 278, 514, 694, 1025, 1145], "pure": [33, 278, 1126, 1145], "actual": [33, 99, 137, 139, 218, 278, 1055, 1145], "indic": [33, 106, 107, 108, 109, 113, 115, 119, 121, 134, 135, 139, 174, 175, 177, 178, 192, 215, 218, 223, 237, 249, 278, 303, 366, 370, 377, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 464, 481, 484, 522, 525, 526, 527, 528, 529, 531, 532, 533, 536, 542, 601, 624, 625, 638, 639, 641, 642, 681, 682, 694, 731, 732, 734, 735, 740, 759, 764, 804, 807, 895, 899, 906, 938, 939, 940, 943, 945, 946, 947, 948, 949, 950, 996, 1046, 1057, 1117, 1122, 1145, 1153], "calcul": [33, 71, 174, 230, 250, 278, 337, 385, 386, 387, 424, 437, 454, 471, 530, 545, 550, 610, 612, 630, 671, 672, 675, 683, 694, 731, 770, 778, 804, 861, 914, 915, 916, 957, 969, 986, 1040, 1060, 1064, 1134, 1145], "individu": [33, 52, 137, 143, 215, 239, 278, 477, 560, 694, 715, 759, 804, 845, 1075, 1145], "gridlin": [33, 278], "zoom": [33, 278], "level": [33, 38, 52, 121, 124, 125, 126, 137, 168, 195, 203, 278, 394, 694, 736, 743, 804], "freez": [33, 278], "pane": [33, 278], "top": [33, 149, 243, 278, 710, 774, 804], "index": [33, 97, 101, 104, 129, 145, 166, 174, 175, 177, 178, 183, 188, 189, 192, 207, 213, 215, 216, 217, 228, 239, 241, 248, 249, 255, 278, 286, 300, 301, 302, 304, 366, 431, 432, 443, 459, 464, 465, 522, 525, 526, 527, 528, 529, 531, 532, 533, 536, 546, 559, 575, 601, 694, 731, 732, 734, 735, 740, 759, 768, 777, 783, 804, 821, 822, 823, 824, 825, 895, 956, 963, 964, 975, 991, 996, 997, 1016, 1046, 1049, 1061, 1074, 1090, 1117, 1145], "thu": [33, 162, 278, 630, 813, 919, 1145], "altern": [33, 278, 690, 1126, 1145], "a2": [33, 72, 74, 278], "occur": [33, 77, 78, 278, 435, 436, 493, 514, 694, 715, 716, 722, 724, 754, 767, 804, 967, 968, 1010, 1025, 1145], "equival": [33, 96, 98, 99, 100, 102, 111, 116, 117, 125, 174, 188, 203, 278, 285, 289, 383, 384, 398, 401, 402, 426, 472, 492, 494, 498, 499, 502, 508, 565, 597, 607, 614, 694, 731, 804, 956, 1080, 1105, 1107, 1108, 1145], "top_row": [33, 278], "top_col": [33, 278], "base": [33, 39, 158, 165, 174, 175, 177, 178, 215, 278, 341, 349, 382, 385, 386, 387, 468, 469, 511, 522, 570, 694, 720, 727, 731, 732, 734, 735, 759, 804, 807, 866, 874, 912, 914, 915, 916, 930, 1000, 1001, 1023, 1085, 1136, 1145, 1153], "scroll": [33, 278], "region": [33, 123, 278], "initit": [33, 278], "5th": [33, 278], "properti": [33, 145, 153, 159, 167, 181, 220, 224, 252, 278, 717, 721, 760, 779, 804, 807, 1153], "readthedoc": [33, 278], "io": [33, 123, 278, 718, 763, 804], "html": [33, 34, 35, 97, 109, 145, 154, 278], "definit": [33, 135, 278, 424, 694, 957, 1145], "take": [33, 112, 118, 137, 143, 168, 174, 177, 200, 206, 207, 233, 239, 278, 366, 548, 602, 638, 639, 644, 646, 655, 694, 731, 734, 750, 773, 804, 895, 1118, 1136, 1145], "care": [33, 278, 292, 477, 537, 694, 1050, 1145], "rel": [33, 110, 111, 122, 123, 130, 131, 132, 133, 278, 366, 385, 386, 387, 527, 529, 531, 533, 694, 895, 914, 915, 916, 1145], "working_with_conditional_format": [33, 278], "similarli": [33, 99, 174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "well": [33, 107, 108, 109, 121, 207, 278, 408, 694, 934, 1145], "adjac": [33, 278], "two": [33, 61, 62, 80, 81, 98, 100, 102, 110, 168, 199, 200, 207, 242, 258, 264, 278, 286, 338, 343, 465, 511, 547, 601, 622, 623, 630, 632, 671, 672, 694, 749, 750, 786, 792, 804, 862, 868, 997, 1023, 1145], "help": [33, 130, 131, 132, 133, 278, 724, 804], "where": [33, 56, 71, 109, 110, 136, 158, 162, 174, 189, 199, 217, 230, 248, 250, 278, 303, 379, 382, 384, 499, 517, 536, 545, 548, 550, 612, 625, 630, 671, 672, 675, 683, 684, 694, 720, 731, 749, 770, 777, 778, 804, 813, 824, 908, 912, 919, 1046, 1060, 1064, 1134, 1136, 1145, 1152], "appear": [33, 99, 278, 609, 694, 1131, 1145], "working_with_sparklin": [33, 278], "inject": [33, 71, 278], "locat": [33, 162, 213, 241, 246, 278, 536, 694, 776, 804, 813, 919, 1046, 1049, 1117, 1145], "syntax": [33, 165, 195, 203, 278, 552, 559, 560, 571, 690, 727, 767, 804, 1067, 1074, 1075, 1086, 1145], "ensur": [33, 110, 136, 137, 139, 173, 176, 205, 216, 278, 408, 694, 730, 733, 744, 745, 804, 807, 1126, 1145], "correctli": [33, 112, 278], "microsoft": [33, 278], "com": [33, 110, 278, 385, 386, 387, 559, 560, 561, 694, 914, 915, 916, 1074, 1075, 1076, 1145], "u": [33, 41, 43, 59, 126, 278, 342, 343, 350, 375, 380, 586, 588, 638, 639, 640, 641, 642, 643, 649, 807, 867, 868, 875, 904, 909, 1101, 1103], "offic": [33, 278], "f5ed2452": [33, 278], "2337": [33, 278], "4f71": [33, 278], "bed3": [33, 278], "c8ae6d2b276": [33, 278], "instanti": [33, 109, 221, 253, 278, 761, 780, 804], "basic": [33, 278, 1153], "random": [33, 34, 128, 135, 137, 139, 179, 219, 278, 403, 514, 535, 541, 611, 694, 705, 928, 1025, 1045, 1056, 1133, 1145], "date": [33, 41, 71, 107, 108, 110, 112, 118, 121, 127, 137, 150, 155, 172, 174, 175, 177, 178, 190, 192, 215, 249, 278, 342, 343, 344, 347, 348, 350, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 434, 522, 525, 526, 527, 528, 529, 531, 532, 533, 586, 587, 605, 638, 639, 641, 642, 649, 656, 680, 681, 682, 694, 712, 731, 732, 734, 735, 740, 759, 804, 807, 867, 868, 869, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 910, 953, 966, 967, 968, 1014, 1015, 1049, 1101, 1102, 1128, 1145], "dtm": [33, 278, 343, 807, 868], "2023": [33, 103, 129, 190, 278, 343, 643, 656, 807, 868], "num": [33, 242, 278, 408, 594, 694, 934, 1145], "500": [33, 189, 248, 278, 724, 777, 804, 883, 885, 893, 1035, 1036, 1038, 1145], "val": [33, 214, 278, 319, 477, 507, 605, 684, 694, 758, 804, 840], "10_000": [33, 278], "20_000": [33, 278], "30_000": [33, 278], "increas": [33, 71, 107, 119, 278, 334, 694, 858, 1145], "b4": [33, 278], "light": [33, 278], "twice": [33, 112, 278], "titl": [33, 56, 278], "explicit": [33, 109, 121, 135, 248, 278, 669, 777, 804], "integr": [33, 278, 1153], "multi_fram": [33, 278], "wb": [33, 278], "coordin": [33, 278], "advanc": [33, 112, 207, 278, 465, 997, 1153], "min_color": [33, 278], "76933c": [33, 278], "mid_color": [33, 278], "c4d79b": [33, 278], "max_color": [33, 278], "ebf1d": [33, 278], "data_bar_2010": [33, 278], "bar_color": [33, 278], "9bbb59": [33, 278], "bar_negative_color_sam": [33, 278], "bar_negative_border_color_sam": [33, 278], "000": [33, 278, 1153], "white": [33, 278], "w": [33, 58, 59, 174, 177, 218, 278, 554, 559, 561, 616, 618, 731, 734, 804, 807, 1069, 1074, 1076, 1097], "get_worksheet_by_nam": [33, 278], "fmt_titl": [33, 278], "add_format": [33, 278], "4f6228": [33, 278], "font_siz": [33, 278], "12": [33, 71, 103, 136, 137, 148, 174, 192, 215, 249, 278, 287, 332, 341, 343, 347, 351, 359, 361, 362, 363, 366, 367, 368, 370, 377, 378, 379, 504, 513, 522, 532, 540, 554, 589, 626, 634, 637, 638, 639, 640, 641, 642, 658, 681, 682, 694, 709, 729, 731, 736, 740, 743, 756, 759, 767, 772, 784, 804, 807, 866, 868, 890, 899, 906, 1005, 1044, 1069, 1104, 1145, 1153], "ital": [33, 278], "customis": [33, 278], "trend": [33, 278], "win_loss": [33, 278], "subtl": [33, 278], "tone": [33, 278], "hidden": [33, 278], "id": [33, 79, 123, 244, 264, 278, 521, 571, 572, 609, 694, 792, 1032, 1131, 1145, 1153], "q1": [33, 278], "55": [33, 73, 278], "20": [33, 137, 162, 182, 183, 200, 206, 208, 212, 213, 278, 300, 301, 302, 337, 370, 377, 403, 407, 507, 525, 526, 528, 649, 656, 681, 694, 750, 753, 804, 807, 861, 906, 1145], "35": [33, 278, 337, 694, 861, 1145], "q2": [33, 278], "30": [33, 162, 174, 182, 206, 212, 213, 235, 253, 278, 300, 301, 302, 337, 343, 348, 351, 359, 361, 362, 368, 369, 370, 377, 378, 403, 540, 656, 681, 694, 731, 753, 780, 804, 807, 861, 868, 873, 891, 898, 899, 906, 1145, 1153], "15": [33, 129, 136, 174, 183, 195, 215, 278, 334, 337, 351, 359, 363, 370, 377, 507, 522, 532, 634, 670, 681, 694, 731, 759, 804, 858, 861, 899, 906, 1145], "60": [33, 162, 278, 371, 372, 532, 586, 694, 896, 900, 901, 1101], "q3": [33, 278], "40": [33, 162, 206, 278, 370, 377, 403, 589, 694, 753, 804, 879, 906, 1104], "80": [33, 278], "q4": [33, 278], "75": [33, 155, 278, 289, 502, 511, 525, 526, 527, 528, 531, 532, 533, 659, 694, 860, 930, 1023, 1145, 1153], "account": [33, 103, 110, 123, 278, 366, 385, 386, 387, 694, 895, 914, 915, 916, 1145], "flavour": [33, 109, 278], "integer_dtyp": [33, 221, 278, 761, 804, 807], "0_": [33, 278], "just": [33, 121, 199, 278, 749, 804], "unifi": [33, 278, 807], "multi": [33, 107, 108, 278, 388, 559, 694, 1074], "2_color_scal": [33, 278], "95b3d7": [33, 278], "ffffff": [33, 278], "standardis": [33, 278], "z": [33, 58, 79, 103, 135, 137, 160, 185, 187, 191, 199, 217, 218, 247, 278, 285, 287, 289, 319, 403, 433, 474, 477, 502, 509, 517, 560, 586, 588, 598, 616, 618, 636, 661, 665, 670, 678, 694, 739, 749, 768, 804, 807, 840, 922, 1075, 1101, 1103, 1145, 1152], "score": [33, 278], "conjunct": [33, 80, 112, 118, 278], "a123": [33, 278], "b345": [33, 278], "c567": [33, 278], "d789": [33, 278], "e101": [33, 278], "45": [33, 129, 215, 278, 343, 351, 359, 370, 377, 522, 532, 554, 560, 622, 623, 656, 681, 694, 759, 804, 807, 868, 899, 906, 1069, 1075, 1153], "85": [33, 278, 1153], "font": [33, 278], "consola": [33, 278], "standard": [33, 230, 239, 278, 354, 386, 531, 545, 550, 563, 675, 690, 694, 770, 804, 879, 915, 1060, 1064, 1078, 1145, 1153], "stdev": [33, 278], "ipccompress": [34, 35, 278], "arrow": [34, 35, 51, 96, 97, 109, 110, 113, 115, 124, 189, 217, 218, 234, 236, 278, 804, 1121, 1126, 1145], "ipc": [34, 35, 51, 113, 114, 115, 124, 127, 278, 705, 804], "feather": [34, 113, 124, 278, 705], "access": [34, 72, 73, 74, 75, 123, 126, 145, 189, 216, 217, 278, 476, 561, 694, 782, 804, 1076, 1153], "doc": [34, 35, 110, 154, 278], "python": [34, 35, 55, 97, 107, 108, 109, 129, 145, 189, 195, 217, 218, 236, 264, 278, 292, 343, 473, 475, 477, 561, 638, 639, 641, 642, 681, 682, 684, 694, 699, 792, 814, 868, 880, 881, 882, 887, 1005, 1076, 1125, 1145], "lz4": [34, 35, 38, 51, 52, 278, 804], "zstd": [34, 35, 38, 51, 52, 278, 804], "batch": [35, 105, 108, 109, 115, 125, 127, 278, 715, 744, 745, 804], "pretti": [36, 278], "row_ori": [36, 278], "iobas": [36, 37, 116, 117, 278, 490, 718, 756, 763, 784, 804], "serial": [36, 37, 278, 718, 784, 804], "represent": [36, 37, 238, 278, 319, 347, 351, 354, 355, 357, 359, 361, 364, 367, 368, 371, 378, 379, 381, 605, 694, 722, 742, 804, 840, 841, 872, 876, 878, 879, 883, 885, 888, 890, 893, 896, 897, 900, 907, 908, 910, 1124, 1128, 1145], "orient": [36, 72, 74, 100, 102, 278, 804], "slower": [36, 100, 102, 112, 173, 176, 195, 205, 249, 264, 278, 477, 659, 694, 730, 733, 792, 804, 1005, 1145], "common": [36, 71, 77, 78, 79, 248, 278, 474, 694, 699, 715, 716, 722, 724, 754, 767, 777, 804], "write_ndjson": [36, 278], "bit_set": [36, 278, 763, 804], "newlin": [37, 117, 125, 278], "delimit": [37, 50, 117, 125, 207, 237, 278, 551, 804, 1066, 1122, 1145], "parquetcompress": [38, 278], "compression_level": [38, 52, 278, 804], "statist": [38, 52, 107, 108, 119, 126, 155, 278, 386, 387, 424, 525, 526, 527, 528, 529, 530, 531, 532, 533, 545, 694, 804, 860, 915, 916, 957, 1040, 1060, 1145], "row_group_s": [38, 52, 278, 804], "use_pyarrow": [38, 107, 113, 115, 119, 278, 1125, 1126, 1145], "pyarrow_opt": [38, 111, 119, 122, 278], "parquet": [38, 52, 119, 120, 126, 278, 705, 804], "gzip": [38, 52, 278, 804], "lzo": [38, 52, 278, 804], "brotli": [38, 52, 278, 804], "choos": [38, 51, 52, 174, 207, 278, 731, 804], "good": [38, 51, 52, 189, 278, 804], "perform": [38, 51, 52, 71, 87, 97, 107, 108, 109, 113, 119, 121, 124, 125, 126, 145, 149, 173, 174, 175, 176, 177, 178, 192, 195, 210, 215, 218, 243, 264, 278, 292, 477, 503, 522, 564, 565, 586, 587, 588, 694, 710, 731, 732, 734, 735, 740, 759, 769, 774, 783, 804, 1005, 1079, 1080, 1101, 1102, 1103, 1145], "fast": [38, 51, 52, 138, 140, 278, 391, 537, 694, 804, 920, 1050, 1145, 1153], "decompress": [38, 51, 52, 278, 804], "backward": [38, 52, 164, 192, 278, 309, 363, 393, 694, 726, 740, 804, 892, 922, 1145], "guarante": [38, 52, 97, 107, 108, 245, 278, 724, 775, 804, 927, 1145], "deal": [38, 52, 189, 278, 288, 290, 369, 370, 377, 514, 586, 588, 615, 617, 640, 694, 804, 811, 812, 898, 899, 906, 1025, 1101, 1103, 1145], "older": [38, 52, 278, 804], "reader": [38, 52, 105, 107, 108, 113, 115, 119, 278, 706, 804], "higher": [38, 52, 209, 270, 278, 512, 529, 668, 694, 755, 798, 804, 1024, 1039, 1145], "mean": [38, 52, 107, 108, 113, 119, 121, 155, 164, 173, 174, 192, 207, 215, 249, 257, 278, 366, 370, 377, 390, 393, 522, 525, 526, 527, 528, 529, 531, 532, 533, 545, 559, 626, 638, 639, 641, 642, 643, 681, 682, 684, 694, 726, 730, 731, 740, 744, 745, 759, 785, 804, 860, 895, 899, 906, 918, 922, 927, 1036, 1060, 1074, 1145], "smaller": [38, 52, 160, 278, 724, 804, 913, 1145], "disk": [38, 50, 51, 52, 113, 278, 767, 804], "11": [38, 52, 97, 129, 137, 215, 278, 287, 362, 363, 366, 370, 377, 407, 504, 514, 522, 524, 532, 546, 594, 614, 677, 682, 694, 715, 716, 736, 743, 754, 759, 772, 804, 807, 895, 899, 906, 1005, 1034, 1145], "22": [38, 52, 129, 136, 278, 347, 367, 370, 377, 379, 380, 524, 525, 526, 528, 531, 532, 533, 586, 694, 804, 807, 899, 906, 909, 1034, 1101, 1145, 1153], "comput": [38, 52, 77, 79, 84, 160, 173, 192, 240, 245, 257, 270, 278, 284, 294, 295, 296, 297, 298, 299, 305, 306, 307, 320, 325, 326, 327, 329, 330, 331, 332, 333, 338, 382, 389, 424, 438, 445, 450, 451, 452, 454, 455, 456, 457, 462, 466, 468, 469, 470, 493, 503, 504, 510, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 542, 543, 544, 545, 549, 603, 604, 611, 616, 618, 622, 623, 624, 630, 632, 644, 671, 672, 684, 694, 715, 730, 737, 739, 740, 775, 782, 785, 798, 804, 809, 815, 816, 817, 818, 819, 820, 826, 827, 828, 843, 851, 852, 853, 854, 855, 856, 857, 862, 912, 913, 917, 957, 970, 977, 982, 983, 984, 986, 987, 988, 989, 994, 998, 1000, 1001, 1002, 1010, 1019, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1057, 1058, 1059, 1060, 1063, 1119, 1120, 1127, 1133, 1145], "512": [38, 109, 278, 508, 694, 1019, 1145], "implement": [38, 97, 109, 145, 195, 264, 278, 423, 477, 509, 598, 659, 694, 792, 1005, 1048, 1049, 1145], "v": [38, 58, 59, 160, 278, 536, 694, 1046, 1145], "At": [38, 278], "moment": [38, 154, 278, 424, 545, 694, 957, 1060, 1145], "write_t": [38, 278], "partition_col": [38, 110, 278], "write_to_dataset": [38, 278], "similar": [38, 141, 168, 192, 278, 373, 376, 503, 521, 684, 694, 724, 740, 804, 902, 905, 1032, 1145], "spark": [38, 278], "partit": [38, 110, 111, 119, 122, 126, 127, 190, 205, 278], "we": [38, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 126, 174, 192, 215, 249, 278, 366, 370, 377, 440, 475, 477, 522, 525, 526, 527, 528, 529, 531, 532, 533, 561, 570, 638, 639, 641, 642, 656, 681, 682, 684, 694, 718, 731, 740, 744, 745, 756, 759, 804, 814, 895, 899, 906, 930, 972, 1005, 1076, 1085, 1145], "use_pyarrow_write_to_dataset": [38, 278], "first": [38, 71, 107, 108, 112, 121, 125, 130, 131, 132, 136, 146, 172, 174, 177, 180, 192, 194, 195, 202, 206, 207, 232, 237, 238, 244, 245, 249, 262, 278, 302, 304, 334, 363, 366, 370, 404, 411, 412, 428, 440, 443, 444, 465, 476, 486, 507, 536, 548, 559, 562, 563, 571, 572, 627, 633, 647, 651, 684, 694, 715, 731, 734, 736, 740, 743, 753, 775, 782, 790, 804, 807, 823, 858, 860, 892, 895, 899, 929, 939, 940, 959, 972, 975, 976, 997, 1004, 1046, 1074, 1076, 1077, 1078, 1086, 1087, 1116, 1124, 1145, 1153], "watermark": [38, 278], "partitioned_object": [38, 278], "calendar": [40, 41, 174, 192, 215, 249, 278, 354, 366, 370, 377, 381, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 643, 681, 682, 694, 731, 740, 759, 804, 879, 895, 899, 906, 910], "time_unit": [41, 43, 342, 343, 350, 375, 380, 588, 638, 639, 640, 641, 642, 643, 649, 807, 867, 868, 875, 904, 909, 1103], "time_zon": [41, 344, 369, 377, 588, 638, 639, 640, 641, 642, 807, 866, 869, 874, 898, 906, 1103], "timezon": [41, 807], "m": [41, 43, 59, 191, 278, 341, 342, 343, 349, 350, 373, 375, 376, 380, 559, 586, 587, 588, 591, 638, 639, 640, 641, 642, 643, 649, 739, 804, 807, 866, 867, 868, 874, 875, 902, 904, 905, 909, 1074, 1101, 1102, 1103, 1106], "zoneinfo": [41, 807], "run": [41, 50, 51, 52, 77, 78, 138, 140, 173, 176, 193, 195, 207, 222, 245, 254, 264, 278, 292, 334, 440, 477, 520, 521, 565, 673, 694, 715, 716, 722, 724, 730, 733, 744, 745, 749, 754, 762, 767, 775, 781, 804, 807, 858, 972, 1005, 1031, 1032, 1080, 1145, 1152, 1153], "available_timezon": [41, 807], "check": [41, 107, 108, 121, 130, 131, 132, 133, 142, 169, 174, 175, 177, 178, 186, 188, 191, 215, 278, 310, 313, 314, 408, 413, 434, 522, 552, 557, 579, 694, 731, 732, 734, 735, 739, 744, 745, 759, 804, 830, 833, 834, 935, 937, 941, 942, 944, 951, 952, 953, 955, 956, 966, 1047, 1067, 1072, 1094, 1145], "128": [42, 73, 1019, 1145], "bit": [42, 44, 45, 46, 47, 48, 49, 65, 66, 67, 68, 516, 552, 694, 1027, 1067, 1145], "neg": [42, 128, 174, 175, 177, 178, 180, 194, 215, 225, 226, 228, 232, 278, 458, 459, 507, 522, 538, 539, 546, 575, 694, 731, 732, 734, 735, 759, 765, 766, 768, 783, 804, 929, 959, 990, 991, 1052, 1053, 1061, 1090, 1116, 1145], "scale": [42, 160, 278, 477, 507, 589, 694, 913, 1104, 1145], "experiment": [42, 78, 127, 221, 247, 248, 253, 278, 334, 370, 477, 525, 526, 527, 528, 529, 531, 532, 533, 694, 716, 761, 780, 804, 842, 858, 899, 930, 1023, 1145], "progress": 42, "expect": [42, 88, 90, 95, 107, 109, 121, 477, 656, 694, 742, 744, 745, 804], "32": [44, 47, 66, 73, 188, 215, 278, 494, 522, 540, 694, 759, 804, 862, 896, 1019, 1039, 1145], "sign": [46, 47, 48, 49, 366, 516, 594, 694, 807, 895, 944, 1027, 1109, 1145], "maintain_ord": [50, 51, 52, 149, 173, 176, 205, 207, 243, 245, 249, 258, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 278, 286, 308, 467, 477, 601, 608, 631, 694, 710, 716, 722, 724, 730, 733, 754, 767, 769, 774, 775, 786, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 804, 829, 999, 1130, 1145], "type_coercion": [50, 51, 52, 77, 78, 715, 716, 722, 724, 754, 767, 804], "predicate_pushdown": [50, 51, 52, 77, 78, 715, 716, 722, 724, 744, 745, 754, 767, 804], "projection_pushdown": [50, 51, 52, 77, 78, 715, 716, 722, 724, 744, 745, 754, 767, 804], "simplify_express": [50, 51, 52, 77, 78, 715, 716, 722, 724, 754, 767, 804], "slice_pushdown": [50, 51, 52, 77, 78, 715, 716, 722, 724, 744, 745, 754, 767, 804], "no_optim": [50, 51, 52, 77, 78, 715, 716, 724, 744, 745, 754, 804], "evalu": [50, 51, 52, 163, 165, 192, 278, 289, 303, 334, 406, 429, 430, 465, 476, 502, 615, 617, 621, 625, 638, 639, 641, 642, 644, 653, 654, 667, 670, 676, 681, 682, 684, 685, 694, 715, 727, 737, 739, 740, 804, 824, 858, 961, 962, 1136, 1145], "queri": [50, 51, 52, 56, 58, 77, 78, 109, 110, 113, 121, 124, 125, 126, 162, 193, 206, 278, 475, 476, 477, 563, 694, 715, 716, 722, 724, 736, 743, 754, 767, 783, 787, 792, 804, 813, 919, 1005, 1078, 1145, 1152], "larger": [50, 51, 52, 630, 715, 804], "ram": [50, 51, 52, 804], "maintain": [50, 51, 52, 149, 243, 278, 308, 467, 536, 608, 694, 710, 769, 774, 804, 829, 999, 1046, 1130, 1145], "slightli": [50, 51, 52, 112, 804], "faster": [50, 51, 52, 109, 162, 239, 247, 278, 292, 477, 609, 694, 804, 813, 814, 919, 1005, 1145], "coercion": [50, 51, 52, 77, 78, 517, 694, 715, 716, 722, 724, 754, 767, 804], "optim": [50, 51, 52, 77, 78, 119, 121, 124, 125, 126, 189, 193, 206, 210, 217, 245, 278, 715, 716, 722, 724, 744, 745, 754, 767, 775, 783, 792, 804, 843, 1145], "predic": [50, 51, 52, 77, 78, 121, 124, 125, 126, 127, 165, 188, 216, 278, 394, 613, 647, 694, 715, 716, 722, 724, 727, 744, 745, 754, 757, 767, 783, 804, 923, 1048, 1049, 1145], "pushdown": [50, 51, 52, 77, 78, 715, 716, 722, 724, 744, 745, 754, 757, 767, 783, 804, 1048, 1049, 1145], "project": [50, 51, 52, 77, 78, 121, 123, 124, 125, 126, 292, 547, 548, 694, 715, 716, 722, 724, 744, 745, 754, 757, 763, 767, 804], "slice": [50, 51, 52, 72, 77, 78, 160, 180, 190, 232, 278, 444, 463, 477, 485, 487, 523, 525, 526, 527, 528, 529, 531, 532, 533, 694, 715, 716, 722, 724, 744, 745, 754, 767, 804, 913, 929, 976, 995, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1116, 1145], "turn": [50, 51, 52, 77, 78, 107, 108, 121, 592, 715, 716, 722, 724, 744, 745, 754, 804, 1107], "off": [50, 51, 52, 77, 78, 107, 108, 121, 715, 716, 722, 724, 744, 745, 754, 804], "certain": [50, 51, 52, 78, 86, 111, 122, 183, 249, 278, 715, 716, 754, 804, 1145], "lf": [50, 51, 52, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 782, 783, 804, 1152, 1153], "scan_csv": [50, 51, 52, 107, 108, 804], "my_larger_than_ram_fil": [50, 51, 52, 804], "data_pagesize_limit": [52, 804], "reduc": [52, 107, 108, 119, 121, 124, 125, 126, 265, 266, 268, 271, 540, 647, 694, 793, 794, 796, 799, 804, 1007, 1022, 1054, 1115, 1145], "pressur": [52, 107, 108, 119, 121, 125, 126, 540, 694, 804, 1054, 1145], "improv": [52, 113, 124, 804], "speed": [52, 292, 477, 694, 804, 1153], "page": [52, 113, 119, 124, 126, 278, 694, 705, 804, 1145], "arrai": [53, 96, 100, 107, 108, 119, 160, 234, 239, 240, 278, 305, 306, 307, 308, 322, 323, 324, 329, 330, 331, 332, 333, 433, 450, 451, 452, 453, 461, 469, 525, 526, 528, 532, 537, 644, 694, 804, 826, 827, 828, 829, 847, 848, 849, 854, 855, 856, 857, 862, 913, 965, 982, 983, 984, 985, 992, 993, 1001, 1002, 1035, 1036, 1038, 1041, 1042, 1043, 1050, 1055, 1121, 1126, 1127, 1135, 1145], "integer_list": 53, "float_list": 53, "wrap": [55, 103, 408, 694], "arbitrari": [55, 137, 807], "eager": [56, 57, 58, 59, 60, 61, 174, 207, 247, 278, 342, 344, 347, 348, 350, 352, 355, 356, 358, 360, 362, 363, 365, 366, 367, 369, 370, 372, 375, 377, 379, 380, 525, 526, 528, 531, 532, 533, 621, 625, 638, 639, 641, 642, 649, 653, 654, 667, 670, 676, 681, 682, 685, 693, 694, 731, 745, 804, 866, 867, 869, 872, 873, 874, 875, 876, 877, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 904, 906, 907, 908, 1152], "against": [56, 109, 440, 804, 972, 1152, 1153], "eagerli": [56, 465], "unset": [56, 136, 369, 465, 898], "init": [56, 143], "eager_execut": [56, 1152], "itself": [56, 135, 477, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 671, 672, 694, 742, 804, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1145, 1152], "impact": [56, 174, 177, 278, 731, 734, 804, 1152], "declar": [56, 96, 98, 99, 100, 102, 109, 116, 117, 125, 278, 804], "godfath": 56, "1972": 56, "6_000_000": 56, "134_821_952": 56, "dark": 56, "knight": 56, "2008": 56, "185_000_000": 56, "533_316_061": 56, "schindler": 56, "1993": 56, "22_000_000": 56, "96_067_179": 56, "pulp": 56, "fiction": 56, "1994": 56, "8_000_000": 56, "107_930_000": 56, "shawshank": 56, "redempt": 56, "25_000_000": 56, "28_341_469": 56, "release_year": 56, "budget": 56, "gross": 56, "imdb_scor": 56, "ctx": [56, 57, 58, 59, 60, 61], "film": 56, "1990": 56, "BY": [56, 58], "desc": [56, 58], "AS": [56, 674, 1152], "decad": 56, "total_gross": 56, "n_film": 56, "2000": [56, 353, 355, 362, 363, 366, 371, 807, 878, 891, 892, 895, 900], "533316061": 56, "232338648": 56, "1970": [56, 127], "134821952": 56, "register_glob": [57, 59, 61, 1152], "register_mani": [57, 58, 61], "unregist": [57, 58, 59, 1152], "frame_data": [57, 60], "execut": [57, 58, 60, 62, 79, 109, 193, 278, 316, 440, 611, 694, 711, 744, 745, 754, 804, 972, 1133, 1145, 1152], "collect": [57, 58, 61, 74, 77, 78, 121, 122, 123, 127, 137, 139, 156, 158, 193, 207, 234, 245, 246, 278, 316, 388, 413, 477, 628, 645, 649, 676, 694, 708, 710, 712, 716, 718, 719, 720, 723, 724, 725, 726, 727, 728, 730, 731, 736, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 757, 758, 759, 761, 763, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 782, 783, 785, 786, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 807, 942, 1145, 1152, 1153], "global": [58, 62, 80, 81, 128, 137, 142, 239, 278, 476, 694, 839, 841, 1152], "scope": [58, 61, 143, 704, 807, 1152], "automat": [58, 61, 96, 98, 99, 100, 102, 103, 107, 108, 109, 110, 112, 116, 117, 121, 125, 137, 139, 141, 221, 253, 278, 316, 476, 581, 582, 583, 694, 761, 780, 804, 1004, 1096, 1097, 1098, 1145, 1152], "map": [58, 59, 98, 99, 107, 108, 109, 110, 113, 114, 119, 120, 121, 124, 150, 159, 167, 189, 195, 211, 216, 217, 218, 235, 278, 370, 377, 474, 475, 476, 477, 503, 521, 611, 658, 694, 712, 721, 757, 804, 807, 860, 899, 906, 1004, 1005, 1032, 1133, 1145, 1152], "recent": [58, 130, 131, 132, 133, 504, 694, 1019, 1145, 1152], "df1": [58, 60, 61, 71, 79, 130, 131, 162, 169, 200, 240, 251, 278, 750, 804], "x": [58, 59, 71, 79, 97, 103, 107, 108, 110, 121, 135, 137, 145, 160, 182, 185, 187, 191, 199, 207, 217, 218, 247, 278, 285, 287, 289, 336, 383, 384, 398, 401, 402, 403, 426, 433, 446, 470, 472, 474, 475, 477, 492, 494, 498, 499, 502, 508, 509, 517, 521, 542, 545, 577, 597, 598, 605, 607, 614, 616, 618, 622, 623, 633, 634, 636, 647, 656, 658, 661, 665, 669, 678, 694, 739, 745, 749, 768, 804, 807, 841, 922, 955, 1005, 1057, 1060, 1092, 1128, 1145, 1152], "df2": [58, 60, 61, 71, 79, 130, 131, 162, 169, 240, 251, 278], "join": [58, 62, 71, 77, 78, 79, 81, 192, 248, 278, 407, 503, 694, 715, 716, 722, 724, 740, 754, 767, 777, 782, 804], "named_fram": [59, 1152], "lf1": [59, 61], "o": [59, 113, 124, 315, 334, 558, 606, 694, 835, 858, 1073, 1096, 1129, 1145], "lf2": [59, 61, 804], "p": [59, 73, 206, 278, 507, 676, 694, 753, 804], "q": [59, 218, 278, 676], "r": [59, 107, 108, 121, 507, 554, 558, 559, 560, 561, 571, 694, 807, 1069, 1073, 1074, 1075, 1076, 1086], "lf3": [59, 804], "lf4": [59, 804], "either": [59, 137, 188, 192, 193, 197, 205, 215, 216, 231, 239, 278, 511, 522, 586, 615, 624, 676, 694, 740, 742, 759, 804, 807, 1023, 1101, 1145, 1153], "tbl1": [59, 61], "tbl2": [59, 61], "tbl3": 59, "tbl4": 59, "statement": [60, 684], "hello_world": 60, "baz": [60, 183, 184, 207, 246, 278, 561, 576, 578, 690, 738, 776, 804, 807, 1076, 1093], "hello_data": 60, "foo_bar": [60, 481, 484, 576, 656], "registr": [61, 705], "lifetim": [61, 143, 704], "context": [61, 62, 80, 81, 141, 203, 260, 278, 286, 292, 316, 328, 394, 427, 440, 448, 475, 477, 485, 547, 548, 611, 619, 631, 646, 649, 655, 659, 670, 673, 693, 694, 704, 705, 782, 788, 804, 958, 972, 980, 1133, 1145, 1152], "manag": [61, 62, 80, 81, 704, 705, 1152], "often": [61, 143, 174, 175, 177, 178, 215, 278, 435, 436, 517, 522, 694, 731, 732, 734, 735, 759, 804, 967, 968], "want": [61, 78, 99, 162, 195, 203, 278, 322, 323, 324, 377, 394, 475, 476, 477, 521, 525, 526, 527, 528, 529, 531, 532, 533, 564, 633, 638, 647, 667, 670, 685, 694, 716, 736, 743, 804, 807, 813, 847, 848, 849, 906, 919, 1005, 1032, 1079, 1126, 1145], "df0": [61, 200, 278, 750, 804], "exit": [61, 62, 80, 143, 1152], "construct": [61, 62, 80, 81, 96, 98, 99, 100, 101, 102, 109, 278, 400, 476, 667, 670, 685, 690, 694, 718, 729, 756, 804, 839, 1145], "persist": 61, "through": [61, 97, 109, 690, 807, 1145], "tbl0": 61, "remain": [61, 107, 108, 121, 158, 160, 165, 278, 339, 340, 394, 439, 577, 578, 694, 720, 727, 744, 745, 804, 863, 864, 913, 923, 971, 1092, 1093, 1145], "text": [61, 109, 564, 565, 571, 572, 674, 1079, 1080, 1153], "misc": 61, "testing1234": 61, "test1": 61, "test2": 61, "test3": 61, "disabl": [62, 80, 81, 189, 278, 715, 804], "cach": [62, 77, 78, 80, 81, 113, 121, 124, 126, 130, 131, 132, 133, 142, 476, 525, 526, 527, 528, 529, 531, 532, 533, 586, 587, 588, 591, 694, 704, 715, 716, 722, 724, 754, 767, 804, 839, 1101, 1102, 1103, 1106], "under": [62, 72, 73, 74, 75, 80, 81, 686, 687, 689, 690, 695, 696, 700, 701, 702, 1137, 1139, 1141, 1146, 1149, 1150, 1151], "physic": [62, 81, 107, 108, 192, 278, 319, 322, 323, 324, 605, 694, 711, 739, 740, 804, 840, 841, 847, 848, 849, 1128, 1145], "equal": [62, 81, 107, 108, 109, 121, 130, 131, 132, 133, 149, 169, 174, 177, 192, 200, 243, 278, 316, 335, 383, 384, 401, 426, 465, 499, 511, 517, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 567, 573, 594, 671, 672, 690, 694, 710, 731, 734, 740, 750, 769, 774, 804, 859, 997, 1023, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1047, 1082, 1088, 1109, 1145, 1153], "concaten": [62, 79, 80, 81, 168, 206, 278, 507, 628, 629, 694, 753, 804, 845, 1011, 1145], "introduc": [62, 81, 586, 587, 588, 1101, 1102, 1103], "overhead": [62, 81, 121, 124, 125, 126], "amount": [62, 81, 292, 477, 643, 694], "depend": [62, 76, 81, 109, 129, 431, 432, 477, 485, 511, 514, 643, 646, 649, 655, 694, 963, 964, 1023, 1025, 1145, 1153], "categori": [62, 81, 237, 278, 318, 319, 335, 511, 694, 838, 840, 859, 930, 1023, 1145], "clear": [62, 80, 152, 278, 714, 804, 850, 1145], "outermost": 62, "s1": [62, 80, 81, 132, 133, 168, 278, 956, 997, 1127, 1136, 1145], "color": [62, 80, 81, 264, 310, 312, 313, 314, 611, 694, 792, 1133, 1145], "red": [62, 80, 81, 264, 611, 694, 792, 1133, 1145], "green": [62, 80, 81, 264, 611, 694, 792, 1133, 1145], "blue": [62, 80, 81, 310, 312, 313, 314, 611, 694, 1133, 1145], "concat": [62, 80, 81, 108, 845, 1011, 1145], "cat": [62, 80, 81, 238, 278, 335, 511, 552, 554, 590, 593, 605, 629, 689, 694, 807, 859, 930, 1023, 1067, 1069, 1105, 1108, 1141, 1145], "decor": [62, 72, 73, 74, 75, 137, 139, 195, 278, 477, 694, 704, 705, 1005, 1145], "dure": [62, 107, 108, 121, 143, 162, 278, 813, 919, 1145], "afterward": [62, 684], "construct_categor": 62, "composit": [63, 136, 1153], "schemadict": [63, 96, 98, 99, 100, 101, 102, 107, 109, 110, 112, 118, 121, 220, 278, 676, 744, 745, 760, 787, 792, 804], "struct_seri": [63, 792], "dai": [64, 174, 177, 190, 192, 215, 249, 278, 362, 363, 366, 367, 370, 377, 379, 522, 525, 526, 527, 528, 529, 531, 532, 533, 637, 638, 639, 640, 641, 642, 643, 681, 682, 694, 731, 734, 740, 759, 804, 807, 891, 892, 895, 896, 899, 906, 908], "static": [69, 787, 792], "utf": 70, "frametyp": [71, 1152], "joinstrategi": [71, 191, 278, 739, 804], "outer": [71, 79, 191, 248, 278, 739, 777, 804], "descend": [71, 149, 223, 229, 243, 278, 302, 460, 514, 537, 547, 548, 611, 624, 694, 710, 764, 769, 774, 804, 823, 952, 992, 1025, 1050, 1062, 1133, 1145], "fill": [71, 79, 151, 163, 164, 226, 247, 278, 309, 330, 333, 392, 393, 399, 407, 525, 526, 528, 532, 539, 567, 573, 594, 648, 667, 670, 685, 694, 725, 726, 766, 782, 804, 921, 922, 933, 1016, 1035, 1036, 1038, 1041, 1042, 1043, 1053, 1082, 1088, 1109, 1145], "sort": [71, 72, 130, 131, 136, 149, 174, 175, 177, 178, 192, 200, 206, 207, 215, 223, 243, 249, 262, 272, 278, 302, 319, 394, 477, 503, 522, 526, 527, 528, 529, 531, 533, 537, 548, 611, 613, 624, 659, 694, 710, 722, 731, 732, 734, 735, 740, 750, 753, 754, 759, 764, 767, 774, 790, 800, 804, 807, 823, 840, 952, 1050, 1130, 1133, 1145, 1153], "origin": [71, 107, 108, 121, 158, 165, 245, 278, 339, 340, 369, 394, 423, 439, 476, 503, 516, 517, 518, 553, 554, 559, 563, 567, 573, 594, 622, 623, 694, 720, 727, 775, 804, 859, 863, 864, 898, 923, 971, 1004, 1023, 1029, 1068, 1069, 1074, 1078, 1082, 1088, 1109, 1145], "In": [71, 78, 109, 111, 122, 123, 126, 137, 139, 143, 160, 162, 174, 175, 177, 178, 195, 203, 215, 239, 278, 477, 522, 638, 694, 716, 731, 732, 734, 735, 759, 804, 813, 913, 919, 1026, 1145], "duplic": [71, 85, 185, 191, 192, 245, 248, 278, 287, 409, 423, 511, 694, 739, 740, 775, 777, 804, 936, 1023, 1145], "behaviour": [71, 79, 158, 278, 552, 559, 560, 571, 607, 694, 720, 804, 1067, 1074, 1075, 1086], "suitabl": [71, 79, 109, 135, 195, 278, 477, 536, 694, 1005, 1046, 1145, 1153], "get": [71, 78, 104, 114, 120, 127, 141, 149, 153, 159, 167, 170, 171, 174, 175, 177, 178, 180, 181, 185, 187, 188, 194, 202, 207, 215, 216, 220, 224, 228, 232, 243, 252, 262, 272, 278, 286, 300, 301, 302, 304, 308, 318, 329, 330, 331, 332, 333, 350, 395, 404, 422, 425, 428, 442, 447, 467, 478, 479, 480, 485, 487, 491, 496, 497, 505, 506, 512, 520, 522, 546, 550, 599, 600, 608, 612, 638, 646, 651, 655, 659, 660, 661, 662, 663, 664, 665, 675, 679, 683, 694, 710, 716, 717, 721, 728, 731, 732, 734, 735, 736, 741, 743, 759, 760, 768, 772, 774, 779, 790, 800, 804, 821, 822, 823, 824, 825, 829, 838, 845, 854, 855, 856, 857, 875, 926, 929, 934, 936, 954, 959, 974, 979, 999, 1006, 1008, 1009, 1011, 1014, 1015, 1020, 1021, 1024, 1031, 1061, 1064, 1116, 1121, 1122, 1130, 1134, 1135, 1145], "speedup": [71, 189, 195, 278, 477, 694, 1005, 1145], "receiv": [71, 109, 121, 195, 206, 264, 278, 477, 507, 694, 753, 804, 1153], "now": [71, 215, 278, 316, 694, 759, 804, 1103], "One": [71, 155, 203, 207, 278, 289, 502, 674, 694, 807, 860, 1145], "whose": [71, 192, 207, 278, 388, 645, 694, 740, 804], "uniqu": [71, 134, 135, 136, 139, 147, 148, 187, 191, 203, 207, 218, 269, 278, 293, 304, 335, 422, 495, 511, 586, 587, 588, 591, 609, 611, 620, 666, 694, 708, 709, 739, 797, 804, 825, 859, 860, 954, 1012, 1023, 1101, 1102, 1103, 1106, 1131, 1133, 1145], "post": 71, "constrain": [71, 158, 278, 720, 804], "newli": 71, "boolean": [71, 149, 165, 168, 193, 229, 243, 278, 288, 289, 290, 310, 313, 314, 353, 394, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 429, 430, 434, 500, 502, 505, 506, 548, 562, 613, 614, 624, 625, 676, 684, 694, 710, 714, 727, 742, 769, 774, 804, 807, 811, 812, 824, 830, 832, 878, 923, 934, 935, 936, 938, 939, 940, 942, 943, 945, 946, 947, 948, 949, 950, 954, 961, 962, 966, 1017, 1020, 1021, 1048, 1067, 1126, 1136, 1145], "know": [71, 109, 207, 278, 465, 1126, 1135, 1145], "2022": [71, 150, 155, 172, 174, 192, 215, 249, 278, 343, 351, 359, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 586, 638, 639, 641, 642, 643, 649, 681, 682, 694, 712, 731, 740, 759, 804, 807, 868, 879, 895, 899, 906, 1101], "y": [71, 79, 97, 103, 135, 137, 145, 160, 185, 187, 191, 199, 207, 217, 218, 247, 278, 285, 287, 289, 373, 376, 383, 384, 401, 402, 426, 433, 446, 472, 474, 477, 498, 499, 502, 509, 517, 521, 586, 587, 588, 598, 607, 614, 616, 618, 622, 623, 636, 643, 656, 661, 665, 678, 694, 739, 749, 768, 804, 807, 841, 902, 905, 1101, 1102, 1103], "df3": [71, 278], "set_tbl_format": 71, "09": [71, 129, 137, 215, 278, 343, 362, 363, 522, 589, 638, 682, 694, 759, 804, 807, 1104], "01": [71, 137, 150, 155, 172, 174, 215, 249, 278, 341, 342, 343, 344, 348, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 381, 522, 525, 526, 528, 531, 532, 533, 586, 587, 588, 591, 638, 639, 641, 643, 694, 712, 731, 759, 804, 807, 867, 868, 869, 870, 871, 873, 875, 876, 877, 882, 883, 884, 886, 888, 889, 891, 892, 893, 894, 895, 898, 899, 901, 902, 903, 904, 905, 906, 909, 1101, 1102, 1103, 1106], "02": [71, 150, 172, 174, 192, 215, 249, 278, 342, 343, 350, 352, 360, 362, 363, 366, 369, 370, 372, 375, 377, 380, 522, 525, 526, 527, 528, 529, 531, 532, 533, 534, 586, 587, 588, 591, 638, 639, 641, 642, 643, 681, 682, 694, 712, 731, 740, 759, 804, 807, 867, 868, 870, 871, 875, 876, 877, 882, 883, 888, 889, 891, 892, 893, 895, 898, 899, 901, 903, 904, 906, 997, 1101, 1102, 1103, 1106], "03": [71, 103, 150, 174, 215, 249, 278, 342, 343, 344, 348, 350, 352, 360, 362, 363, 366, 369, 370, 371, 372, 373, 375, 376, 377, 380, 522, 525, 526, 528, 531, 532, 533, 587, 591, 638, 639, 641, 643, 694, 712, 731, 759, 804, 867, 868, 869, 873, 875, 876, 877, 882, 883, 889, 891, 892, 893, 898, 899, 901, 902, 904, 905, 1102, 1106], "af1": 71, "af2": 71, "af3": 71, "keep": [71, 107, 108, 121, 245, 248, 249, 278, 423, 476, 627, 694, 775, 777, 804, 1004, 1145], "easili": [71, 109, 221, 253, 257, 278, 676, 761, 780, 785, 804], "dot": [71, 694, 767, 804, 1145], "product": [71, 154, 278, 332, 338, 694, 724, 804, 856, 862, 1145], "fill_nul": [71, 163, 278, 694, 725, 782, 804, 1145], "sum_horizont": [71, 677], "167": 71, "47": 71, "callabl": [72, 73, 74, 75, 121, 146, 168, 195, 206, 259, 264, 278, 292, 465, 473, 474, 475, 477, 507, 523, 524, 619, 633, 634, 647, 657, 658, 659, 669, 694, 744, 745, 753, 787, 792, 804, 814, 997, 1005, 1033, 1034, 1145], "by_first_letter_of_column_nam": 72, "f": [72, 108, 155, 172, 190, 234, 244, 247, 278, 285, 465, 540, 558, 586, 588, 619, 628, 657, 694, 997, 1073, 1101, 1103], "fromkei": [72, 74], "by_first_letter_of_column_valu": 72, "starts_with": [72, 310, 313, 552, 557, 807, 1072], "to_seri": [72, 170, 278, 586, 625, 670, 1101], "xx": [72, 74, 136, 139, 807], "xy": [72, 74], "yy": [72, 74, 136, 139, 807], "yz": [72, 74], "b1": [72, 74], "b2": [72, 74], "pow_n": 73, "powersofn": 73, "next": [73, 174, 192, 215, 249, 278, 309, 366, 370, 377, 514, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906, 1025, 1145], "ceil": [73, 694, 1145], "previou": [73, 143, 504, 509, 596, 598, 694, 813, 1019, 1145], "floor": [73, 694, 1145], "nearest": [73, 192, 209, 270, 278, 321, 397, 407, 512, 529, 668, 694, 740, 755, 798, 804, 844, 925, 933, 1024, 1039, 1145], "24": [73, 129, 160, 174, 192, 195, 215, 249, 278, 332, 334, 347, 352, 366, 367, 370, 377, 379, 494, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 643, 681, 682, 694, 731, 740, 759, 804, 858, 877, 895, 899, 906, 956, 1145], "001": [73, 355, 356, 358, 365, 643, 884, 886, 894], "next_pow2": 73, "prev_pow2": 73, "nearest_pow2": 73, "split_by_column_dtyp": 74, "collect_al": [74, 78, 715, 716, 804], "31": [75, 137, 343, 347, 348, 351, 359, 362, 366, 586, 637, 638, 640, 649, 656, 807, 866, 868, 872, 873, 891, 1101, 1153], "42": [75, 179, 200, 215, 278, 522, 694, 750, 759, 804, 928, 1145], "961": 75, "1764": 75, "4160": 75, "build": [76, 97, 807, 1153], "wa": [76, 130], "compil": [76, 431, 432, 963, 964], "gate": 76, "info": [76, 111, 122, 123, 129], "otherwis": [76, 109, 112, 136, 141, 195, 200, 218, 221, 264, 278, 311, 322, 323, 324, 335, 385, 386, 387, 465, 477, 485, 507, 511, 516, 526, 527, 528, 529, 531, 533, 552, 555, 615, 659, 684, 694, 750, 761, 792, 804, 831, 847, 848, 849, 859, 914, 915, 916, 997, 1005, 1023, 1027, 1048, 1049, 1067, 1070, 1145], "host": [76, 107, 113, 115, 119, 124], "git": 76, "lazy_fram": [77, 78], "comm_subplan_elim": [77, 78, 715, 716, 722, 724, 754, 767, 804], "comm_subexpr_elim": [77, 78, 316, 694, 715, 716, 722, 724, 754, 767, 804], "graph": [77, 193, 278, 715, 737, 782, 804], "parallel": [77, 79, 105, 110, 119, 126, 174, 177, 192, 193, 206, 222, 254, 278, 334, 440, 611, 684, 694, 705, 731, 734, 739, 740, 762, 781, 792, 804, 858, 972, 1133, 1145], "threadpool": [77, 141], "Will": [77, 78, 715, 716, 722, 724, 754, 767, 804, 1145], "try": [77, 78, 91, 93, 107, 108, 113, 119, 121, 124, 126, 715, 716, 722, 724, 754, 767, 804], "branch": [77, 78, 715, 716, 722, 724, 754, 767, 804], "subplan": [77, 78, 715, 716, 722, 724, 754, 767, 804], "union": [77, 78, 79, 457, 715, 716, 722, 724, 754, 767, 804, 807, 989], "subexpress": [77, 78, 715, 716, 722, 724, 754, 767, 804], "reus": [77, 78, 715, 716, 722, 724, 754, 767, 804], "part": [77, 78, 96, 112, 137, 560, 577, 578, 716, 722, 724, 754, 767, 782, 804, 1075, 1092, 1093], "fashion": [77, 78, 191, 278, 716, 722, 724, 754, 767, 804], "alpha": [77, 78, 292, 385, 386, 387, 694, 715, 716, 722, 724, 754, 767, 804, 914, 915, 916, 1145], "gevent": [78, 129, 716, 804], "_geventdataframeresult": [78, 716, 804], "await": [78, 716, 804], "asynchron": [78, 716, 804], "them": [78, 96, 98, 99, 100, 102, 116, 117, 118, 121, 125, 126, 161, 162, 174, 192, 200, 215, 249, 278, 408, 446, 496, 497, 503, 522, 628, 638, 639, 641, 642, 681, 682, 694, 716, 723, 731, 740, 750, 759, 804, 807, 813, 919, 978, 1014, 1015, 1145], "schedul": [78, 716, 804], "insid": [78, 716, 804], "almost": [78, 195, 264, 278, 586, 587, 588, 716, 804, 1005, 1101, 1102, 1103, 1145], "instantli": [78, 716, 804], "asyncio": [78, 716, 804], "releas": [78, 292, 477, 694, 716, 804, 1153], "greenlet": [78, 716, 804], "task": [78, 716, 804], "being": [78, 107, 108, 109, 121, 127, 150, 161, 237, 247, 248, 278, 292, 334, 370, 525, 526, 527, 528, 529, 531, 532, 533, 644, 694, 712, 716, 723, 724, 804, 842, 858, 899, 930, 1023, 1145, 1153], "wrapper": [78, 716, 804], "event": [78, 716, 804], "asyncresult": [78, 716, 804], "timeout": [78, 716, 804], "break": [78, 127, 247, 248, 278, 292, 334, 335, 370, 525, 526, 527, 528, 529, 531, 532, 533, 694, 716, 804, 842, 858, 859, 899, 930, 1023, 1145], "collect_async": [78, 804], "set_except": [78, 716, 804], "futur": [78, 145, 638, 716, 804], "rerais": [78, 716, 804], "item": [79, 108, 172, 216, 219, 278, 390, 434, 443, 446, 535, 578, 694, 918, 966, 975, 978, 1045, 1093, 1145], "iter": [79, 96, 109, 138, 140, 149, 165, 173, 174, 175, 176, 177, 178, 189, 190, 215, 216, 217, 218, 221, 222, 223, 229, 243, 244, 253, 254, 256, 257, 278, 334, 503, 548, 616, 618, 624, 627, 628, 629, 636, 661, 665, 673, 676, 678, 690, 694, 710, 727, 730, 731, 732, 733, 734, 735, 759, 761, 762, 764, 769, 774, 780, 781, 785, 804, 858, 1145, 1153], "polarstyp": 79, "concatmethod": 79, "vertic": [79, 162, 247, 251, 278, 551, 1066], "rechunk": [79, 96, 101, 107, 108, 113, 115, 119, 121, 124, 125, 126, 162, 278, 694, 813, 845, 919, 1011, 1145], "combin": [79, 91, 93, 165, 174, 179, 192, 215, 249, 278, 289, 303, 377, 502, 522, 568, 574, 580, 581, 582, 583, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 767, 804, 899, 906, 1083, 1089, 1095, 1096, 1097, 1098], "vertical_relax": 79, "diagon": [79, 244, 278], "vstack": [79, 162, 278], "addition": [79, 216, 278], "coerc": [79, 517, 694], "supertyp": [79, 164, 278, 291, 694, 726, 804], "mismatch": [79, 91, 117, 130, 132], "find": [79, 166, 278, 536, 694, 1046, 1145], "miss": [79, 107, 108, 121, 163, 278, 309, 385, 386, 387, 399, 417, 419, 694, 725, 804, 914, 915, 916, 1135, 1145], "diagonal_relax": 79, "stack": [79, 182, 251, 278], "don": [79, 174, 195, 245, 247, 278, 292, 334, 440, 477, 503, 694, 731, 775, 804, 807, 858, 972, 1005, 1047, 1135, 1145], "auto": [79, 96, 98, 99, 100, 102, 116, 117, 119, 125, 126, 244, 278, 804, 1153], "logic": [79, 195, 264, 278, 288, 290, 477, 605, 615, 617, 659, 694, 718, 729, 739, 756, 763, 784, 792, 804, 811, 812, 1005, 1128, 1145], "align_fram": 79, "pattern": [79, 107, 108, 121, 124, 125, 126, 189, 278, 483, 552, 553, 554, 559, 560, 561, 571, 572, 792, 807, 1048, 1049, 1067, 1068, 1069, 1074, 1075, 1076, 1086, 1087, 1145], "collis": 79, "need": [79, 103, 107, 108, 110, 133, 174, 175, 177, 178, 215, 218, 227, 239, 278, 465, 476, 522, 540, 589, 643, 667, 670, 685, 694, 731, 732, 734, 735, 759, 804, 1054, 1104, 1145, 1153], "sure": [79, 96, 101, 107, 108, 113, 115, 119, 174, 175, 177, 178, 210, 215, 278, 522, 694, 731, 732, 734, 735, 759, 804], "contigu": [79, 96, 101, 107, 108, 113, 115, 119, 121, 124, 125, 126, 210, 278], "relev": 79, "df_h1": 79, "l1": 79, "l2": 79, "df_h2": 79, "r1": 79, "r2": 79, "r3": 79, "df_d1": 79, "df_d2": 79, "df_a1": 79, "df_a2": 79, "df_a3": 79, "enable_string_cach": 80, "stringcach": [80, 81, 191, 278, 705, 839, 841], "reliabl": [80, 81], "wai": [80, 81, 96, 98, 99, 100, 102, 116, 117, 125, 173, 190, 206, 229, 257, 278, 503, 507, 548, 559, 690, 694, 730, 753, 769, 785, 792, 804, 1074], "until": [80, 193, 278], "deprec": [81, 82, 146, 148, 174, 175, 176, 177, 178, 259, 278, 292, 316, 369, 377, 411, 415, 418, 435, 438, 445, 449, 462, 466, 473, 523, 553, 566, 568, 569, 574, 580, 586, 588, 619, 626, 638, 640, 657, 670, 681, 694, 709, 729, 731, 732, 733, 734, 735, 744, 756, 784, 787, 804, 813, 814, 859, 898, 906, 939, 945, 967, 970, 977, 981, 994, 998, 1023, 1033, 1068, 1081, 1083, 1084, 1089, 1095, 1101, 1103, 1145], "sinc": [81, 111, 122, 146, 148, 149, 174, 175, 176, 177, 178, 243, 259, 278, 292, 316, 350, 369, 377, 411, 415, 418, 435, 438, 445, 449, 462, 466, 473, 523, 553, 566, 568, 569, 574, 580, 586, 588, 619, 626, 638, 640, 649, 657, 670, 681, 694, 709, 710, 729, 731, 732, 733, 734, 735, 744, 756, 769, 774, 784, 787, 804, 813, 814, 859, 875, 898, 906, 939, 945, 967, 970, 977, 981, 994, 998, 1023, 1033, 1068, 1081, 1083, 1084, 1089, 1095, 1101, 1103, 1145], "19": [81, 112, 129, 146, 174, 175, 176, 177, 178, 192, 215, 259, 278, 292, 369, 370, 377, 411, 415, 418, 435, 449, 473, 522, 523, 526, 528, 553, 566, 568, 569, 574, 580, 586, 588, 589, 619, 638, 640, 657, 694, 731, 732, 733, 734, 735, 740, 744, 759, 787, 804, 814, 859, 898, 899, 906, 939, 945, 967, 981, 1023, 1033, 1068, 1081, 1083, 1084, 1089, 1095, 1101, 1103, 1104, 1145], "longer": [81, 107, 121], "accept": [81, 106, 107, 108, 111, 113, 115, 119, 149, 173, 176, 221, 222, 229, 243, 253, 254, 257, 278, 285, 388, 408, 476, 503, 548, 614, 616, 618, 624, 627, 628, 629, 636, 645, 661, 665, 673, 676, 678, 684, 694, 710, 730, 733, 761, 762, 769, 774, 780, 781, 785, 804, 934, 1145], "disable_string_cach": 81, "finish": [84, 162, 278, 813, 919, 1145], "least": [88, 137, 504, 694, 1019, 1145], "unexpect": [89, 278, 475, 477, 694, 1005, 1145], "caus": [89, 97, 107, 108, 121, 130, 145, 162, 278, 813, 919, 1145], "panic": 89, "incompat": 93, "chunkedarrai": [96, 202, 278, 862, 1145], "recordbatch": [96, 190, 278], "schemadefinit": [96, 98, 99, 100, 102, 116, 117, 125, 278, 804], "schema_overrid": [96, 98, 99, 100, 101, 102, 109, 110, 112, 116, 117, 118, 190, 239, 278, 308, 804, 807, 829], "copi": [96, 97, 145, 151, 152, 190, 234, 239, 240, 253, 278, 391, 594, 694, 713, 714, 780, 804, 846, 850, 920, 1109, 1121, 1126, 1127, 1145], "closest": 96, "pair": [96, 98, 99, 100, 102, 116, 117, 125, 136, 211, 278, 757, 804, 1153], "sever": [96, 98, 99, 100, 102, 116, 117, 125, 278, 804, 1153], "form": [96, 98, 99, 100, 102, 116, 117, 125, 189, 217, 247, 278, 504, 694, 804, 1019, 1145], "dimens": [96, 98, 100, 102, 116, 117, 125, 278, 518, 694, 804, 1029, 1145], "supportsinterchang": 97, "allow_copi": [97, 145], "interchang": [97, 145], "__dataframe__": 97, "convers": [97, 112, 145, 189, 190, 217, 218, 236, 240, 278, 586, 587, 588, 591, 705, 927, 1101, 1102, 1103, 1106, 1125, 1126, 1127, 1145], "detail": [97, 109, 110, 130, 132, 145, 278, 804, 1153], "latest": [97, 111, 122, 145, 369, 370, 377, 399, 486, 586, 588, 640, 694, 898, 899, 906, 1101, 1103], "from_panda": 97, "from_arrow": 97, "effici": [97, 109, 112, 190, 278], "reli": 97, "therefor": [97, 160, 278, 477, 684, 694, 913, 1145], "becaus": [97, 117, 160, 174, 177, 193, 195, 247, 264, 278, 440, 731, 734, 792, 804, 814, 913, 972, 1005, 1145], "convert": [97, 101, 111, 112, 118, 122, 145, 235, 236, 237, 238, 239, 242, 278, 336, 344, 373, 376, 465, 474, 513, 561, 570, 586, 587, 588, 589, 591, 694, 729, 804, 841, 869, 902, 905, 997, 1076, 1085, 1101, 1102, 1103, 1104, 1106, 1114, 1124, 1125, 1126, 1127, 1135, 1145], "panda": [97, 101, 129, 174, 240, 278, 362, 363, 605, 694, 731, 804, 891, 892, 1127, 1128, 1145], "pd": [97, 101, 605, 694, 1127, 1128, 1145], "df_pd": 97, "dfi": [97, 145], "clone": [98, 99, 100, 101, 102, 151, 239, 240, 278, 713, 804, 846, 1125, 1126, 1127, 1135, 1145], "dimension": [98, 100, 102, 239, 278, 804, 1145], "infer_schema_length": [99, 102, 107, 108, 112, 121, 125, 278, 562, 804, 1077], "NOT": [99, 484, 1152], "typic": [99, 109, 195, 278, 349, 807, 874, 1005, 1145], "clearer": 99, "_partial_": [99, 278, 804], "omit": [99, 103, 135, 137, 139, 143, 203, 218, 278, 681, 682, 807], "mani": [99, 102, 109, 110, 162, 278, 562, 813, 919, 1077, 1145], "scan": [99, 102, 107, 108, 121, 122, 123, 124, 125, 126, 127, 174, 175, 177, 178, 215, 278, 522, 694, 724, 731, 732, 734, 735, 736, 743, 759, 804], "slow": [99, 102, 107, 108, 121, 292, 334, 477, 524, 694, 792, 858, 1034, 1145], "partial": [99, 107, 121], "present": [99, 137, 413, 694, 724, 804, 1135, 1145], "np": [100, 165, 239, 278, 601, 694, 727, 804, 938, 943, 947, 948, 1117, 1145], "ndarrai": [100, 165, 239, 278, 601, 694, 727, 804, 862, 1046, 1049, 1117, 1126, 1145], "numpi": [100, 129, 154, 189, 217, 218, 236, 239, 240, 278, 496, 497, 524, 694, 804, 938, 943, 947, 948, 1014, 1015, 1034, 1126, 1127, 1135, 1145], "columnar": [100, 102, 189, 217, 278], "interpret": [100, 102, 107, 108, 121, 278, 804], "yield": [100, 102, 107, 108, 109, 121, 160, 162, 244, 278, 503, 694, 804, 813, 913, 919, 1145], "conclus": [100, 102, 278, 804], "nan_to_nul": [101, 278, 804, 1145], "include_index": 101, "instal": [101, 107, 108, 110, 113, 115, 119, 129, 154, 239, 240, 278, 767, 804, 1127, 1145], "nan": [101, 130, 131, 132, 133, 137, 145, 163, 240, 278, 339, 340, 383, 384, 392, 401, 402, 407, 417, 419, 420, 421, 426, 472, 478, 491, 496, 497, 498, 499, 524, 607, 630, 694, 725, 804, 816, 820, 863, 864, 921, 947, 948, 1014, 1015, 1034, 1126, 1127, 1145, 1153], "pd_df": 101, "pd_seri": 101, "tbl": [103, 105, 108], "reconstruct": 103, "repr": [103, 137, 139], "trim": 103, "whitespac": [103, 568, 574, 580, 581, 582, 583, 1083, 1089, 1095, 1096, 1097, 1098], "prompt": 103, "extract": [103, 345, 347, 348, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 367, 368, 371, 372, 374, 378, 379, 381, 507, 560, 561, 562, 563, 694, 870, 871, 872, 873, 876, 877, 879, 883, 884, 885, 886, 888, 889, 890, 893, 894, 896, 897, 900, 901, 903, 907, 908, 910, 1075, 1076, 1077, 1078], "to_init_repr": [103, 278, 1145], "truncat": [103, 107, 121, 172, 174, 177, 189, 217, 218, 236, 278, 731, 734, 754, 804], "identifi": [103, 199, 205, 245, 278, 749, 775, 804], "compound": [103, 218, 278, 807], "struct": [103, 203, 221, 242, 246, 253, 278, 335, 465, 476, 511, 520, 521, 561, 562, 577, 578, 611, 633, 634, 636, 658, 694, 761, 776, 780, 792, 804, 859, 997, 1023, 1031, 1076, 1077, 1090, 1092, 1093, 1145], "neither": [103, 112, 118, 219, 278, 465, 997], "source_ac": 103, "source_cha": 103, "ident": [103, 151, 152, 278, 373, 520, 521, 694, 713, 714, 804, 846, 850, 902, 1031, 1032, 1145], "timestamp": [103, 174, 177, 278, 369, 649, 731, 734, 804, 898], "tor_id": 103, "nnel_id": 103, "\u03bc": [103, 137, 174, 189, 192, 215, 217, 218, 236, 249, 278, 341, 342, 343, 344, 348, 349, 351, 352, 355, 356, 358, 359, 360, 362, 363, 365, 366, 369, 370, 371, 372, 373, 376, 377, 380, 522, 525, 526, 528, 531, 532, 533, 586, 588, 641, 643, 649, 694, 731, 740, 759, 804, 807, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 882, 883, 884, 886, 888, 889, 891, 892, 893, 894, 895, 898, 899, 901, 903, 904, 906, 909, 1101, 1103], "asia": [103, 807, 870, 871, 903], "tokyo": [103, 807], "123456780": 103, "9876543210": 103, "56": [103, 603, 694], "59": [103, 136, 343, 351, 359, 371, 640, 680, 681, 682, 807, 868, 888, 900], "663053": 103, "jst": [103, 807], "803065983": 103, "2055938745": 103, "38": [103, 137], "18": [103, 148, 200, 215, 278, 316, 333, 370, 377, 380, 407, 423, 438, 445, 462, 466, 522, 626, 638, 681, 694, 709, 729, 750, 754, 756, 759, 784, 804, 807, 813, 909, 970, 977, 994, 998, 1103, 1145], "050545": 103, "source_actor_id": 103, "source_channel_id": 103, "to_list": [103, 215, 278, 1067, 1145], "datatypeclass": 104, "uint32": [104, 129, 150, 160, 278, 302, 347, 351, 355, 357, 359, 361, 364, 367, 368, 371, 378, 379, 431, 432, 448, 517, 553, 554, 564, 565, 601, 605, 694, 712, 804, 807, 824, 836, 872, 876, 883, 885, 888, 890, 893, 896, 897, 900, 907, 908, 913, 944, 963, 964, 980, 1047, 1068, 1069, 1079, 1080, 1128, 1145], "regular": [104, 189, 216, 217, 249, 278, 328, 388, 427, 448, 552, 553, 554, 559, 560, 561, 571, 572, 645, 694, 807, 958, 980, 1067, 1068, 1069, 1074, 1075, 1076, 1086, 1087, 1145], "uint64": [104, 179, 278, 403, 431, 432, 516, 694, 928, 963, 964, 1027, 1145], "bigidx": 104, "read": [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 162, 278, 400, 475, 684, 694, 718, 724, 729, 756, 804, 813, 919, 1145], "over": [105, 107, 108, 109, 111, 121, 137, 146, 162, 189, 190, 195, 216, 217, 218, 244, 256, 259, 264, 278, 292, 334, 393, 474, 475, 477, 485, 487, 488, 489, 514, 525, 526, 527, 528, 529, 531, 532, 533, 619, 633, 634, 647, 657, 658, 659, 669, 694, 787, 792, 807, 813, 814, 858, 919, 1005, 1035, 1036, 1038, 1042, 1145], "fetch": [105, 121, 193, 278, 713, 715, 736, 743, 804], "ideal": 105, "read_csv_batch": [105, 706], "tpch": [105, 108], "tables_scale_100": [105, 108], "lineitem": [105, 108, 110], "try_parse_d": [105, 107, 108, 121], "n_row": [106, 107, 108, 113, 115, 119, 121, 124, 125, 126, 190, 278, 724, 804], "handler": [106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 120, 718, 756, 804], "builtin": [106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 120, 718, 756, 804], "stop": [106, 107, 108, 113, 115, 119, 121, 124, 125, 126, 525, 526, 528, 531, 532, 533, 694, 867, 869, 875, 876, 883, 885, 888, 893, 899, 904], "textio": 107, "new_column": [107, 108, 112, 121, 212, 278], "comment_char": [107, 108, 121], "skip_row": [107, 108, 121], "missing_utf8_is_empty_str": [107, 108, 121], "ignore_error": [107, 108, 117, 121], "n_thread": [107, 108], "8192": 107, "csvencod": [107, 108, 121], "low_memori": [107, 108, 119, 121, 125, 126], "skip_rows_after_head": [107, 108, 121], "row_count_nam": [107, 108, 113, 115, 119, 121, 124, 125, 126], "row_count_offset": [107, 108, 113, 115, 119, 121, 124, 125, 126], "sample_s": [107, 108], "eol_char": [107, 108, 121], "raise_if_empti": [107, 108, 112, 118, 121], "truncate_ragged_lin": [107, 121], "fsspec": [107, 108, 113, 115, 119, 122, 123, 124, 126, 129], "remot": [107, 108, 113, 115, 119], "autogener": [107, 108, 121], "column_x": [107, 108, 121], "enumer": [107, 108, 121, 190, 278], "shorter": [107, 108, 121], "comment": [107, 108, 121], "instanc": [107, 108, 121, 126, 137, 139, 143, 150, 162, 168, 278, 317, 486, 525, 526, 527, 528, 529, 531, 532, 533, 633, 647, 690, 694, 712, 745, 783, 804, 813, 836, 919, 1145], "escap": [107, 108, 121], "doesn": [107, 121, 174, 278, 382, 694, 731, 804, 912, 1135, 1145], "complet": [107, 109, 121, 1126, 1145], "wherea": [107, 109, 121, 496, 497, 694, 736, 743, 804, 1014, 1015, 1145], "would": [107, 108, 121, 302, 443, 477, 485, 514, 624, 694, 823, 975, 1025, 1126, 1145], "prefer": [107, 108, 111, 121, 140, 162, 189, 195, 216, 217, 264, 278, 388, 477, 694, 804, 813, 919, 1005, 1145, 1153], "treat": [107, 108, 121, 328, 427, 448, 552, 554, 571, 572, 694, 958, 980, 1067, 1069, 1086, 1087, 1145], "10000": [107, 190, 278, 594], "might": [107, 108, 121, 141, 149, 239, 243, 278, 292, 477, 609, 694, 710, 769, 774, 804, 1127, 1145], "issu": [107, 108, 112, 121, 332, 333, 599, 694, 856, 857, 1115, 1145], "iso8601": [107, 108, 121], "succe": [107, 108, 121], "cpu": [107, 108], "system": [107, 108], "wrongli": 107, "done": [107, 108, 121, 127, 143, 147, 150, 192, 278, 291, 293, 317, 503, 567, 573, 620, 694, 708, 712, 740, 804, 836, 1082, 1088, 1145], "buffer": [107, 108, 109, 160, 189, 278, 913, 1145], "modifi": [107, 108, 121, 141, 143, 162, 182, 189, 251, 278, 303, 369, 380, 552, 559, 560, 571, 694, 813, 898, 909, 919, 1067, 1074, 1075, 1086, 1105, 1107, 1108, 1145], "upper": [107, 108, 109, 160, 174, 177, 278, 322, 323, 408, 465, 610, 621, 638, 639, 641, 642, 653, 654, 681, 682, 694, 731, 734, 804, 848, 913, 934, 1003, 1132, 1145], "bound": [107, 108, 160, 174, 177, 278, 322, 323, 324, 408, 443, 464, 465, 471, 610, 621, 638, 639, 641, 642, 653, 654, 681, 682, 694, 731, 734, 804, 848, 849, 913, 934, 975, 996, 1003, 1132, 1145], "lossi": [107, 108, 121], "decod": [107, 108], "expens": [107, 108, 119, 121, 125, 126, 138, 140, 174, 175, 177, 178, 189, 195, 215, 216, 217, 218, 244, 245, 278, 292, 477, 522, 694, 731, 732, 734, 735, 759, 775, 804, 813, 919, 1005, 1145, 1153], "aggreg": [107, 108, 119, 168, 173, 174, 176, 177, 196, 197, 198, 201, 203, 207, 208, 209, 215, 230, 231, 247, 250, 257, 258, 261, 263, 278, 286, 394, 405, 473, 475, 477, 503, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 615, 616, 617, 618, 633, 634, 635, 636, 647, 652, 660, 661, 664, 665, 669, 677, 678, 694, 731, 732, 734, 735, 745, 746, 747, 748, 751, 752, 755, 759, 770, 771, 778, 785, 786, 789, 791, 804, 931, 1033, 1034, 1035, 1036, 1038, 1041, 1042, 1043, 1145], "nativ": [107, 109, 112, 113, 115, 119, 135, 189, 195, 217, 218, 236, 264, 278, 477, 659, 694, 699, 792, 1005, 1145, 1153], "parser": 107, "regard": [107, 630], "sens": [107, 113, 115, 119, 124, 200, 249, 278, 503, 694, 750, 804], "particular": [107, 113, 115, 119, 124, 160, 278, 913, 1145], "usernam": [107, 110, 113, 115, 119, 124], "password": [107, 110, 113, 115, 119, 124], "skip": [107, 108, 112, 119, 121, 126, 247, 278, 814, 1005, 1145], "offset": [107, 108, 112, 113, 115, 119, 121, 124, 125, 126, 174, 175, 177, 178, 215, 228, 249, 255, 278, 341, 349, 362, 363, 366, 370, 377, 459, 522, 546, 575, 694, 731, 732, 734, 735, 759, 768, 783, 804, 866, 874, 891, 892, 895, 899, 906, 991, 1061, 1090, 1103, 1145], "row_count": [107, 108, 113, 115, 119, 121, 124, 125, 126], "sampl": [107, 108, 264, 278, 545, 694, 792, 1060, 1145], "estim": [107, 108, 147, 160, 278, 293, 386, 387, 424, 620, 694, 708, 804, 913, 915, 916, 957, 1145], "alloc": [107, 108, 160, 210, 278, 913, 1145], "encount": [107, 108, 121, 174, 177, 278, 496, 497, 562, 563, 630, 633, 647, 694, 731, 734, 804, 1014, 1015, 1077, 1078, 1145], "window": [107, 108, 121, 174, 175, 177, 178, 215, 278, 334, 370, 377, 385, 386, 387, 475, 477, 503, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 628, 671, 672, 694, 731, 732, 734, 735, 759, 804, 858, 899, 906, 914, 915, 916, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1145], "rn": [107, 108, 121], "go": [107, 108, 121, 557, 1072], "nodataerror": [107, 108, 112, 118, 121, 705], "lazili": [107, 108, 121, 122, 123, 124, 125, 126, 476, 694, 716, 804], "glob": [107, 108, 121, 124, 125, 126], "continu": [107, 119, 335, 511, 545, 694, 859, 1023, 1060, 1145], "benchmark": [107, 119], "50000": 108, "batchedcsvread": [108, 705], "upon": 108, "creation": 108, "gather": 108, "next_batch": 108, "big": 108, "interest": 108, "seen_group": 108, "big_fil": 108, "df_current_batch": 108, "partition_df": 108, "partition_bi": [108, 190, 278], "as_dict": [108, 205, 278], "fh": 108, "write_csv": [108, 121, 278], "els": [108, 684], "connectionorcursor": 109, "iter_batch": 109, "cursor": 109, "client": 109, "odbc": 109, "driver": [109, 110], "packag": [109, 112], "establish": 109, "resultset": 109, "manner": 109, "veri": [109, 189, 244, 278, 477, 694, 792], "poor": 109, "trip": 109, "still": [109, 110], "intern": [109, 128, 189, 278], "exact": [109, 135, 137, 139, 227, 278, 586, 587, 588, 607, 694, 1101, 1102, 1103], "incom": 109, "execute_opt": 109, "read_arrow_batches_from_odbc": 109, "read_database_uri": 109, "wide": [109, 172, 199, 247, 278, 749, 804], "snowflak": [109, 110], "variou": [109, 278, 694, 804, 807, 1145], "facil": 109, "initialis": [109, 143, 804, 1152], "flight": 109, "flightsql": 109, "flight_sql": 109, "about": [109, 545, 552, 559, 560, 571, 694, 1060, 1067, 1074, 1075, 1086, 1145, 1153], "notabl": 109, "dremio": 109, "influxdb": 109, "notic": [109, 278, 804, 1145], "dbapi2": 109, "connectorx": [109, 110, 129], "optimis": [109, 195, 218, 264, 278, 804, 1005, 1048, 1049, 1145, 1153], "translat": 109, "conn": 109, "url": [109, 126, 559, 561, 1074, 1076], "test_data": 109, "user_conn": 109, "normalised_scor": 109, "uint8": [109, 134, 136, 150, 238, 239, 247, 278, 332, 333, 476, 599, 614, 694, 712, 804, 807, 856, 857, 1115, 1145, 1153], "parameteris": 109, "metric": 109, "alchemy_conn": 109, "qmark": 109, "variad": 109, "1000": [109, 112, 160, 238, 278, 355, 356, 594, 884, 1124, 1145, 1153], "localhost": 109, "5432": 109, "uid": 109, "usr": 109, "pwd": 109, "max_text_s": 109, "max_binary_s": 109, "do_someth": 109, "partition_on": 110, "partition_rang": 110, "partition_num": 110, "dbreadengin": 110, "raw": 110, "warehous": 110, "role": 110, "transfer": 110, "document": [110, 112, 373, 376, 563, 586, 587, 588, 591, 690, 841, 902, 905, 1078, 1101, 1102, 1103, 1106], "redshift": 110, "mysql": 110, "mariadb": 110, "clickhous": 110, "oracl": 110, "bigqueri": 110, "pleas": [110, 174, 278, 638, 643, 731, 804], "github": 110, "sfu": 110, "connector": 110, "destin": 110, "develop": [110, 137, 139], "read_databas": 110, "explicitli": [110, 135, 137, 143, 476, 676, 694, 704], "test_tabl": 110, "compani": 110, "testdb": 110, "public": [110, 278, 694, 705, 804, 1145], "myrol": 110, "delta_table_opt": [111, 122], "root": [111, 122, 320, 423, 474, 487, 509, 549, 598, 693, 694, 843, 1063, 1145], "absolut": [111, 122, 123, 130, 131, 132, 133, 284, 385, 386, 387, 694, 809, 914, 915, 916, 1145], "avoid": [111, 217, 278, 287, 694], "year": [111, 122, 174, 192, 215, 249, 278, 353, 354, 366, 367, 370, 377, 378, 522, 525, 526, 527, 528, 529, 531, 532, 533, 637, 638, 639, 640, 641, 642, 681, 682, 694, 731, 740, 759, 804, 878, 879, 895, 896, 899, 906, 907], "2021": [111, 122, 150, 155, 172, 174, 249, 278, 586, 656, 712, 731, 804, 807, 870, 871, 879, 903, 953, 1101, 1145], "aw": [111, 122, 126], "googl": [111, 122, 123], "service_account": [111, 122], "service_account_json_absolute_path": [111, 122], "az": [111, 122, 123], "adl": [111, 122, 123], "abf": [111, 122, 123], "azure_storage_account_nam": [111, 122, 123], "azure_storage_account_kei": [111, 122, 123], "without_fil": [111, 122, 123], "track": [111, 122, 123, 195, 278, 465, 1152], "sheet_id": [112, 118], "sheet_nam": [112, 118], "xlsx2csv": [112, 129], "openpyxl": [112, 129], "pyxlsb": [112, 129], "xlsx2csv_option": 112, "read_csv_opt": 112, "noreturn": [112, 118], "spreadsheet": [112, 118, 207, 278, 705], "xlsb": 112, "sheetnam": [112, 118], "nor": [112, 118, 219, 278], "fastest": 112, "read_csv": [112, 121], "refin": 112, "significantli": [112, 1153], "potenti": [112, 121, 124, 125, 126, 189, 216, 218, 278], "unabl": 112, "ocnjunct": 112, "julian": 112, "skip_empty_lin": 112, "influenc": [112, 724, 745, 804], "pipelin": 112, "correct": [112, 118, 386, 387, 424, 526, 527, 528, 529, 530, 531, 533, 545, 694, 744, 745, 804, 915, 916, 957, 1040, 1060, 1145], "known": [112, 137, 465, 787, 792, 997], "better": [112, 195, 239, 264, 278, 477, 565, 694, 792, 1048, 1049, 1080, 1145], "detect": 112, "memory_map": [113, 119, 124], "v2": [113, 124], "greatli": [113, 124], "repeat": [113, 124, 515, 517, 667, 685, 694], "give": [113, 115, 119, 124, 125, 126, 199, 245, 278, 350, 424, 517, 607, 694, 705, 749, 775, 804, 875, 957, 1145], "That": [113, 744, 745, 804], "filenam": 113, "my_fil": 113, "write_ipc": [113, 278], "read_ndjson": 116, "openoffic": 118, "od": 118, "parallelstrategi": [119, 126], "use_statist": [119, 126], "stabl": [119, 149, 154, 219, 243, 278, 470, 694, 710, 749, 769, 774, 804], "row_group": [119, 126], "read_tabl": 119, "scan_parquet": 119, "scan_pyarrow_dataset": [119, 126], "hive": [119, 126], "contribut": [119, 527, 529, 531, 533, 694], "with_column_nam": 121, "push": [121, 124, 125, 126, 127], "down": [121, 124, 125, 126, 127, 397, 694, 925, 1145], "therebi": [121, 124, 125, 126], "realloc": [121, 124, 125, 162, 278, 813, 919, 1145], "headerless": 121, "my_long_fil": 121, "thing": [121, 128, 646, 655], "less": [121, 192, 278, 426, 472, 567, 573, 578, 594, 694, 740, 804, 1082, 1088, 1093, 1109, 1153], "breezah": 121, "languag": [121, 174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "hard": [121, 744, 745, 804], "mydf": 121, "lambda": [121, 146, 168, 195, 206, 207, 264, 278, 292, 385, 386, 387, 465, 473, 474, 475, 477, 633, 634, 647, 658, 659, 669, 694, 744, 745, 753, 792, 804, 814, 914, 915, 916, 997, 1005, 1145], "lower": [121, 174, 177, 209, 270, 278, 322, 324, 408, 471, 474, 512, 516, 529, 621, 638, 639, 641, 642, 653, 654, 668, 681, 682, 694, 731, 734, 755, 798, 804, 849, 934, 1003, 1024, 1027, 1039, 1132, 1145], "simpli": [121, 503, 633, 647, 694], "idx": [121, 174, 190, 278, 465, 731, 804, 997, 1049, 1145], "uint16": [121, 332, 333, 599, 694, 807, 856, 857, 1115, 1145], "u16": [121, 137, 1153], "eu": [122, 123], "central": [122, 123, 424, 545, 694, 957, 1060, 1145], "iceberg": [123, 705], "pyiceberg": [123, 129], "metadata": [123, 174, 175, 177, 178, 215, 278, 522, 694, 731, 732, 734, 735, 759, 804], "secret": [123, 126], "adlf": 123, "my": [123, 127, 592, 1107], "gcp": [123, 126], "oauth": 123, "token": 123, "ya29": 123, "dr": 123, "afm": 123, "py": 123, "impl": 123, "fsspecfileio": 123, "hive_partit": 126, "retri": 126, "prune": [126, 745, 804], "read_parquet": 126, "east": 126, "allow_pyarrow_filt": 127, "comparison": 127, "dset": 127, "folder": 127, "05": [127, 130, 131, 132, 133, 137, 150, 192, 249, 278, 343, 344, 348, 369, 371, 373, 376, 638, 641, 712, 740, 804, 807, 868, 869, 870, 871, 873, 898, 899, 902, 903, 905, 906], "04": [127, 150, 174, 249, 278, 343, 344, 348, 352, 360, 362, 363, 369, 370, 372, 373, 376, 380, 586, 641, 643, 712, 731, 804, 807, 869, 873, 877, 883, 888, 889, 891, 892, 893, 898, 901, 902, 905, 909, 1101], "seed": [128, 179, 219, 278, 403, 514, 535, 541, 694, 928, 1025, 1045, 1056, 1145], "shuffl": [128, 219, 264, 278, 535, 694, 792, 1045, 1145], "stdout": [129, 143, 172, 278, 488], "platform": 129, "maco": 129, "13": [129, 137, 151, 152, 163, 164, 171, 183, 193, 202, 215, 253, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 278, 287, 485, 487, 522, 589, 628, 633, 636, 647, 678, 683, 694, 713, 714, 725, 726, 742, 759, 780, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 804, 899, 906, 907, 1005, 1104, 1145], "arm64": 129, "arm": 129, "64bit": [129, 516, 694, 1027, 1145], "main": [129, 716, 804], "aug": 129, "clang": 129, "14": [129, 137, 195, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 278, 341, 407, 514, 681, 694, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 807, 866, 899], "1403": 129, "adbc_driver_sqlit": 129, "cloudpickl": 129, "23": [129, 174, 215, 278, 343, 347, 351, 359, 367, 370, 379, 522, 525, 526, 528, 531, 532, 533, 640, 643, 680, 681, 682, 694, 731, 759, 804, 807, 868, 876, 1153], "matplotlib": [129, 754, 767, 804], "26": [129, 349, 378, 874], "pydant": 129, "21": [129, 200, 231, 278, 525, 526, 528, 531, 532, 533, 649, 694, 750, 804, 807], "check_row_ord": [130, 131], "check_column_ord": [130, 131], "check_dtyp": [130, 131, 132, 133], "check_exact": [130, 131, 132, 133], "rtol": [130, 131, 132, 133], "atol": [130, 131, 132, 133], "08": [130, 131, 132, 133, 137, 215, 278, 343, 370, 522, 586, 641, 643, 694, 759, 804, 807, 899, 906, 1101], "nans_compare_equ": [130, 131, 132, 133], "categorical_as_str": [130, 131, 132, 133], "assert": [130, 131, 132, 133, 135, 137, 139, 215, 278, 705, 807], "assertionerror": [130, 131, 132, 133], "compar": [130, 131, 132, 133, 169, 278, 383, 384, 401, 402, 426, 472, 498, 499, 694, 841, 1047, 1145], "unsort": [130, 131], "exactli": [130, 131, 132, 133, 136, 137, 139, 577, 578, 584, 585, 643, 1055, 1092, 1093, 1099, 1100, 1145], "toler": [130, 131, 132, 133, 192, 278, 740, 804], "inexact": [130, 131, 132, 133], "share": [130, 131, 132, 133, 160, 278, 913, 1145], "assert_series_equ": [130, 133, 1153], "assert_frame_not_equ": [130, 133], "traceback": [130, 131, 132, 133], "assert_frame_equ": [131, 132, 1153], "assert_series_not_equ": [131, 132], "check_nam": [132, 133], "searchstrategi": [134, 136, 137, 139], "null_prob": [134, 137, 139], "percentag": [134, 137, 139, 504, 694, 1019, 1145], "chanc": [134, 137, 139, 1153], "independ": [134, 135, 137, 139], "flag": [134, 278, 537, 552, 559, 560, 571, 694, 722, 744, 745, 804, 1050, 1067, 1074, 1075, 1086, 1145], "hypothesi": [134, 135, 136, 137, 138, 139, 1153], "sampled_from": [134, 1153], "unique_small_int": 134, "ccy": [134, 1153], "gbp": [134, 1153], "eur": [134, 155, 172, 278, 1153], "jpy": [134, 1153], "min_col": [135, 137], "max_col": [135, 137], "standalon": [135, 137, 807], "mincol": 135, "assign": [135, 174, 278, 465, 503, 514, 577, 578, 694, 731, 804, 997, 1004, 1025, 1092, 1093, 1145], "minimum": [135, 136, 137, 139, 168, 201, 278, 385, 386, 387, 491, 497, 506, 514, 664, 665, 694, 751, 804, 847, 887, 914, 915, 916, 1015, 1021, 1025, 1145, 1153], "especi": [135, 521, 694, 724, 804, 1032, 1145], "test_unique_xyz": 135, "assert_someth": 135, "punctuat": 135, "test_special_char_colname_init": 135, "inner_dtyp": [136, 139], "select_from": [136, 139], "min_siz": [136, 137, 139, 1153], "max_siz": [136, 137, 139, 1153], "anoth": [136, 173, 278, 334, 342, 464, 481, 484, 694, 730, 782, 804, 858, 867, 919, 996, 1047, 1145], "randomli": 136, "innermost": 136, "2x": 136, "lst": 136, "11330": 136, "24030": 136, "116": 136, "zz": [136, 139], "uint8_pair": [136, 1153], "uint": [136, 1153], "zip": [136, 1153], "131": 136, "176": 136, "149": [136, 1153], "max_data_s": [137, 139], "include_col": 137, "allow_infin": [137, 139], "allowed_dtyp": [137, 139, 1153], "excluded_dtyp": [137, 139], "describ": [137, 172, 278, 1145], "desir": [137, 465, 997], "n_chunk": [137, 139, 278, 813, 919, 1145], "randomis": 137, "onto": 137, "pct": 137, "preced": [137, 807], "disallow": [137, 139], "inf": [137, 139, 299, 335, 410, 414, 511, 607, 694, 820, 853, 859, 930, 938, 943, 1003, 1019, 1023, 1132, 1145], "exclud": [137, 139, 174, 278, 330, 333, 408, 694, 731, 804, 934, 953, 1145], "usag": [137, 139, 227, 278, 807, 1055, 1145], "deploi": [137, 139], "characterist": [137, 139], "concret": [137, 139], "test_repr": 137, "isinst": [137, 139, 278], "0x11f561580": 137, "0565": 137, "34715": 137, "5844": 137, "33": [137, 200, 278, 534, 694, 750, 804, 1039, 1145], "076854": 137, "3382": 137, "17": [137, 257, 524, 534, 649, 670, 681, 694, 785, 851, 853, 899, 1034, 1145, 1153], "48662": 137, "7540": 137, "29": [137, 174, 192, 215, 249, 278, 341, 362, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 866, 891, 895, 899, 906], "836271": 137, "4063": 137, "06": [137, 150, 249, 278, 343, 361, 368, 369, 378, 712, 804, 807, 898, 899], "39092": 137, "1889": 137, "41": [137, 532, 694, 1153], "874455": 137, "15836": 137, "1755e": 137, "575050513": 137, "profil": [138, 140, 715, 804], "balanc": [138, 140, 1153], "set_environ": 138, "polars_hypothesis_profil": [138, 140], "1500": 138, "constructor": 139, "normal": [139, 174, 278, 382, 424, 545, 694, 731, 804, 912, 957, 1060, 1145], "test_repr_is_valid_str": 139, "experi": 139, "create_list_strategi": [139, 1153], "polars_max_thread": 141, "behind": 141, "lock": 141, "reason": [141, 475, 694], "temporarili": [141, 143, 174, 175, 177, 178, 215, 278, 522, 694, 731, 732, 734, 735, 759, 804], "pyspark": 141, "udf": [141, 146, 195, 206, 259, 264, 278, 292, 477, 507, 619, 659, 694, 753, 787, 792, 804, 814, 1005, 1145], "recommend": [141, 189, 206, 278, 807], "easi": [143, 1153], "restor": 143, "restore_default": 143, "relat": [143, 807], "set_tbl_row": 143, "initi": [143, 633, 647, 684], "whatev": 143, "were": [143, 690], "enter": 143, "advantag": [143, 206, 278], "set_": 143, "set_verbos": 143, "do_various_th": 143, "cleaner": 143, "breviti": 143, "vein": 143, "durat": [143, 192, 249, 278, 341, 348, 349, 352, 356, 358, 360, 365, 372, 380, 605, 638, 639, 641, 642, 681, 682, 694, 740, 804, 807, 866, 873, 874, 877, 884, 886, 889, 894, 901, 906, 909, 1128, 1145], "set_ascii_t": 143, "write_ascii_frame_to_stdout": 143, "sy": 143, "nan_as_nul": 145, "polarsdatafram": 145, "notimplementederror": 145, "num_row": 145, "get_column": [145, 241, 278], "dtypekind": 145, "inference_s": [146, 195, 278], "256": [146, 195, 278, 1019, 1145], "map_row": [146, 278], "tri": [146, 195, 278], "approxim": [147, 148, 278, 293, 620, 694, 708, 709, 804, 1153], "hyperloglog": [147, 278, 293, 620, 694, 708, 804], "algorithm": [147, 278, 293, 620, 694, 708, 804], "cardin": [147, 278, 293, 620, 694, 708, 804], "approx_n_uniqu": [148, 278, 694, 709, 804], "k": [149, 218, 243, 278, 315, 319, 424, 606, 694, 710, 774, 804, 835, 840, 957, 1129, 1145], "intoexpr": [149, 173, 174, 175, 176, 177, 178, 215, 221, 222, 229, 243, 253, 254, 257, 278, 291, 310, 313, 314, 408, 435, 436, 438, 445, 446, 454, 455, 456, 457, 462, 466, 503, 536, 539, 548, 576, 577, 578, 584, 585, 616, 618, 624, 627, 628, 629, 633, 636, 640, 647, 661, 665, 670, 673, 676, 678, 684, 694, 710, 730, 731, 732, 733, 734, 735, 759, 761, 762, 769, 774, 780, 781, 785, 804, 830, 833, 834, 934, 978, 1091, 1092, 1093, 1099, 1100, 1145], "nulls_last": [149, 229, 243, 278, 302, 547, 694, 710, 769, 774, 804, 823, 1145], "smallest": [149, 243, 278, 315, 694, 710, 774, 804, 835, 1145], "largest": [149, 174, 192, 215, 243, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 606, 638, 639, 641, 642, 681, 682, 694, 710, 731, 740, 759, 774, 804, 895, 899, 906, 1129, 1145], "wors": [149, 243, 278, 710, 769, 774, 804], "search": [149, 192, 243, 278, 710, 740, 769, 774, 804], "top_k": [149, 278, 315, 694, 710, 804, 835, 1145], "columnnameorselector": [150, 156, 158, 199, 205, 207, 218, 237, 245, 246, 247, 278, 712, 719, 720, 749, 775, 776, 804], "strict": [150, 278, 311, 317, 552, 555, 570, 586, 587, 588, 591, 694, 712, 804, 831, 836, 1047, 1067, 1070, 1085, 1101, 1102, 1103, 1106, 1145], "due": [150, 174, 192, 215, 218, 249, 278, 287, 317, 349, 366, 370, 377, 423, 509, 522, 525, 526, 527, 528, 529, 531, 532, 533, 598, 638, 639, 641, 642, 681, 682, 694, 712, 731, 740, 759, 804, 836, 874, 895, 899, 906, 1145], "overflow": [150, 278, 317, 332, 333, 570, 599, 694, 712, 804, 836, 856, 857, 1085, 1115, 1145], "2020": [150, 155, 172, 215, 278, 344, 348, 349, 352, 355, 356, 358, 360, 365, 369, 372, 373, 376, 377, 522, 586, 587, 588, 694, 712, 759, 804, 807, 869, 873, 874, 877, 884, 886, 889, 894, 898, 901, 902, 905, 906, 1101, 1102, 1103], "u8": [150, 237, 238, 247, 278, 476, 614, 694, 712, 804, 807, 1122, 1145, 1153], "to_dict": [150, 278, 712, 804], "tempor": [150, 174, 175, 177, 178, 189, 215, 217, 218, 236, 278, 408, 522, 525, 526, 527, 528, 529, 531, 532, 533, 694, 705, 712, 731, 732, 734, 735, 759, 804, 807, 934, 953, 1145], "greater": [151, 192, 278, 401, 402, 545, 578, 694, 740, 804, 1060, 1093, 1145], "cheap": [151, 152, 222, 254, 278, 713, 714, 762, 781, 804, 813, 846, 850, 1145], "deepcopi": [151, 278, 713, 804, 846, 1145], "appl": [153, 182, 191, 211, 213, 235, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 278, 519, 557, 579, 694, 739, 757, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 804, 1072, 1094], "banana": [153, 235, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 278, 519, 557, 579, 694, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799], "orang": [153, 260, 261, 263, 265, 266, 268, 270, 271, 278, 788, 789, 791, 793, 794, 796, 798, 799], "pairwis": [154, 278], "pearson": [154, 278, 424, 545, 630, 694, 957, 1060, 1145], "correl": [154, 278, 630, 671], "coeffici": [154, 278, 545, 694, 1060, 1145], "corrcoef": [154, 278], "percentil": [155, 278, 860, 1145], "summari": [155, 278, 860, 1145], "glimps": [155, 180, 278], "median": [155, 207, 278, 393, 527, 694, 782, 804, 860, 1037, 1145], "usd": [155, 172, 278, 1153], "null_count": [155, 158, 278, 334, 694, 804, 858, 860, 927, 1145], "266667": [155, 278], "666667": [155, 184, 197, 250, 266, 278, 385, 694, 738, 778, 794, 804, 914, 1145], "std": [155, 278, 531, 694, 804, 860, 1041, 1145], "101514": [155, 278], "707107": [155, 278, 386, 531, 694, 915, 1145], "57735": [155, 278], "more_column": [156, 161, 223, 246, 278, 388, 645, 694, 719, 723, 764, 776, 804], "subset": [158, 203, 245, 278, 720, 775, 804], "preserv": [158, 165, 173, 176, 191, 195, 239, 240, 278, 339, 340, 394, 439, 542, 694, 720, 727, 739, 804, 863, 864, 923, 971, 1057, 1127, 1145], "behavior": [158, 278, 464, 720, 804, 813, 859, 996, 1023, 1145], "all_horizont": [158, 278, 615, 720, 804], "is_nul": [158, 278, 694, 720, 804, 1145], "sizeunit": [160, 278, 913, 1145], "heap": [160, 278, 913, 1145], "its": [160, 278, 343, 370, 377, 548, 684, 694, 841, 868, 899, 906, 913, 1145], "bitmap": [160, 278, 913, 1145], "structarrai": [160, 278, 913, 1145], "constant": [160, 215, 278, 341, 391, 694, 759, 804, 866, 913, 920, 1145], "unchang": [160, 278, 605, 694, 744, 745, 787, 792, 804, 913, 1128, 1145], "capac": [160, 227, 278, 913, 1055, 1145], "ffi": [160, 278, 913, 1145], "kb": [160, 278, 913, 1145], "mb": [160, 278, 913, 1145], "gb": [160, 278, 913, 1145], "tb": [160, 278, 913, 1145], "revers": [160, 278, 329, 330, 331, 332, 333, 474, 509, 598, 694, 804, 854, 855, 856, 857, 1145], "1_000_000": [160, 278, 913, 1145], "25888898": [160, 278], "689577102661133": [160, 278], "long": [161, 199, 247, 278, 723, 749, 804], "letter": [161, 262, 272, 278, 388, 560, 645, 694, 723, 790, 800, 804, 807, 1075], "onlin": [162, 278, 813, 919, 1145], "rerun": [162, 278, 813, 919, 1145], "conveni": [162, 278, 813, 919, 1145], "Not": [163, 278, 417, 419, 476, 694, 725, 804], "fillnullstrategi": [164, 278, 393, 694, 726, 804, 922, 1145], "matches_supertyp": [164, 278, 726, 804], "forward": [164, 192, 278, 362, 393, 399, 694, 726, 740, 804, 891, 922, 1145], "consecut": [164, 278, 309, 393, 399, 551, 694, 726, 804, 922, 1066, 1145], "fill_nan": [164, 278, 694, 804, 1145], "intoexprcolumn": [165, 278, 315, 322, 323, 324, 458, 504, 581, 582, 583, 606, 621, 638, 639, 641, 642, 653, 654, 681, 682, 694, 727, 804, 835, 847, 848, 849, 990, 1019, 1096, 1097, 1098, 1129, 1145], "constraint": [165, 278, 423, 509, 598, 694, 727, 804], "reduct": [168, 278], "supercast": [168, 278], "parent": [168, 278], "rule": [168, 278], "arithmet": [168, 278], "zip_with": [168, 278, 1145], "foo11": [168, 278], "bar22": [168, 278], "null_equ": [169, 278, 1047, 1145], "retriev": [170, 278, 431, 432, 595, 963, 964, 1110], "max_items_per_column": [172, 278], "max_colname_length": [172, 278], "return_as_str": [172, 278, 488], "preview": [172, 278], "cleanli": [172, 278], "few": [172, 278], "exce": [172, 278], "trail": [172, 278, 574, 580, 581, 582, 1089, 1095, 1096, 1097], "ellipsi": [172, 278], "head": [172, 194, 232, 278, 291, 428, 694, 743, 804, 959, 1116, 1145], "tail": [172, 180, 278, 291, 545, 694, 804, 929, 1060, 1145], "more_bi": [173, 176, 205, 229, 278, 548, 694, 730, 733, 769, 804], "groupbi": [173, 207, 278, 292, 477, 619, 659, 694, 804], "consist": [173, 176, 205, 278, 586, 730, 733, 804, 813, 919, 1101, 1145], "regardless": [173, 176, 278, 563, 684, 1078], "agg": [173, 174, 177, 207, 215, 278, 286, 394, 396, 477, 547, 548, 601, 613, 631, 659, 694, 715, 716, 722, 724, 730, 731, 732, 734, 735, 754, 759, 763, 767, 804, 807], "Or": [173, 174, 192, 215, 229, 249, 257, 278, 503, 522, 548, 638, 639, 641, 642, 681, 682, 684, 694, 730, 731, 740, 759, 769, 785, 804], "index_column": [174, 175, 177, 178, 215, 278, 522, 694, 731, 732, 734, 735, 759, 804], "timedelta": [174, 175, 177, 178, 192, 215, 249, 278, 347, 366, 367, 370, 377, 379, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 732, 734, 735, 740, 759, 804, 807, 880, 882, 887, 895, 899, 906, 1014, 1015, 1145], "period": [174, 175, 177, 178, 215, 225, 226, 278, 370, 377, 385, 386, 387, 458, 504, 522, 538, 539, 638, 639, 641, 642, 681, 682, 694, 731, 732, 734, 735, 759, 765, 766, 804, 899, 906, 914, 915, 916, 990, 1019, 1052, 1053, 1145], "include_boundari": [174, 177, 278, 731, 734, 804], "closedinterv": [174, 175, 177, 178, 215, 278, 408, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 732, 734, 735, 759, 804, 934, 1145], "label": [174, 278, 335, 511, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 694, 731, 754, 804, 859, 1023, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1145], "start_bi": [174, 177, 278, 731, 734, 804], "startbi": [174, 177, 278, 731, 734, 804], "check_sort": [174, 175, 177, 178, 215, 278, 522, 694, 731, 732, 734, 735, 759, 804], "dynamicgroupbi": [174, 177, 278], "member": [174, 278, 731, 804, 942, 1145], "look": [174, 278, 310, 465, 475, 694, 731, 804, 830], "descript": [174, 278, 731, 804], "ascend": [174, 175, 177, 178, 215, 278, 522, 526, 527, 528, 529, 531, 533, 694, 731, 732, 734, 735, 759, 804], "dynam": [174, 177, 278, 465, 525, 526, 527, 528, 529, 531, 532, 533, 694, 731, 734, 804, 997], "matter": [174, 175, 177, 178, 189, 215, 217, 218, 236, 278, 522, 694, 731, 732, 734, 735, 759, 804], "interv": [174, 175, 177, 178, 215, 249, 278, 335, 370, 377, 408, 511, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 732, 734, 735, 759, 804, 859, 872, 875, 876, 883, 885, 888, 890, 893, 896, 897, 899, 904, 906, 907, 934, 1023, 1145], "_lower_bound": [174, 177, 278, 731, 734, 804], "_upper_bound": [174, 177, 278, 731, 734, 804], "harder": [174, 177, 278, 731, 734, 804], "inclus": [174, 175, 177, 178, 215, 278, 408, 522, 525, 526, 527, 528, 529, 531, 532, 533, 576, 577, 621, 638, 639, 641, 642, 653, 654, 681, 682, 694, 731, 732, 734, 735, 759, 804, 934, 1091, 1092, 1145], "datapoint": [174, 177, 278, 731, 734, 804], "boundari": [174, 278, 322, 323, 324, 377, 694, 731, 804, 847, 848, 849, 906, 930, 1145], "mondai": [174, 177, 278, 377, 379, 731, 734, 804, 906, 908], "tuesdai": [174, 177, 278, 731, 734, 804], "wednesdai": [174, 177, 278, 731, 734, 804], "thursdai": [174, 177, 278, 731, 734, 804], "fridai": [174, 177, 278, 731, 734, 804], "saturdai": [174, 177, 278, 731, 734, 804], "sundai": [174, 177, 278, 379, 731, 734, 804, 908], "earliest": [174, 177, 278, 369, 370, 377, 586, 588, 640, 731, 734, 804, 898, 899, 906, 1101, 1103], "weekli": [174, 177, 278, 377, 731, 734, 804, 906], "week": [174, 177, 192, 215, 249, 278, 366, 370, 377, 379, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 643, 681, 682, 694, 731, 734, 740, 759, 804, 807, 895, 899, 906, 908], "sorted": [174, 175, 177, 178, 215, 278, 522, 694, 731, 732, 734, 735, 759, 804], "verifi": [174, 175, 177, 178, 215, 278, 522, 694, 731, 732, 734, 735, 759, 804], "incorrectli": [174, 175, 177, 178, 215, 278, 465, 522, 694, 731, 732, 734, 735, 759, 804], "incorrect": [174, 175, 177, 178, 215, 278, 380, 522, 537, 694, 731, 732, 734, 735, 759, 787, 792, 804, 909, 1050, 1145], "roll": [174, 175, 178, 278, 362, 363, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 628, 671, 672, 694, 731, 732, 735, 804, 891, 892, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1145], "re": [174, 239, 278, 362, 363, 731, 804, 891, 892, 1152], "come": [174, 278, 362, 363, 424, 694, 706, 731, 803, 804, 891, 892, 957, 1145], "1d": [174, 192, 215, 249, 278, 342, 352, 360, 366, 370, 377, 380, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 643, 656, 681, 682, 694, 731, 740, 759, 804, 807, 867, 875, 877, 882, 889, 895, 899, 904, 906], "set_index": [174, 278, 731, 804], "resampl": [174, 278, 731, 804], "reset_index": [174, 278, 731, 804], "though": [174, 278, 690, 731, 804], "unlik": [174, 278, 731, 804], "evenli": [174, 278, 731, 804], "upsampl": [174, 278, 731, 804], "1n": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "1u": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "microsecond": [174, 189, 192, 215, 217, 218, 236, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 640, 641, 642, 643, 680, 681, 682, 694, 731, 740, 754, 759, 804, 807, 895, 899, 906], "1m": [174, 192, 215, 249, 278, 355, 356, 358, 365, 366, 370, 372, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 884, 886, 894, 895, 899, 901, 906], "minut": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 640, 641, 642, 643, 680, 681, 682, 694, 731, 740, 759, 804, 807, 895, 899, 906], "1h": [174, 192, 215, 249, 278, 349, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 874, 876, 895, 899, 906], "hour": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 640, 641, 642, 643, 680, 681, 682, 694, 731, 740, 759, 804, 807, 895, 899, 906], "1w": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "1mo": [174, 192, 215, 249, 278, 344, 348, 362, 363, 366, 369, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 869, 873, 890, 891, 892, 895, 896, 897, 898, 899, 906, 907], "month": [174, 192, 215, 249, 278, 347, 362, 363, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 637, 638, 639, 640, 641, 642, 643, 681, 682, 694, 731, 740, 759, 804, 872, 891, 892, 895, 899, 906], "1q": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "quarter": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "1y": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "1i": [174, 192, 215, 249, 278, 366, 522, 525, 526, 527, 528, 529, 531, 532, 533, 694, 731, 740, 759, 804, 895], "3d12h4m25": [174, 192, 215, 249, 278, 370, 377, 522, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 899, 906], "suffix": [174, 191, 192, 215, 221, 249, 253, 257, 278, 287, 313, 366, 370, 377, 417, 419, 420, 421, 474, 503, 509, 519, 522, 525, 526, 527, 528, 529, 531, 532, 533, 557, 585, 638, 639, 641, 642, 681, 682, 694, 731, 739, 740, 759, 761, 780, 782, 785, 804, 807, 833, 895, 899, 906, 1072, 1100], "_satur": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "satur": [174, 192, 215, 249, 278, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 899, 906], "28": [174, 192, 215, 235, 249, 278, 285, 366, 369, 370, 377, 380, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 731, 740, 759, 804, 895, 898, 899, 906, 909, 1153], "correspond": [174, 192, 215, 239, 249, 278, 354, 366, 370, 377, 477, 514, 521, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 681, 682, 694, 715, 731, 740, 759, 804, 879, 895, 899, 906, 1025, 1032, 1145], "daylight": [174, 192, 215, 249, 278, 341, 349, 366, 370, 377, 522, 525, 526, 527, 528, 529, 531, 532, 533, 638, 639, 641, 642, 643, 681, 682, 694, 731, 740, 759, 804, 874, 895, 899, 906], "10i": [174, 215, 278, 522, 694, 731, 759, 804], "datetime_rang": [174, 278, 342, 344, 348, 352, 355, 356, 358, 360, 362, 363, 365, 366, 369, 370, 372, 377, 380, 525, 526, 528, 531, 532, 533, 638, 694, 731, 804, 866, 867, 869, 873, 874, 875, 876, 877, 882, 883, 884, 885, 886, 888, 889, 891, 892, 893, 894, 895, 898, 899, 901, 904, 906], "30m": [174, 278, 370, 377, 731, 804, 899, 906], "_lower_boundari": [174, 278, 731, 804], "_upper_boundari": [174, 278, 731, 804], "lower_bound": [174, 278, 322, 324, 408, 694, 731, 804, 847, 849, 934, 1132, 1145], "upper_bound": [174, 278, 322, 323, 408, 465, 694, 731, 804, 847, 848, 934, 1003, 1145], "bys": [174, 278, 731, 804], "int_rang": [174, 247, 264, 278, 621, 731, 745, 792, 804], "2i": [174, 278, 731, 804], "3i": [174, 278, 731, 804], "a_agg_list": [174, 278, 731, 804], "rollinggroupbi": [175, 178, 215, 278], "group_bi": [176, 203, 207, 277, 278, 286, 394, 396, 475, 477, 547, 548, 601, 613, 631, 659, 694, 715, 716, 722, 724, 733, 754, 767, 803, 804, 807], "group_by_dynam": [177, 215, 278, 734, 759, 804], "seed_1": [179, 278, 403, 694, 928, 1145], "seed_2": [179, 278, 403, 694, 928, 1145], "seed_3": [179, 278, 403, 694, 928, 1145], "hash": [179, 278, 694, 1145], "u64": [179, 278, 403, 516, 694, 754, 804, 928, 1145], "10783150408545073287": [179, 278], "1438741209321515184": [179, 278], "10047419486152048166": [179, 278], "2047317070637311557": [179, 278], "ab": [180, 194, 232, 253, 278, 595, 596, 694, 780, 804, 929, 959, 1116, 1145], "grown": [182, 278], "intermedi": [184, 278, 738, 804, 1153], "linear": [184, 209, 270, 278, 407, 433, 480, 512, 529, 628, 629, 668, 694, 738, 755, 798, 804, 933, 965, 1024, 1039, 1145], "333333": [184, 278, 423, 694, 738, 804, 1019, 1043, 1145], "mask": [185, 187, 278, 311, 409, 411, 412, 415, 416, 422, 505, 506, 552, 555, 694, 831, 923, 927, 934, 936, 939, 940, 945, 946, 954, 1020, 1021, 1048, 1067, 1070, 1136, 1145], "visual": [185, 187, 278], "scalar": [188, 195, 216, 278, 536, 619, 656, 659, 694, 956, 1046, 1145], "With": [188, 278, 525, 526, 527, 528, 529, 531, 532, 533, 694, 956, 1145], "buffer_s": [189, 278], "fit": [189, 227, 247, 278, 540, 670, 694, 1054, 1055, 1145], "signific": [189, 195, 278, 292, 477, 694, 1005, 1145], "4x": [189, 278], "materialis": [189, 190, 216, 217, 218, 278], "rows_by_kei": [189, 217, 278], "awar": [189, 217, 218, 236, 278, 724, 804, 1103], "iter_row": [190, 216, 217, 218, 278], "17_500": [190, 278], "klmnoopqrstuvwxyz": [190, 278], "__name__": [190, 278], "7500": [190, 278], "15_000": [190, 278], "record_batch": [190, 278], "to_arrow": [190, 278, 1145], "to_batch": [190, 278], "date32": [190, 278], "large_str": [190, 234, 240, 278], "15000": [190, 278], "2500": [190, 278], "left_on": [191, 192, 248, 278, 739, 740, 777, 804], "right_on": [191, 192, 248, 278, 739, 740, 777, 804], "_right": [191, 192, 278, 739, 740, 804], "joinvalid": [191, 278, 739, 804], "semi": [191, 278, 739, 804], "anti": [191, 278, 739, 792, 804, 1048, 1049, 1145], "cross": [191, 278, 377, 739, 804, 906], "many_to_mani": [191, 278, 739, 804], "one_to_on": [191, 278, 739, 804], "one_to_mani": [191, 278, 739, 804], "many_to_on": [191, 278, 739, 804], "join_asof": [191, 278, 739, 804], "other_df": [191, 278], "by_left": [192, 278, 740, 804], "by_right": [192, 278, 740, 804], "asofjoinstrategi": [192, 278, 740, 804], "allow_parallel": [192, 278, 739, 740, 804], "force_parallel": [192, 278, 739, 740, 804], "asof": [192, 278, 740, 804], "rather": [192, 278, 488, 511, 521, 594, 694, 740, 804, 1023, 1032, 1109, 1145], "asof_join": [192, 278], "distanc": [192, 278, 740, 804, 930, 1145], "plan": [192, 193, 278, 711, 715, 718, 722, 729, 739, 740, 756, 763, 767, 784, 804], "forc": [192, 195, 264, 278, 739, 740, 792, 804, 1005, 1145], "gdp": [192, 278, 740, 804], "2016": [192, 278, 740, 804], "2017": [192, 278, 740, 804], "2018": [192, 278, 369, 740, 804, 898], "2019": [192, 278, 740, 804], "jan": [192, 278, 740, 804], "1st": [192, 278, 740, 804], "4164": [192, 278, 740, 804], "4411": [192, 278, 740, 804], "4566": [192, 278, 740, 804], "4696": [192, 278, 740, 804], "set_sort": [192, 215, 249, 278, 522, 694, 740, 759, 804, 1145], "popul": [192, 278, 740, 804], "12th": [192, 278, 740, 804], "82": [192, 278, 740, 804], "66": [192, 248, 278, 532, 614, 694, 740, 777, 804, 1039, 1145], "83": [192, 278, 740, 804], "52": [192, 253, 278, 378, 534, 694, 740, 780, 804], "request": [193, 278], "describe_plan": [193, 278], "unoptim": [193, 278], "describe_optimized_plan": [193, 278], "show_graph": [193, 278, 804], "un": [193, 278], "graphviz": [193, 278, 767, 804], "much": [195, 247, 264, 278, 334, 464, 477, 564, 565, 659, 694, 792, 858, 996, 1005, 1079, 1080, 1145], "_significantly_": [195, 264, 278, 1005, 1145], "intens": [195, 264, 278, 503, 694, 1005, 1145], "materi": [195, 264, 278, 715, 754, 792, 804, 807, 1005, 1145], "parallelis": [195, 264, 278, 1005, 1145], "achiev": [195, 264, 278, 477, 565, 694, 859, 1005, 1023, 1080, 1145], "best": [195, 264, 278, 477, 694, 1005, 1145], "black": [195, 278, 310, 312, 313, 314], "arbitrarili": [195, 278], "rearrang": [195, 278], "transform": [195, 278, 475, 590, 592, 593, 694], "lru_cach": [195, 278, 477, 694, 1005, 1145], "column_1": [195, 244, 278], "axi": [196, 197, 199, 201, 231, 278, 622, 623, 749, 804], "null_strategi": [197, 231, 278], "nullstrategi": [197, 231, 278], "propag": [197, 231, 278, 384, 496, 497, 499, 694, 1014, 1015, 1145], "spam": [197, 278, 560, 1075], "id_var": [199, 278, 749, 804], "value_var": [199, 278, 749, 804], "variable_nam": [199, 278, 749, 804], "value_nam": [199, 278, 749, 804], "unpivot": [199, 278, 749, 804], "massag": [199, 278, 749, 804], "measur": [199, 278, 749, 804], "merg": [200, 278, 750, 804], "caller": [200, 278, 465, 745, 750, 787, 792, 804], "respons": [200, 278, 750, 804], "steve": [200, 278, 750, 804], "elis": [200, 278, 750, 804], "bob": [200, 278, 750, 804], "ag": [200, 278, 750, 804], "44": [200, 278, 338, 694, 750, 804], "anna": [200, 278, 750, 804], "megan": [200, 278, 750, 804], "thoma": [200, 278, 750, 804], "what": [203, 278, 1126, 1135, 1145], "pack": [203, 278], "expr_unique_subset": [203, 278], "df_nuniqu": [203, 278], "df_agg_nuniqu": [203, 278], "include_kei": [205, 218, 278], "offer": [206, 278, 507, 694, 753, 804], "fulli": [206, 219, 278], "cast_str_to_int": [206, 278, 753, 804], "col_nam": [206, 278, 753, 804], "tdf": [206, 278, 753, 804], "aggregate_funct": [207, 278], "pivotagg": [207, 278], "sort_column": [207, 278], "section": [207, 278, 552, 559, 560, 571, 638, 639, 641, 642, 681, 682, 1067, 1074, 1075, 1086], "predefin": [207, 278], "predict": [207, 210, 249, 278], "transpos": [207, 278], "discoveri": [207, 278], "col1": [207, 244, 278, 804, 1153], "col2": [207, 244, 278, 804, 1153], "col3": [207, 278, 1153], "tanh": [207, 278, 694, 1145], "998347": [207, 278], "964028": [207, 278], "999954": [207, 278], "unique_column_valu": [207, 278], "interpol": [209, 270, 278, 393, 480, 512, 529, 668, 694, 755, 798, 804, 1024, 1039, 1145], "rollinginterpolationmethod": [209, 270, 278, 512, 529, 668, 694, 755, 798, 804, 1024, 1039, 1145], "midpoint": [209, 270, 278, 512, 529, 668, 694, 755, 798, 804, 1024, 1039, 1145], "t_0": [215, 278, 522, 525, 526, 527, 528, 529, 531, 532, 533, 694, 759, 804], "t_1": [215, 278, 522, 525, 526, 527, 528, 529, 531, 532, 533, 694, 759, 804], "t_n": [215, 278, 522, 525, 526, 527, 528, 529, 531, 532, 533, 694, 759, 804], "43": [215, 278, 333, 522, 532, 694, 759, 804], "strptime": [215, 278, 369, 522, 694, 759, 804, 898], "2d": [215, 239, 278, 366, 522, 656, 694, 759, 804, 866, 872], "sum_a": [215, 278, 522, 694, 759, 804], "min_a": [215, 278, 522, 694, 759, 804], "max_a": [215, 278, 522, 694, 759, 804], "by_pred": [216, 278], "accord": [216, 278, 476, 511, 638, 639, 641, 642, 681, 682, 694, 879, 1023, 1145], "mutual": [216, 278], "exclus": [216, 278, 614, 621, 653, 654, 694], "clariti": [216, 278], "toomanyrowsreturnederror": [216, 278, 705], "norowsreturnederror": [216, 278, 705], "inherit": [216, 278], "rowserror": [216, 278, 705], "high": [218, 278, 511, 694, 1023, 1145], "cost": [218, 278], "reoconstruct": [218, 278], "defaultdict": [218, 278], "assum": [218, 278, 744, 745, 787, 792, 804], "with_replac": [219, 278, 535, 694, 1045, 1145], "ordereddict": [220, 278, 676, 760, 804], "named_expr": [221, 222, 253, 254, 278, 673, 676, 761, 762, 780, 781, 804], "threshold": [221, 278, 761, 804], "set_auto_structifi": [221, 253, 278, 761, 780, 804], "auto_structifi": [221, 253, 278, 761, 780, 804], "is_odd": [221, 278, 761, 804], "_is_odd": [221, 278, 761, 804], "sequenti": [222, 254, 278, 762, 781, 804], "shift_and_fil": [225, 278, 694, 804, 1145], "fill_valu": [226, 247, 278, 539, 694, 766, 804, 1053, 1145], "shift": [226, 278, 337, 437, 504, 539, 628, 694, 766, 804, 861, 969, 1019, 1053, 1145], "shrink": [227, 278, 540, 694, 1054, 1055, 1145], "hold": [227, 278], "ddof": [230, 250, 278, 531, 533, 550, 612, 630, 671, 672, 675, 683, 694, 770, 778, 804, 1041, 1043, 1064, 1134, 1145], "deviat": [230, 278, 386, 531, 550, 675, 694, 770, 804, 915, 1064, 1145], "degre": [230, 250, 278, 513, 531, 533, 550, 612, 623, 630, 671, 672, 675, 683, 694, 770, 778, 804, 1041, 1043, 1064, 1134, 1145], "freedom": [230, 250, 278, 531, 533, 550, 612, 630, 671, 672, 675, 683, 694, 770, 778, 804, 1041, 1043, 1064, 1134, 1145], "divisor": [230, 250, 278, 531, 533, 550, 612, 630, 671, 672, 675, 683, 694, 770, 778, 804, 1041, 1043, 1064, 1134, 1145], "816497": [230, 278], "16a": [231, 278], "27b": [231, 278], "38c": [231, 278], "nth": [233, 278, 578, 602, 694, 773, 804, 1093, 1118, 1145], "mostli": [234, 278, 394, 694], "categoricaltyp": [234, 278], "as_seri": [235, 278, 859, 1023, 1145], "fruit": [235, 278, 519, 557, 579, 694, 1072, 1094], "car": [235, 278, 519, 694], "beetl": [235, 278, 519, 694], "audi": [235, 278, 519, 694], "300": [235, 278, 1035, 1036, 1038, 1145], "drop_first": [237, 278], "dummi": [237, 278, 1122, 1145], "foo_1": [237, 278], "foo_2": [237, 278], "bar_3": [237, 278], "bar_4": [237, 278], "ham_a": [237, 278], "ham_b": [237, 278], "instantiat": [238, 278, 1124, 1145], "from_repr": [238, 278, 1124, 1145], "df_from_str_repr": [238, 278], "eval": [238, 278, 644, 1124, 1145], "indexord": [239, 278], "fortran": [239, 278], "downstream": [239, 278, 537, 694, 1050, 1145], "applic": [239, 278, 477, 525, 526, 527, 528, 529, 531, 532, 533, 694], "prevent": [239, 278, 287, 332, 333, 423, 599, 694, 804, 856, 857, 1115, 1145], "reshap": [239, 278, 441, 694, 973, 1145], "ll": [239, 278], "u1": [239, 278], "f4": [239, 278], "view": [239, 278, 477, 694, 1126, 1145], "recarrai": [239, 278], "rec": [239, 278], "use_pyarrow_extension_arrai": [240, 278, 1127, 1145], "extens": [240, 278, 1127, 1145], "trigger": [240, 278, 1127, 1145], "sent": [240, 278, 1126, 1127, 1145], "pandas_df1": [240, 278], "pandas_df2": [240, 278], "pandas_df2_pa": [240, 278], "na": [240, 278, 579, 1127, 1145], "four": [242, 278], "five": [242, 278, 1153], "bottom_k": [243, 278, 606, 694, 774, 804, 1129, 1145], "include_head": [244, 278], "header_nam": [244, 278], "column_nam": [244, 278], "perhap": [244, 278], "column_2": [244, 278], "name_gener": [244, 278], "base_nam": [244, 278], "my_column_": [244, 278], "my_column_0": [244, 278], "my_column_1": [244, 278], "my_column_2": [244, 278], "new_id": [244, 278], "uniquekeepstrategi": [245, 278, 775, 804], "kept": [245, 278, 775, 804], "decompos": [246, 278, 776, 804], "t_a": [246, 278, 776, 804], "t_b": [246, 278, 776, 804], "t_c": [246, 278, 776, 804], "t_d": [246, 278, 776, 804], "womp": [246, 278, 776, 804], "t_": [246, 278, 776, 804], "t_struct": [246, 278, 776, 804], "step": [247, 278, 621, 653, 654], "unstackdirect": [247, 278], "pivot": [247, 278], "phase": [247, 278], "subject": [247, 278], "ascii_uppercas": [247, 278], "h": [247, 278, 285, 373, 376, 540, 586, 588, 591, 694, 1101, 1103, 1106], "x_0": [247, 278, 385, 386, 387, 694, 914, 915, 916, 1145], "x_1": [247, 278], "y_0": [247, 278, 385, 386, 387, 694, 914, 915, 916, 1145], "y_1": [247, 278], "z_0": [247, 278], "z_1": [247, 278], "syntact": [248, 278, 615, 617, 635, 645, 646, 650, 655, 660, 664, 667, 668, 673, 677, 685, 777, 804, 1063, 1145], "sugar": [248, 278, 615, 617, 635, 645, 646, 650, 655, 660, 664, 667, 668, 673, 677, 685, 777, 804, 1063, 1145], "coalesc": [248, 278, 586, 777, 804, 1101], "400": [248, 278, 777, 804, 1035, 1036, 1038, 1145], "600": [248, 278, 777, 804, 807], "700": [248, 278, 777, 804], "new_df": [248, 278, 777, 804], "time_column": [249, 278], "frequenc": [249, 278], "date_rang": [249, 278, 347, 350, 367, 375, 379, 872, 890, 896, 897, 907, 908], "forward_fil": [249, 278, 330, 333, 694], "varianc": [250, 278, 387, 424, 533, 612, 683, 694, 778, 804, 916, 957, 1043, 1134, 1145], "grow": [251, 278], "not_": [253, 278, 418, 694, 780, 804, 1145], "not_c": [253, 278, 780, 804], "diff": [253, 278, 348, 352, 356, 358, 360, 365, 372, 454, 694, 780, 804, 873, 877, 884, 886, 889, 894, 901, 986, 1145], "_diff": [253, 278, 780, 804], "row_nr": [255, 278, 476, 525, 526, 528, 531, 532, 533, 694, 783, 804, 1049, 1145], "named_agg": [257, 785], "_sum": [257, 785], "_mean_squar": [257, 785], "b_sum": [257, 785], "c_mean_squar": [257, 785], "sub": [259, 264, 305, 306, 307, 694, 826, 827, 828], "map_group": [259, 619, 787], "deem": [260, 631, 788], "nr": [262, 272, 790, 800], "triangl": [264, 792], "group_df": [264, 792], "maxim": [265, 300, 694, 793, 821, 1145], "833333": [266, 794], "minim": [268, 301, 432, 540, 548, 694, 796, 822, 964, 1009, 1054, 1145], "overview": [278, 694, 705, 804, 1145, 1153], "frameinittyp": [278, 804], "entri": [278, 804, 1152], "mydatafram": 278, "df4": 278, "df5": 278, "df6": 278, "approx_uniqu": [278, 804], "corr": 278, "drop_in_plac": 278, "drop_nul": [278, 339, 694, 804, 863, 1145], "estimated_s": [278, 1145], "explod": [278, 396, 503, 518, 694, 804, 1029, 1145], "find_idx_by_nam": 278, "fold": [278, 486, 627, 633, 634, 669], "frame_equ": [278, 377], "group_by_rol": [278, 804], "groupby_dynam": [278, 804], "groupby_rol": [278, 804], "hash_row": 278, "hstack": 278, "insert_at_idx": 278, "is_dupl": [278, 694, 1145], "is_empti": [278, 1145], "is_uniqu": [278, 694, 1145], "iter_slic": 278, "melt": [278, 804], "merge_sort": [278, 804], "n_uniqu": [278, 694, 1145], "pipe": [278, 694, 804], "quantil": [278, 511, 529, 694, 804, 1023, 1039, 1145], "replace_at_idx": 278, "select_seq": [278, 804], "shrink_to_fit": [278, 1145], "take_everi": [278, 694, 804, 1145], "to_dummi": [278, 1145], "to_numpi": [278, 475, 694, 1145], "to_panda": [278, 1145], "to_struct": [278, 560], "unnest": [278, 335, 511, 520, 560, 561, 577, 578, 596, 694, 804, 859, 997, 1023, 1031, 1092, 1093, 1145], "unstack": 278, "with_columns_seq": [278, 804], "write_avro": 278, "write_databas": 278, "write_delta": 278, "write_excel": 278, "write_ipc_stream": 278, "write_json": [278, 804], "write_parquet": 278, "cumprod": [285, 694, 1145], "ghi": [285, 560, 694, 807, 1075], "94": [286, 694], "map_alia": [287, 694], "to_uppercas": [287, 561, 694], "ignore_nul": [288, 290, 385, 386, 387, 615, 617, 694, 811, 812, 914, 915, 916, 1135, 1145], "confus": [288, 417, 419, 694], "kleen": [288, 290, 615, 617, 694, 811, 812, 1145], "bitwis": [289, 502, 614, 615, 616, 617, 618, 694], "upcast": [291, 694], "skip_nul": [292, 477, 694, 814, 1005, 1145], "pass_nam": [292, 477, 694], "mapelementsstrategi": [292, 477, 694], "thread_loc": [292, 477, 694], "map_el": [292, 475, 614, 694, 814, 1145], "unknown": [292, 476, 477, 559, 656, 694, 1074], "stage": [292, 694], "code": [292, 310, 312, 313, 314, 477, 537, 694, 724, 742, 804, 1050, 1145], "gil": [292, 477, 694], "invers": [294, 295, 296, 297, 298, 299, 694, 815, 816, 817, 818, 819, 820, 1145], "cosin": [294, 295, 325, 326, 475, 694, 815, 816, 851, 852, 1145], "570796": [294, 296, 694, 815, 817, 1145], "hyperbol": [295, 297, 299, 326, 544, 604, 694, 816, 818, 820, 852, 1059, 1120, 1145], "sine": [296, 297, 475, 543, 544, 694, 817, 818, 1058, 1059, 1145], "881374": [297, 694, 818, 1145], "tangent": [298, 299, 603, 604, 694, 819, 820, 1119, 1120, 1145], "785398": [298, 622, 623, 694, 819, 1145], "arg_wher": [303, 694], "seen": [309, 399, 694], "substr": [310, 313, 314, 552, 557, 571, 572, 576, 577, 578, 579, 807, 830, 833, 834, 1067, 1072, 1086, 1087, 1091, 1092, 1093, 1094], "ends_with": [310, 314, 552, 579, 807, 1094], "yellow": [310, 312, 313, 314], "x00": [310, 312, 313, 314], "xff": [310, 312, 313, 314], "contains_with_lit": 310, "contains_with_expr": 310, "transferencod": [311, 312, 555, 556, 831, 832, 1070, 1071], "hex": [311, 312, 555, 556, 570, 831, 832, 1070, 1071, 1085], "base64": [311, 312, 555, 556, 831, 832, 1070, 1071], "code_encoded_hex": 312, "000000": 312, "ffff00": 312, "0000ff": 312, "anywher": [313, 314, 586, 587, 588, 1101, 1102, 1103], "ends_with_lit": 313, "ends_with_expr": 313, "starts_with_lit": 314, "starts_with_expr": 314, "complex": [315, 334, 606, 694, 835, 858, 1129, 1145], "frac": [315, 385, 386, 387, 545, 606, 694, 835, 914, 915, 916, 1060, 1129, 1145], "supersed": [316, 694], "to_fram": [318, 350, 370, 375, 377, 586, 859, 1023, 1048, 1049, 1092, 1093, 1101, 1145], "categoricalord": [319, 840], "lexic": [319, 807, 840, 842], "259921": [320, 694, 843, 1145], "587401": [320, 694], "numericliter": [322, 323, 324, 694, 847, 848, 849, 1145], "temporalliter": [322, 323, 324, 694, 847, 848, 849, 1145], "foo_clip": [322, 323, 324, 694], "clip": [323, 324, 694, 848, 849, 1145], "543081": [326, 694, 852, 1145], "cotang": [327, 694, 853, 1145], "cumul": [329, 330, 331, 332, 333, 633, 634, 635, 636, 694, 854, 855, 856, 857, 1145], "a_revers": [329, 330, 331, 332, 333, 474, 519, 598, 694], "value_cummax": [330, 694], "value_cummax_all_fil": [330, 694], "value_cumsum": [333, 694], "value_cumsum_all_fil": [333, 694], "min_period": [334, 385, 386, 387, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 671, 672, 694, 858, 914, 915, 916, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1145], "slide": [334, 694, 858, 1145], "slot": [334, 337, 437, 694, 858, 861, 969, 1145], "realli": [334, 694, 858, 1145], "visit": [334, 694, 858, 1145], "left_clos": [335, 511, 694, 859, 1023, 1145], "include_break": [335, 511, 694, 859, 1023, 1145], "bin": [335, 511, 570, 614, 687, 694, 859, 930, 1023, 1085, 1139, 1145], "discret": [335, 337, 382, 437, 454, 511, 694, 859, 861, 912, 930, 969, 986, 1023, 1145], "plu": [335, 470, 694, 859, 1002, 1023, 1145], "endpoint": [335, 511, 525, 526, 527, 528, 529, 531, 532, 533, 694, 859, 1023, 1145], "observ": [335, 385, 386, 387, 511, 694, 859, 914, 915, 916, 1023, 1145], "fall": [335, 511, 521, 694, 859, 934, 1023, 1032, 1145], "qcut": [335, 694, 859, 1145], "breakpoint": [335, 511, 694, 859, 1023, 1145], "brk": [335, 511, 694], "foo_bin": [335, 511, 694], "radian": [336, 622, 694], "pi": [336, 694, 851, 853, 1058, 1119, 1145], "720": [336, 513, 694], "540": [336, 513, 694], "360": [336, 513, 694], "180": [336, 513, 694], "null_behavior": [337, 437, 694, 861, 969, 1145], "nullbehavior": [337, 437, 694, 861, 969, 1145], "th": [337, 437, 454, 545, 694, 861, 969, 986, 1060, 1145], "drop_nan": [340, 694, 864, 1145], "utc": [341, 344, 349, 369, 586, 588, 807, 866, 869, 874, 898, 1101, 1103], "usual": [341, 866], "vari": [341, 866, 1153], "rare": [341, 866], "countri": [341, 866], "switch": [341, 866], "samoa": [341, 866], "apia": [341, 866], "did": [341, 866], "2011": [341, 866], "dst_offset": [341, 377, 866, 906], "2012": [341, 866], "replace_time_zon": [341, 349, 870, 871, 903], "pacif": [341, 866], "11h": [341, 866], "13h": [341, 866], "lose": [342, 867], "2001": [342, 347, 350, 351, 353, 359, 361, 366, 367, 368, 370, 375, 377, 378, 379, 380, 525, 526, 528, 531, 532, 533, 586, 694, 807, 867, 872, 875, 876, 878, 880, 881, 882, 883, 885, 887, 888, 890, 893, 895, 896, 897, 899, 904, 906, 907, 908, 909, 910, 1101], "time_unit_m": [342, 867], "time_unit_n": [342, 867], "naiv": [343, 868, 1103], "compon": [343, 371, 586, 588, 643, 868, 900, 1101, 1103], "resolv": 343, "tm": [343, 807], "456000": [343, 868], "101000": 343, "456": [343, 807, 868, 1123, 1145], "07": [343, 369, 370, 377, 586, 638, 641, 649, 807, 868, 898, 1101], "101": [343, 570, 1085, 1153], "d1": 343, "d2": 343, "d3": 343, "europ": [344, 349, 369, 377, 869, 874, 898, 906], "london": [344, 349, 369, 377, 869, 874, 898, 906], "gmt": [344, 349, 369, 377, 869, 874, 898, 906], "bst": [344, 349, 369, 377, 869, 874, 898, 906], "weekdai": [347, 367], "ordinal_dai": [347, 379], "day_of_month": [347, 367, 379], "day_of_year": [347, 367, 379], "356": [347, 367, 379], "357": [347, 367, 379], "358": [347, 367, 379], "359": [347, 367, 379], "days_diff": 348, "base_utc_offset": [349, 874], "0m": [349, 874], "epochtimeunit": [350, 649, 875], "unix": [350, 649, 875], "epoch_n": [350, 875], "epoch_": [350, 875], "978307200000000": [350, 375, 875, 904], "978307200": [350, 875], "978393600000000": [350, 375, 875, 904], "978393600": [350, 875], "978480000000000": [350, 375, 875, 904], "978480000": [350, 875], "2010": [351, 359, 807], "hours_diff": 352, "leap": [353, 366, 878, 895], "2002": [353, 366, 878, 895, 910], "iso": [354, 378, 379, 879, 907, 908], "1977": [354, 381], "1978": [354, 381], "1979": [354, 381], "calendar_year": [354, 381], "1976": [354, 381], "1_001": [355, 356, 358, 365], "002": [355, 356, 358, 365, 643, 884, 886, 894], "003": [355, 356, 358, 365], "3000": 355, "997": [355, 356, 358, 365], "997000": 355, "998": [355, 356, 358, 365], "998000": 355, "999": [355, 356, 358, 365, 807, 1153], "999000": [355, 807], "microseconds_diff": 356, "milliseconds_diff": 358, "minutes_diff": 360, "1440": [360, 889], "think": [362, 363, 891, 892], "vectoris": [362, 363, 891, 892], "tseri": [362, 363, 891, 892], "monthend": [362, 891], "rollforward": [362, 891], "monthbegin": [363, 892], "rollback": [363, 892], "nanoseconds_diff": 365, "minu": [366, 895], "dictat": [366, 895], "2005": [366, 895], "date_plus_1i": [366, 895], "1y2mo": [366, 895], "date_min": 366, "1998": [366, 895], "1999": [366, 807, 895], "2003": [366, 649, 895], "2004": [366, 895], "2006": [366, 895], "new_dat": 366, "ordin": [367, 514, 694, 896, 1025, 1145], "366": [367, 896], "use_earliest": [369, 377, 586, 588, 640, 898, 906, 1101, 1103], "ambigu": [369, 370, 377, 586, 588, 640, 898, 899, 906, 1101, 1103], "convert_time_zon": [369, 898], "london_timezon": [369, 898], "amsterdam": [369, 898], "london_to_amsterdam": [369, 898], "cet": [369, 898], "cest": [369, 898], "ts_local": [369, 898], "brussel": [369, 898], "half": [370, 385, 386, 387, 694, 899, 914, 915, 916, 1145], "225": [370, 377], "10m": [370, 377, 899, 906], "milli": [371, 900], "micro": [371, 900], "456789": [371, 807, 900], "111110": [371, 900], "765431": [371, 900], "11111": [371, 900], "seconds_diff": 372, "to_str": [373, 902], "datetime_str": [373, 376], "timestamp_n": [375, 904], "timestamp_m": 375, "978307200000": 375, "978393600000": 375, "978480000000": 375, "strftime": [376, 905], "offset_bi": [377, 643, 906], "15m": [377, 906], "ambiguous_map": 377, "map_dict": [377, 475, 694, 906, 1145], "53": [378, 907], "time_unit_u": 380, "32971": [380, 909], "32974": [380, 909], "32976": [380, 909], "iso_year": 381, "718281828459045": [382, 468, 694, 912, 1000, 1145], "pk": [382, 694, 912, 1145], "probabl": [382, 511, 694, 912, 1023, 1145], "459148": [382, 694], "754888": [382, 694], "eq": [384, 694, 1145], "span": [385, 386, 387, 694, 914, 915, 916, 1145], "half_lif": [385, 386, 387, 694, 914, 915, 916, 1145], "adjust": [385, 386, 387, 545, 694, 914, 915, 916, 1060, 1145], "exponenti": [385, 386, 387, 389, 508, 694, 914, 915, 916, 917, 1145], "weight": [385, 386, 387, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 545, 694, 914, 915, 916, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1060, 1145], "decai": [385, 386, 387, 694, 914, 915, 916, 1145], "term": [385, 386, 387, 694, 914, 915, 916, 1145], "mass": [385, 386, 387, 694, 914, 915, 916, 1145], "gamma": [385, 386, 387, 694, 914, 915, 916, 1145], "foral": [385, 386, 387, 694, 914, 915, 916, 1145], "geq": [385, 386, 387, 694, 914, 915, 916, 1145], "theta": [385, 386, 387, 694, 914, 915, 916, 1145], "life": [385, 386, 387, 694, 914, 915, 916, 1145], "exp": [385, 386, 387, 694, 914, 915, 916, 1145], "ln": [385, 386, 387, 694, 914, 915, 916, 1145], "smooth": [385, 386, 387, 694, 914, 915, 916, 1145], "factor": [385, 386, 387, 605, 694, 914, 915, 916, 1128, 1145], "leq": [385, 386, 387, 694, 914, 915, 916, 1145], "imbal": [385, 386, 387, 694, 914, 915, 916, 1145], "ew": [385, 386, 387, 694, 914, 915, 916, 1145], "w_i": [385, 386, 387, 694, 914, 915, 916, 1145], "recurs": [385, 386, 387, 694, 914, 915, 916, 1145], "y_t": [385, 386, 387, 694, 914, 915, 916, 1145], "y_": [385, 386, 387, 694, 914, 915, 916, 1145], "x_t": [385, 386, 387, 694, 914, 915, 916, 1145], "x_2": [385, 386, 387, 694, 914, 915, 916, 1145], "428571": [385, 694, 914, 1145], "bia": [386, 387, 424, 530, 545, 694, 915, 916, 957, 1040, 1060, 1145], "unbias": [386, 387, 694, 915, 916, 1145], "963624": [386, 694, 915, 1145], "928571": [387, 694, 916, 1145], "wildcard": [388, 633, 634, 647, 669, 694], "regex": [388, 483, 552, 553, 554, 557, 559, 560, 561, 571, 572, 579, 645, 694, 807, 1067, 1068, 1069, 1072, 1074, 1075, 1076, 1086, 1087, 1094], "aa": [388, 552, 645, 694, 1067], "ba": [388, 579, 645, 694, 807], "cc": [388, 645, 694], "718282": [389, 694], "389056": [389, 694], "54": [389, 694, 1153], "59815": [389, 694], "expand": [390, 482, 483, 517, 694, 807, 918, 1145], "pythonliter": [391, 694, 920, 1006, 1009, 1145], "extrem": [391, 524, 694, 920, 1034, 1145], "group_col": [394, 613, 694], "g1": [394, 613, 694], "g2": [394, 613, 694], "lt": [394, 613, 694, 1145], "gte": [394, 613, 694], "exprlistnamespac": [396, 694], "divis": [398, 607, 694], "truediv": [398, 694], "9774092659964970114": [403, 694], "13614470193936745724": [403, 694], "1101441246220388612": [403, 694], "11638928888656214026": [403, 694], "13382926553367784577": [403, 694], "cumsum": [406, 597, 636, 694, 737, 804, 956, 1145], "interpolationmethod": [407, 694, 933, 1145], "regrid": [407, 694], "grid": [407, 694], "df_original_grid": [407, 694], "grid_point": [407, 694], "df_new_grid": [407, 694], "conflat": [408, 694], "finit": [410, 607, 630, 694, 938, 1145], "occurr": [411, 412, 415, 416, 611, 694, 930, 939, 940, 945, 946, 1133, 1145], "is_first_distinct": [411, 694, 939, 1145], "optional_memb": [413, 694, 942, 1145], "infinit": [414, 607, 694, 943, 1145], "is_last_distinct": [415, 694, 945, 1145], "_isnan": [417, 694], "b_isnan": [417, 694], "negat": [418, 500, 694, 1017, 1145], "_is_not_nan": [419, 694], "b_is_not_nan": [419, 694], "_not_nul": [420, 694], "a_not_nul": [420, 694], "b_not_nul": [420, 694], "_isnul": [421, 694], "a_isnul": [421, 694], "b_isnul": [421, 694], "chain": [423, 509, 598, 684, 694], "undo": [423, 489, 509, 598, 694], "fisher": [424, 545, 694, 957, 1060, 1145], "fourth": [424, 694, 957, 1145], "subtract": [424, 597, 694, 957, 1145], "distribut": [424, 545, 694, 957, 1060, 1145], "elimin": [424, 694, 957, 1145], "bias": [424, 545, 694, 957, 1060, 1145], "scipi": [424, 545, 694, 957, 1060, 1145], "stat": [424, 545, 694, 957, 1060, 1145], "153061": [424, 694], "sublist": [431, 432, 434, 437, 442, 443, 444, 446, 447, 454, 459, 463, 464, 465, 942, 963, 964, 966, 969, 974, 975, 976, 978, 979, 986, 991, 995, 996, 997, 1145], "membership": [434, 966], "listcol": 436, "number_of_two": 436, "set_differ": [438, 970], "blindli": [440, 972], "worth": [440, 972], "enough": [440, 545, 694, 972, 1060, 1145], "concat_list": [440, 644, 972], "rank": [440, 630, 644, 694, 972, 1145], "exprnamespac": 441, "flat": [441, 518, 694, 973, 1029, 1145], "set_intersect": [445, 977], "x_y": 446, "symmetr": [456, 462, 988, 994], "sdiff": 456, "taken": [459, 575, 991, 1090], "set_symmetric_differ": [462, 994], "null_on_oob": [464, 996], "cheaper": [464, 996], "n_field_strategi": [465, 997], "tostructstrategi": [465, 997], "first_non_nul": [465, 997], "max_width": [465, 997], "field_0": [465, 997], "field_1": [465, 997], "field_n": [465, 997], "pre": [465, 477, 511, 667, 670, 685, 694, 1023, 1145], "n0": 465, "n1": 465, "set_union": [466, 998], "logarithm": [468, 469, 470, 694, 1000, 1001, 1002, 1145], "584963": [468, 694], "30103": [469, 694], "60206": [469, 694], "natur": [470, 694, 1002, 1145], "693147": [470, 694], "098612": [470, 694], "386294": [470, 694], "lowest": [471, 694], "9223372036854775808": [471, 694], "agg_list": [473, 475, 694], "map_batch": [473, 657, 694, 744, 804], "b_revers": [474, 519, 598, 694], "rstrip": [474, 694], "_revers": [474, 519, 598, 694], "whole": [475, 547, 548, 559, 694, 792, 804, 1074], "elementwis": [475, 523, 524, 525, 526, 528, 532, 694, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1145], "third": [475, 694], "parti": [475, 694], "book": [475, 694], "bug": [475, 477, 694, 744, 745, 787, 792, 804, 1005, 1145], "func": [475, 694], "argmax": [475, 694], "remap": [476, 694, 1004, 1145], "lookup": [476, 690, 694, 1004, 1145], "country_code_dict": [476, 694], "ca": [476, 694], "canada": [476, 694], "de": [476, 694], "germani": [476, 694], "fr": [476, 694], "franc": [476, 694], "country_cod": [476, 694], "rest": [476, 694], "discourag": [477, 694], "loop": [477, 694], "a_times_2": [477, 694], "tip": [477, 694], "again": [477, 694], "behav": [477, 694, 813, 1145], "exprmetanamespac": [481, 484], "foo_bar2": [481, 484], "raise_if_undetermin": 485, "computeerror": [485, 570, 705, 1085], "e_filt": [485, 487], "e_sum_ov": [485, 487], "e_sum_slic": [485, 487], "tree": 488, "keep_nam": [489, 694], "modulu": [492, 694], "xlog2": [494, 508, 694], "poison": [496, 497, 694, 1014, 1015, 1145], "nanmax": [496, 497, 694, 1014, 1015, 1145], "inequ": [498, 694], "ne": [499, 694, 1145], "more_expr": [503, 624, 627, 628, 629, 694], "mapping_strategi": [503, 694], "windowmappingstrategi": [503, 694], "group_to_row": [503, 694], "outcom": [503, 694], "group_dtyp": [503, 694], "warn": [503, 694], "flatten": [503, 694], "_max": [503, 694], "c_max": [503, 694], "_min": [503, 694], "c_min": [503, 694], "percent": [504, 694, 1019, 1145], "090909": [504, 694], "peak": [505, 506, 694, 1020, 1021, 1145], "extract_numb": [507, 694], "digit": [507, 534, 560, 594, 694, 1044, 1069, 1075, 1109, 1145, 1153], "scale_negative_even": [507, 694], "expon": [508, 694, 1145], "reverse_": [509, 694], "reverse_a": [509, 694], "reverse_b": [509, 694], "allow_dupl": [511, 694, 1023, 1145], "duplicateerror": [511, 694, 705, 1023, 1145], "happen": [511, 694, 1023, 1145], "cut": [511, 694, 1023, 1145], "566371": [513, 694], "424778": [513, 694], "283185": [513, 694], "141593": [513, 694, 815, 1145], "rankmethod": [514, 694, 1025, 1145], "ti": [514, 694, 1025, 1145], "competit": [514, 694, 1025, 1145], "highest": [514, 610, 630, 694, 804, 1025, 1145], "immedi": [514, 621, 625, 638, 639, 641, 642, 653, 654, 667, 670, 676, 681, 682, 685, 694, 1025, 1145], "safe": [516, 694, 1027, 1103, 1126, 1145], "fruits_revers": [519, 694], "cars_revers": [519, 694], "rle": [521, 694, 1032, 1145], "themselv": [521, 694, 1032, 1145], "a_r": [521, 694], "ab_r": [521, 694], "window_s": [523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 671, 672, 694, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1145], "rolling_map": [523, 694, 1033, 1145], "multipli": [523, 524, 525, 526, 528, 531, 532, 533, 694, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1145], "rolling_sum": [524, 694, 1034, 1145], "nansum": [524, 694, 1034, 1145], "travers": [525, 526, 528, 532, 694, 1035, 1036, 1038, 1041, 1042, 1043, 1145], "vector": [525, 526, 528, 532, 694, 1035, 1036, 1038, 1041, 1042, 1043, 1145], "5h": [525, 526, 527, 528, 529, 531, 532, 533, 694], "df_tempor": [525, 526, 528, 531, 532, 533, 694], "closur": [525, 526, 531, 532, 533, 694], "rolling_row_max": [525, 694], "2h": [525, 526, 528, 531, 532, 533, 694], "rolling_row_mean": [526, 694], "rolling_row_min": [528, 694], "625": [529, 694], "skew": [530, 694, 1040, 1145], "381802": [530, 694, 1040, 1145], "47033": [530, 694, 1040, 1145], "38180177416060584": [530, 694, 1040, 1145], "47033046033698594": [530, 694, 1040, 1145], "433013": [531, 694, 770, 804], "rolling_row_std": [531, 694], "rolling_row_sum": [532, 694], "39": [532, 649, 694], "63": [532, 694], "69": [532, 694], "1875": [533, 694, 778, 804], "rolling_row_var": [533, 694], "searchsortedsid": [536, 694, 1046, 1145], "leftmost": [536, 694, 1046, 1145], "rightmost": [536, 694, 1046, 1145], "six": [536, 694], "foo_shift": [538, 539, 694], "extrema": [540, 694, 1054, 1145], "112": [540, 694, 1153], "129": [540, 694], "i8": [540, 667, 670, 685, 694, 861, 1030, 1132, 1145], "8589934592": [540, 694], "1073741824": [540, 694], "content": [541, 694, 1056, 1145], "175201": [544, 694, 1059, 1145], "unimod": [545, 694, 1060, 1145], "skewtest": [545, 694, 1060, 1145], "speak": [545, 694, 1060, 1145], "g_1": [545, 694, 1060, 1145], "m_3": [545, 694, 1060, 1145], "m_2": [545, 694, 1060, 1145], "m_i": [545, 694, 1060, 1145], "sum_": [545, 694, 1060, 1145], "texttt": [545, 694, 1060, 1145], "k_3": [545, 694, 1060, 1145], "k_2": [545, 694, 1060, 1145], "sqrt": [545, 622, 623, 694, 1060, 1145], "343622": [545, 694], "value1": [548, 694], "value2": [548, 694], "attain": [548, 694], "414214": [549, 694, 1063, 1145], "sensit": [552, 560, 571, 1067, 1075, 1086], "ilmsuxu": [552, 559, 560, 571, 1067, 1074, 1075, 1086], "default_match": 552, "insensitive_match": 552, "crab": [552, 1067], "dog": [552, 590, 593, 629, 1067, 1105, 1108], "rab": [552, 1067], "success": [553, 554, 560, 1068, 1069, 1075], "overlap": [553, 554, 560, 1068, 1069, 1075], "123": [554, 560, 572, 807, 1069, 1075, 1087, 1123, 1145], "bla": [554, 560, 1069, 1075], "asd": [554, 560, 1069, 1075], "678": [554, 560, 1069, 1075], "910t": [554, 560, 1069, 1075], "count_digit": 554, "dbc": [554, 1069], "3xy": [554, 1069], "1zy3": [554, 1069], "666f6f": [556, 1071], "626172": [556, 1071], "mango": [557, 579, 1072, 1094], "has_suffix": 557, "le": [557, 694, 1145], "nu": 557, "group_index": [559, 1074], "captur": [559, 561, 1074, 1076], "nthose": [559, 1074], "nodd": [559, 1074], "nthe": [559, 1074], "vote": [559, 561, 1074, 1076], "ballon_dor": [559, 561, 1074, 1076], "404": [559, 561, 1074, 1076], "ref": [559, 561, 1074, 1076], "candid": [559, 561, 1074, 1076], "messi": [559, 561, 1074, 1076], "ronaldo": [559, 1074], "haystack": [560, 1075], "email": [560, 1075], "real": [560, 1075], "some_account": [560, 1075], "somewher": [560, 1075], "net": [560, 1075], "jkl": [560, 1075], "uvw": [560, 1075], "co": [560, 694, 1075, 1145], "uk": [560, 1075], "address": 560, "xi": [560, 1075], "insensit": [560, 571, 807, 1067, 1075, 1086], "char": [560, 1075], "quantifi": [560, 1075], "email_part": [560, 1075], "extracted_nr": 560, "910": [560, 1075], "unnam": [561, 1076], "weghorst": [561, 1076], "candi": 561, "json_path_match": [562, 1077], "jsonpath": [562, 563, 1077, 1078], "json_path": [563, 1078], "json_val": [563, 1078], "len_char": [564, 569, 1079, 1084], "_o": [564, 565, 1079, 1080], "caf\u00e9": [564, 565, 1079, 1080], "345": [564, 565, 1079, 1080], "\u6771\u4eac": [564, 565, 1079, 1080], "n_byte": [564, 565], "n_char": [564, 565], "fill_char": [567, 573, 1082, 1088], "justifi": [567, 573, 1082, 1088], "pad": [567, 573, 594, 1082, 1088, 1109], "cow": [567, 573, 1082, 1088], "monkei": [567, 573, 1082, 1088], "hippopotamu": [567, 573, 1082, 1088], "strip_chars_start": [568, 1083], "strip": [568, 574, 581, 582, 583, 584, 585, 1083, 1089, 1096, 1097, 1098], "radix": [570, 1085], "parseerror": [570, 1085], "becom": [570, 1085], "silent": [570, 1085], "110": [570, 1085], "010": [570, 1085], "fa1e": [570, 1085], "ff00": [570, 1085], "cafe": [570, 1085], "64030": [570, 1085], "65280": [570, 1085], "51966": [570, 1085], "replace_al": [571, 1086], "citi": 571, "philadelphia": 571, "season": 571, "spring": 571, "summer": 571, "autumn": 571, "winter": 571, "weather": [571, 1086], "raini": [571, 1086], "sunni": [571, 1086], "cloudi": 571, "snowi": 571, "foggi": [571, 1086], "123abc": [571, 1086], "abc456": [571, 1086], "abcabc": [572, 1087], "123a123": [572, 1087], "bc": [572, 677, 1087], "strip_chars_end": [574, 1089], "subslic": [575, 1090], "pear": [575, 1090], "papaya": [575, 1090], "dragonfruit": [575, 1090], "s_slice": 575, "ear": [575, 1090], "aya": [575, 1090], "uit": [575, 1090], "ya": [575, 1090], "onf": [575, 1090], "foo_bar_baz": 576, "split_inclus": 576, "foo_": [576, 648], "bar_": 576, "a_1": [577, 1092, 1122, 1145], "d_4": [577, 1092], "rename_field": [577, 578, 859, 1023, 1092, 1093, 1145], "first_part": [577, 578, 1092, 1093], "second_part": [577, 578, 1092, 1093], "remaind": [578, 1093], "app": [579, 1094], "has_prefix": 579, "strip_char": [580, 1095], "nworld": 581, "ow": 581, "hell": [581, 1096], "rld": [581, 583, 1098], "oldw": 582, "he": 582, "tworld": [583, 1096, 1098], "wod": [583, 1098], "foobar": [584, 585, 1099, 1100], "foofoobar": [584, 1099], "foobarbar": [585, 1100], "polarstemporaltyp": [586, 1101], "penalti": [586, 587, 588, 1101, 1102, 1103], "clean": [586, 587, 588, 1101, 1102, 1103], "beforehand": [586, 587, 588, 1101, 1102, 1103], "certainli": [586, 587, 588, 1101, 1102, 1103], "3f": [586, 588, 1101, 1103], "00z": [586, 588, 1101, 1103], "sun": [586, 1101], "jul": [586, 1101], "34": [586, 1101], "inference_length": [589, 1104], "3420": [589, 1104], "120134": [589, 1104], "3212": [589, 1104], "90": [589, 1104], "143": [589, 1104, 1153], "lowercas": [590, 1105], "variant": [590, 592, 593], "titlecas": [592, 1107], "sing": [592, 1107], "welcom": [592, 1107], "THERE": [592, 1107], "NO": [592, 807, 1107], "There": [592, 1107], "uppercas": [593, 1108], "100000": 594, "0010": 594, "0001": 594, "00000": 594, "00001": 594, "cd": [595, 596], "struct_col": [595, 596], "www": 596, "xxx": 596, "yyi": 596, "zzz": 596, "obvious": 596, "structfieldnotfounderror": [596, 705], "761594": [604, 694, 1120, 1145], "replic": [605, 694, 1128, 1145], "vals_phys": [605, 694], "floordiv": [607, 694], "ieee": [607, 694], "754": [607, 694], "mathemat": [607, 644, 694], "undefin": [607, 694], "On": [607, 694], "operand": [607, 694], "infin": [607, 694], "value_count": [609, 694, 1145], "9223372036854775807": [610, 694], "binary_str": [614, 694], "zfill": [614, 694], "250": [614, 694, 1036, 1145, 1153], "bin_x": [614, 694], "bin_i": [614, 694], "xor_xi": [614, 694], "bin_xor_xi": [614, 694], "00001010": [614, 694], "00001011": [614, 694], "00001000": [614, 694], "00000010": [614, 694], "11111010": [614, 694], "00000011": [614, 694], "249": [614, 694], "11111001": [614, 694], "01000010": [614, 694], "00000100": [614, 694], "70": [614, 694], "01000110": [614, 694], "AND": [615, 616, 807, 1126, 1145], "OR": [617, 618, 727, 804, 807], "any_horizont": 617, "returns_scalar": [619, 659], "polarsintegertyp": [621, 653, 654], "arctan": [622, 623, 694, 1145], "angl": [622, 623], "plane": [622, 623], "rai": [622, 623], "tworoottwo": [622, 623], "arctan2d": 622, "atan2d": [622, 623], "atan2": [622, 623], "135": [622, 623], "356194": [622, 623], "arctan2": 623, "arg_tru": [625, 694, 1145], "lag": 628, "mimic": 628, "a_lag_": 628, "a_rol": 628, "swim": 629, "walk": 629, "full_sent": 629, "correlationmethod": 630, "propagate_nan": 630, "spearman": 630, "544705": 630, "covari": [632, 672], "acc": [633, 634, 647, 669], "include_init": 633, "accumul": [633, 634, 647, 669], "fn": [633, 634, 647, 669], "new_valu": [633, 634, 647, 669], "cumreduc": 633, "cumsum_horizont": 635, "month_end": 638, "granular": 638, "finer": 638, "permut": 638, "1985": [638, 641], "999999": [640, 680, 681, 682, 807], "america": 641, "new_york": 641, "est": 641, "contrast": 643, "sometim": [643, 693], "tbl_width_char": 643, "120": 643, "add_week": 643, "add_dai": 643, "add_second": 643, "add_milli": 643, "add_hour": 643, "add_calendar_dai": 643, "add_calendar_month": 643, "mo": 643, "add_calendar_year": 643, "2024": [643, 807], "a_b_doubl": 644, "f_string": 648, "placehold": 648, "hello_": 648, "_world": 648, "_bar_": 648, "foo_a_bar_1": 648, "foo_b_bar_2": 648, "foo_c_bar_3": 648, "epoch": 649, "timestep": 649, "1666683077": 649, "1666683099": 649, "12345": [649, 844, 925, 1044, 1145], "12346": 649, "agg_group": [650, 694], "allow_object": 656, "valueexcept": 656, "test_func": 658, "list_of_seri": 659, "my_custom_aggreg": 659, "understood": 659, "max_horizont": 660, "min_horizont": [664, 673], "power": [674, 1145], "a_a": 674, "a_txt": 674, "605551": 675, "605551275463989": 675, "my_struct": 676, "thens": 684, "elif": 684, "pick": 684, "own": [684, 1153], "isn": 684, "arr": [686, 1126, 1137, 1145], "technic": 690, "further": [690, 1127, 1145], "columnfactori": 690, "more_nam": 690, "__call__": 690, "helper": 690, "__getattr__": 690, "idiomat": [690, 792], "quick": [690, 860, 1145, 1153], "prototyp": 690, "keystrok": 690, "drawback": 690, "readabl": 690, "modul": [693, 807, 1153], "and_": 694, "arcco": [694, 1145], "arccosh": [694, 1145], "arcsin": [694, 1145], "arcsinh": [694, 1145], "arctanh": [694, 1145], "arg_max": [694, 1145], "arg_min": [694, 1145], "arg_sort": [694, 1145], "arg_uniqu": [694, 1145], "backward_fil": 694, "cbrt": [694, 1145], "clip_max": [694, 1145], "clip_min": [694, 1145], "cosh": [694, 1145], "cot": [694, 1145], "cumcount": 694, "cummax": [694, 1145], "cummin": [694, 1145], "cumulative_ev": [694, 1145], "entropi": [694, 1145], "eq_miss": [694, 1145], "ewm_mean": [694, 1145], "ewm_std": [694, 1145], "ewm_var": [694, 1145], "extend_const": [694, 1145], "from_json": [694, 804], "ge": [694, 1145], "gt": [694, 1145], "implod": [694, 1145], "inspect": [694, 804], "is_between": [694, 1145], "is_finit": [694, 1145], "is_first": [694, 1145], "is_in": [694, 1145], "is_infinit": [694, 1145], "is_last": [694, 1145], "is_nan": [694, 1145], "is_not": 694, "is_not_nan": [694, 1145], "is_not_nul": [694, 1145], "kurtosi": [694, 1145], "log10": [694, 1145], "log1p": [694, 1145], "mod": 694, "mul": 694, "nan_max": [694, 1145], "nan_min": [694, 1145], "ne_miss": [694, 1145], "or_": 694, "pct_chang": [694, 1145], "peak_max": [694, 1145], "peak_min": [694, 1145], "pow": [694, 1145], "reinterpret": [694, 1145], "repeat_bi": 694, "rle_id": [694, 1145], "rolling_appli": [694, 1145], "rolling_max": [694, 1145], "rolling_mean": [694, 1145], "rolling_median": [694, 1145], "rolling_min": [694, 1145], "rolling_quantil": [694, 1145], "rolling_skew": [694, 1145], "rolling_std": [694, 1145], "rolling_var": [694, 1145], "search_sort": [694, 1145], "shrink_dtyp": [694, 1145], "sin": [694, 1145], "sinh": [694, 1145], "sort_bi": 694, "tan": [694, 1145], "to_phys": [694, 841, 1145], "unique_count": [694, 1145], "xor": 694, "expos": 705, "miscellan": 705, "arrowerror": 705, "columnnotfounderror": 705, "invalidoperationerror": 705, "polarspanicerror": 705, "schemaerror": 705, "schemafieldnotfounderror": 705, "shapeerror": 705, "parametr": 705, "build_info": 705, "get_index_typ": 705, "show_vers": 705, "threadpool_s": 705, "sqlcontext": [705, 1152], "hit": [711, 804], "node": [711, 715, 737, 744, 745, 749, 754, 757, 804], "_eager": [715, 804], "explain": [715, 804], "purpos": [715, 724, 804], "set_streaming_chunk_s": [715, 804], "collect_all_async": [716, 804], "async": [716, 804], "stringio": [718, 729, 763, 804], "snippet": [720, 804], "Be": [724, 804], "fewer": [724, 804], "suscept": [724, 804], "deseri": [729, 756, 763, 804], "lazygroupbi": [730, 731, 732, 733, 734, 735, 759, 804], "other_lf": [739, 804], "validate_output_schema": [744, 745, 804], "streamabl": [744, 745, 749, 804], "past": [744, 745, 804], "paramount": [744, 745, 804], "elig": [744, 745, 804], "invari": [745, 804], "upheld": [745, 804], "100_000": [745, 804], "200000": [745, 804], "199998": [745, 804], "199996": [745, 804], "199994": [745, 804], "199992": [745, 804], "show_plot": [754, 804], "truncate_nod": [754, 804], "figsiz": [754, 767, 804], "gantt": [754, 804], "plot": [754, 767, 804], "group_by_partit": [754, 804], "470": [754, 804], "475": [754, 804], "1964": [754, 804], "swap": [757, 804], "dynamic_group_bi": [759, 804], "dataframescan": [763, 804], "output_schema": [763, 804], "run_parallel": [763, 804], "duplicate_check": [763, 804], "later": [763, 804], "output_path": [767, 804], "raw_output": [767, 804], "figur": [767, 804], "290994": [770, 804], "118034": [770, 804], "implicit": [777, 804], "upsert": [777, 804], "new_lf": [777, 804], "extern": [782, 804], "lf_other": [782, 804], "afoo": [782, 804], "cfoo": [782, 804], "train_lf": [782, 804], "feature_0": [782, 804], "feature_1": [782, 804], "test_lf": [782, 804], "_train": [782, 804], "feature_0_train": [782, 804], "opaqu": 792, "my_column": 792, "lf5": 804, "lf6": 804, "read_json": 804, "sink_csv": 804, "sink_ipc": 804, "sink_parquet": 804, "with_context": 804, "intuit": 807, "broadcast": 807, "emploi": 807, "complement": 807, "plenti": 807, "cde": 807, "fgg": 807, "jjk": 807, "lmn": 807, "opp": 807, "qqr": 807, "by_dtyp": 807, "as_expr": 807, "dispatch": 807, "1_234_500": 807, "5_000_555": 807, "1234500": 807, "5000555": 807, "by_nam": 807, "4_500_000": 807, "4500000": 807, "3265500": 807, "zap": 807, "2031": 807, "tstamp_tokyo": 807, "987654": 807, "123465": 807, "tstamp_utc": 807, "2025": 807, "666000": 807, "tstamp": 807, "600000": 807, "123000": 807, "666": 807, "td1": 807, "123456": 807, "987000": 807, "td2": 807, "td3": 807, "2m": [807, 888], "456m": 807, "7d": 807, "456789\u00b5": 807, "18d": 807, "999999\u00b5": 807, "23h": 807, "987m": 807, "14d": 807, "16h": 807, "39m": 807, "21d": 807, "456001\u00b5": 807, "expand_selector": 807, "789": 807, "colz": [807, 1153], "everyth": 807, "signed_integ": 807, "unsigned_integ": 807, "is_selector": 807, "obj": 807, "_selector_proxy_": 807, "include_categor": 807, "set_ord": [807, 842], "2345": 807, "3456": 807, "append_chunk": [813, 1145], "super": [813, 1145], "292432": [816, 1145], "549306": [820, 1145], "catnamespac": 837, "56789": [844, 925, 1044, 1145], "901234": [844, 925, 1044, 1145], "1232e": [851, 853, 1145], "1656e15": [853, 1145], "break_point_label": [859, 1023, 1145], "break_point": [859, 930, 1023, 1145], "category_label": [859, 1023, 1145], "series_num": [860, 1145], "581139": [860, 1145], "series_str": [860, 1145], "datetimeindex": [862, 1145], "datetimenamespac": 865, "ser": [870, 871, 903], "kathmandu": [870, 871, 903], "0545": [870, 871, 903], "500m": [883, 885, 893], "500000": 883, "500000000": 893, "date_minus_1y_2mon": 895, "165": [899, 906], "series_equ": [899, 1145], "timestamp_u": 904, "978307200000000000": 904, "978393600000000000": 904, "978480000000000000": 904, "005": [912, 1145], "06293300616044681": [912, 1145], "65": [912, 1145], "8568409950394724": [912, 1145], "4000000": [913, 1145], "814697265625": [913, 1145], "bitmask": [927, 1145], "absenc": [927, 1145], "presenc": [927, 1126, 1145], "confirm": [927, 1145], "10734580197236529959": [928, 1145], "3022416320763508302": [928, 1145], "13756996518000038261": [928, 1145], "bin_count": [930, 1145], "a_count": [930, 1145], "listnamespac": 960, "field_2": 997, "n00": 997, "n01": 997, "n02": 997, "2147483648": [1003, 1145], "iso3166": [1004, 1145], "tur": [1004, 1107, 1145], "jpn": [1004, 1145], "nld": [1004, 1145], "country_lookup": [1004, 1145], "japan": [1004, 1145], "t\u00fcrkiy": [1004, 1145], "netherland": [1004, 1145], "unrecognis": [1004, 1145], "unspecifi": [1004, 1145], "country_nam": [1004, 1145], "166667": [1019, 1145], "142857": [1019, 1145], "200": [1035, 1036, 1038, 1145], "150": [1036, 1145], "350": [1036, 1145], "450": [1036, 1145], "dev": [1041, 1145], "527525": [1041, 1145], "57": [1044, 1145, 1153], "frequent": [1048, 1049, 1145], "mutat": [1049, 1145], "2246e": [1058, 1119, 1145], "stringnamespac": 1065, "orld": 1097, "6331e16": [1119, 1145], "lib": [1121, 1145], "int64arrai": [1121, 1145], "a_2": [1122, 1145], "a_3": [1122, 1145], "s_from_str_repr": [1124, 1145], "zero_copy_onli": [1126, 1145], "writabl": [1126, 1145], "immut": [1126, 1145], "127": [1132, 1145], "seriesview": [1135, 1145], "arraylik": 1145, "dtype_if_empti": 1145, "position": 1145, "scenario": 1145, "chunk_length": 1145, "333": 1145, "get_chunk": 1145, "has_valid": 1145, "hist": 1145, "is_boolean": 1145, "is_float": 1145, "is_integ": 1145, "is_numer": [1145, 1153], "is_sort": 1145, "is_tempor": 1145, "is_utf8": 1145, "new_from_index": 1145, "set_at_idx": 1145, "two_a": 1152, "__enter__": 1152, "__exit__": 1152, "exc_typ": 1152, "baseexcept": 1152, "exc_val": 1152, "exc_tb": 1152, "tracebacktyp": 1152, "primari": 1153, "guid": 1153, "machin": 1153, "xdist": 1153, "hardwar": 1153, "setup": 1153, "sec": 1153, "numeric_dtyp": 1153, "null_probabililti": 1153, "test_numer": 1153, "col0": 1153, "col4": 1153, "29096": 1153, "485": 1153, "2147483647": 1153, "8257e14": 1153, "7508": 1153, "37338": 1153, "7264": 1153, "321": 1153, "16996": 1153, "121": 1153, "361": 1153, "63204": 1153, "1443e235": 1153, "conform": 1153, "ascii_lett": 1153, "id_char": 1153, "alphabet": 1153, "price": 1153, "min_valu": 1153, "max_valu": 1153, "test_price_calcul": 1153, "a101": 1153, "8nin": 1153, "qhoo": 1153, "714": 1153, "544": 1153, "i0e0": 1153, "0000": 1153, "test_miscellan": 1153, "235": 1153, "87": 1153, "186": 1153, "174": 1153, "179": 1153, "213": 1153, "221": 1153, "86": 1153, "255": 1153}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [39, 0, 1, "", "DataType"], [40, 0, 1, "", "Date"], [41, 0, 1, "", "Datetime"], [42, 0, 1, "", "Decimal"], [43, 0, 1, "", "Duration"], [44, 0, 1, "", "Float32"], [45, 0, 1, "", "Float64"], [46, 0, 1, "", "Int16"], [47, 0, 1, "", "Int32"], [48, 0, 1, "", "Int64"], [49, 0, 1, "", "Int8"], [53, 0, 1, "", "List"], [54, 0, 1, "", "Null"], [55, 0, 1, "", "Object"], [1152, 0, 1, "", "SQLContext"], [62, 0, 1, "", "StringCache"], [63, 0, 1, "", "Struct"], [64, 0, 1, "", "Time"], [65, 0, 1, "", "UInt16"], [66, 0, 1, "", "UInt32"], [67, 0, 1, "", "UInt64"], [68, 0, 1, "", "UInt8"], [69, 0, 1, "", "Unknown"], [70, 0, 1, "", "Utf8"], [71, 4, 1, "", "align_frames"], [615, 4, 1, "", "all"], [616, 4, 1, "", "all_horizontal"], [617, 4, 1, "", "any"], [618, 4, 1, "", "any_horizontal"], [619, 4, 1, "", "apply"], [620, 4, 1, "", "approx_n_unique"], [621, 4, 1, "", "arange"], [622, 4, 1, "", "arctan2"], [623, 4, 1, "", "arctan2d"], [624, 4, 1, "", "arg_sort_by"], [625, 4, 1, "", "arg_where"], [626, 4, 1, "", "avg"], [76, 4, 1, "", "build_info"], [627, 4, 1, "", "coalesce"], [77, 4, 1, "", "collect_all"], [78, 4, 1, "", "collect_all_async"], [79, 4, 1, "", "concat"], [628, 4, 1, "", "concat_list"], [629, 4, 1, "", "concat_str"], [630, 4, 1, "", "corr"], [631, 4, 1, "", "count"], [632, 4, 1, "", "cov"], [633, 4, 1, "", "cumfold"], [634, 4, 1, "", "cumreduce"], [635, 4, 1, "", "cumsum"], [636, 4, 1, "", "cumsum_horizontal"], [637, 4, 1, "", "date"], [638, 4, 1, "", "date_range"], [639, 4, 1, "", "date_ranges"], [640, 4, 1, "", "datetime"], [641, 4, 1, "", "datetime_range"], [642, 4, 1, "", "datetime_ranges"], [80, 4, 1, "", "disable_string_cache"], [643, 4, 1, "", "duration"], [644, 4, 1, "", "element"], [81, 4, 1, "", "enable_string_cache"], [645, 4, 1, "", "exclude"], [646, 4, 1, "", "first"], [647, 4, 1, "", "fold"], [648, 4, 1, "", "format"], [96, 4, 1, "", "from_arrow"], [97, 4, 1, "", "from_dataframe"], [98, 4, 1, "", "from_dict"], [99, 4, 1, "", "from_dicts"], [649, 4, 1, "", "from_epoch"], [100, 4, 1, "", "from_numpy"], [101, 4, 1, "", "from_pandas"], [102, 4, 1, "", "from_records"], [103, 4, 1, "", "from_repr"], [104, 4, 1, "", "get_index_type"], [650, 4, 1, "", "groups"], [651, 4, 1, "", "head"], [652, 4, 1, "", "implode"], [653, 4, 1, "", "int_range"], [654, 4, 1, "", "int_ranges"], [655, 4, 1, "", "last"], [656, 4, 1, "", "lit"], [657, 4, 1, "", "map"], [658, 4, 1, "", "map_batches"], [659, 4, 1, "", "map_groups"], [660, 4, 1, "", "max"], [661, 4, 1, "", "max_horizontal"], [662, 4, 1, "", "mean"], [663, 4, 1, "", "median"], [664, 4, 1, "", "min"], [665, 4, 1, "", "min_horizontal"], [666, 4, 1, "", "n_unique"], [667, 4, 1, "", "ones"], [668, 4, 1, "", "quantile"], [106, 4, 1, "", "read_avro"], [107, 4, 1, "", "read_csv"], [108, 4, 1, "", "read_csv_batched"], [109, 4, 1, "", "read_database"], [110, 4, 1, "", "read_database_uri"], [111, 4, 1, "", "read_delta"], [112, 4, 1, "", "read_excel"], [113, 4, 1, "", "read_ipc"], [114, 4, 1, "", "read_ipc_schema"], [115, 4, 1, "", "read_ipc_stream"], [116, 4, 1, "", "read_json"], [117, 4, 1, "", "read_ndjson"], [118, 4, 1, "", "read_ods"], [119, 4, 1, "", "read_parquet"], [120, 4, 1, "", "read_parquet_schema"], [669, 4, 1, "", "reduce"], [670, 4, 1, "", "repeat"], [671, 4, 1, "", "rolling_corr"], [672, 4, 1, "", "rolling_cov"], [121, 4, 1, "", "scan_csv"], [122, 4, 1, "", "scan_delta"], [123, 4, 1, "", "scan_iceberg"], [124, 4, 1, "", "scan_ipc"], [125, 4, 1, "", "scan_ndjson"], [126, 4, 1, "", "scan_parquet"], [127, 4, 1, "", "scan_pyarrow_dataset"], [673, 4, 1, "", "select"], [807, 6, 0, "-", "selectors"], [128, 4, 1, "", "set_random_seed"], [129, 4, 1, "", "show_versions"], [674, 4, 1, "", "sql_expr"], [675, 4, 1, "", "std"], [676, 4, 1, "", "struct"], [677, 4, 1, "", "sum"], [678, 4, 1, "", "sum_horizontal"], [679, 4, 1, "", "tail"], [141, 4, 1, "", "threadpool_size"], [680, 4, 1, "", "time"], [681, 4, 1, "", "time_range"], [682, 4, 1, "", "time_ranges"], [142, 4, 1, "", "using_string_cache"], [683, 4, 1, "", "var"], [684, 4, 1, "", "when"], [685, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_fmt_float"], [14, 1, 1, "", "set_fmt_str_lengths"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cols"], [18, 1, 1, "", "set_tbl_column_data_type_inline"], [19, 1, 1, "", "set_tbl_dataframe_shape_below"], [20, 1, 1, "", "set_tbl_formatting"], [21, 1, 1, "", "set_tbl_hide_column_data_types"], [22, 1, 1, "", "set_tbl_hide_column_names"], [23, 1, 1, "", "set_tbl_hide_dataframe_shape"], [24, 1, 1, "", "set_tbl_hide_dtype_separator"], [25, 1, 1, "", "set_tbl_rows"], [26, 1, 1, "", "set_tbl_width_chars"], [27, 1, 1, "", "set_verbose"], [28, 1, 1, "", "state"]], "polars.DataFrame": [[145, 1, 1, "", "__dataframe__"], [146, 1, 1, "", "apply"], [147, 1, 1, "", "approx_n_unique"], [148, 1, 1, "", "approx_unique"], [149, 1, 1, "", "bottom_k"], [150, 1, 1, "", "cast"], [151, 1, 1, "", "clear"], [152, 1, 1, "", "clone"], [153, 2, 1, "", "columns"], [154, 1, 1, "", "corr"], [155, 1, 1, "", "describe"], [156, 1, 1, "", "drop"], [157, 1, 1, "", "drop_in_place"], [158, 1, 1, "", "drop_nulls"], [159, 2, 1, "", "dtypes"], [160, 1, 1, "", "estimated_size"], [161, 1, 1, "", "explode"], [162, 1, 1, "", "extend"], [163, 1, 1, "", "fill_nan"], [164, 1, 1, "", "fill_null"], [165, 1, 1, "", "filter"], [166, 1, 1, "", "find_idx_by_name"], [167, 2, 1, "", "flags"], [168, 1, 1, "", "fold"], [169, 1, 1, "", "frame_equal"], [170, 1, 1, "", "get_column"], [171, 1, 1, "", "get_columns"], [172, 1, 1, "", "glimpse"], [173, 1, 1, "", "group_by"], [174, 1, 1, "", "group_by_dynamic"], [175, 1, 1, "", "group_by_rolling"], [176, 1, 1, "", "groupby"], [177, 1, 1, "", "groupby_dynamic"], [178, 1, 1, "", "groupby_rolling"], [179, 1, 1, "", "hash_rows"], [180, 1, 1, "", "head"], [181, 2, 1, "", "height"], [182, 1, 1, "", "hstack"], [183, 1, 1, "", "insert_at_idx"], [184, 1, 1, "", "interpolate"], [185, 1, 1, "", "is_duplicated"], [186, 1, 1, "", "is_empty"], [187, 1, 1, "", "is_unique"], [188, 1, 1, "", "item"], [189, 1, 1, "", "iter_rows"], [190, 1, 1, "", "iter_slices"], [191, 1, 1, "", "join"], [192, 1, 1, "", "join_asof"], [193, 1, 1, "", "lazy"], [194, 1, 1, "", "limit"], [195, 1, 1, "", "map_rows"], [196, 1, 1, "", "max"], [197, 1, 1, "", "mean"], [198, 1, 1, "", "median"], [199, 1, 1, "", "melt"], [200, 1, 1, "", "merge_sorted"], [201, 1, 1, "", "min"], [202, 1, 1, "", "n_chunks"], [203, 1, 1, "", "n_unique"], [204, 1, 1, "", "null_count"], [205, 1, 1, "", "partition_by"], [206, 1, 1, "", "pipe"], [207, 1, 1, "", "pivot"], [208, 1, 1, "", "product"], [209, 1, 1, "", "quantile"], [210, 1, 1, "", "rechunk"], [211, 1, 1, "", "rename"], [212, 1, 1, "", "replace"], [213, 1, 1, "", "replace_at_idx"], [214, 1, 1, "", "reverse"], [215, 1, 1, "", "rolling"], [216, 1, 1, "", "row"], [217, 1, 1, "", "rows"], [218, 1, 1, "", "rows_by_key"], [219, 1, 1, "", "sample"], [220, 2, 1, "", "schema"], [221, 1, 1, "", "select"], [222, 1, 1, "", "select_seq"], [223, 1, 1, "", "set_sorted"], [224, 2, 1, "", "shape"], [225, 1, 1, "", "shift"], [226, 1, 1, "", "shift_and_fill"], [227, 1, 1, "", "shrink_to_fit"], [228, 1, 1, "", "slice"], [229, 1, 1, "", "sort"], [230, 1, 1, "", "std"], [231, 1, 1, "", "sum"], [232, 1, 1, "", "tail"], [233, 1, 1, "", "take_every"], [234, 1, 1, "", "to_arrow"], [235, 1, 1, "", "to_dict"], [236, 1, 1, "", "to_dicts"], [237, 1, 1, "", "to_dummies"], [238, 1, 1, "", "to_init_repr"], [239, 1, 1, "", "to_numpy"], [240, 1, 1, "", "to_pandas"], [241, 1, 1, "", "to_series"], [242, 1, 1, "", "to_struct"], [243, 1, 1, "", "top_k"], [244, 1, 1, "", "transpose"], [245, 1, 1, "", "unique"], [246, 1, 1, "", "unnest"], [247, 1, 1, "", "unstack"], [248, 1, 1, "", "update"], [249, 1, 1, "", "upsample"], [250, 1, 1, "", "var"], [251, 1, 1, "", "vstack"], [252, 2, 1, "", "width"], [253, 1, 1, "", "with_columns"], [254, 1, 1, "", "with_columns_seq"], [255, 1, 1, "", "with_row_count"], [29, 1, 1, "", "write_avro"], [30, 1, 1, "", "write_csv"], [31, 1, 1, "", "write_database"], [32, 1, 1, "", "write_delta"], [33, 1, 1, "", "write_excel"], [34, 1, 1, "", "write_ipc"], [35, 1, 1, "", "write_ipc_stream"], [36, 1, 1, "", "write_json"], [37, 1, 1, "", "write_ndjson"], [38, 1, 1, "", "write_parquet"]], "polars.DataType": [[39, 1, 1, "", "__init__"]], "polars.Date": [[40, 1, 1, "", "__init__"]], "polars.Datetime": [[41, 1, 1, "", "__init__"]], "polars.Decimal": [[42, 1, 1, "", "__init__"]], "polars.Duration": [[43, 1, 1, "", "__init__"]], "polars.Expr": [[284, 1, 1, "", "abs"], [285, 1, 1, "", "add"], [286, 1, 1, "", "agg_groups"], [287, 1, 1, "", "alias"], [288, 1, 1, "", "all"], [289, 1, 1, "", "and_"], [290, 1, 1, "", "any"], [291, 1, 1, "", "append"], [292, 1, 1, "", "apply"], [293, 1, 1, "", "approx_n_unique"], [294, 1, 1, "", "arccos"], [295, 1, 1, "", "arccosh"], [296, 1, 1, "", "arcsin"], [297, 1, 1, "", "arcsinh"], [298, 1, 1, "", "arctan"], [299, 1, 1, "", "arctanh"], [300, 1, 1, "", "arg_max"], [301, 1, 1, "", "arg_min"], [302, 1, 1, "", "arg_sort"], [303, 1, 1, "", "arg_true"], [304, 1, 1, "", "arg_unique"], [309, 1, 1, "", "backward_fill"], [315, 1, 1, "", "bottom_k"], [316, 1, 1, "", "cache"], [317, 1, 1, "", "cast"], [320, 1, 1, "", "cbrt"], [321, 1, 1, "", "ceil"], [322, 1, 1, "", "clip"], [323, 1, 1, "", "clip_max"], [324, 1, 1, "", "clip_min"], [325, 1, 1, "", "cos"], [326, 1, 1, "", "cosh"], [327, 1, 1, "", "cot"], [328, 1, 1, "", "count"], [329, 1, 1, "", "cumcount"], [330, 1, 1, "", "cummax"], [331, 1, 1, "", "cummin"], [332, 1, 1, "", "cumprod"], [333, 1, 1, "", "cumsum"], [334, 1, 1, "", "cumulative_eval"], [335, 1, 1, "", "cut"], [336, 1, 1, "", "degrees"], [337, 1, 1, "", "diff"], [338, 1, 1, "", "dot"], [339, 1, 1, "", "drop_nans"], [340, 1, 1, "", "drop_nulls"], [382, 1, 1, "", "entropy"], [383, 1, 1, "", "eq"], [384, 1, 1, "", "eq_missing"], [385, 1, 1, "", "ewm_mean"], [386, 1, 1, "", "ewm_std"], [387, 1, 1, "", "ewm_var"], [388, 1, 1, "", "exclude"], [389, 1, 1, "", "exp"], [390, 1, 1, "", "explode"], [391, 1, 1, "", "extend_constant"], [392, 1, 1, "", "fill_nan"], [393, 1, 1, "", "fill_null"], [394, 1, 1, "", "filter"], [395, 1, 1, "", "first"], [396, 1, 1, "", "flatten"], [397, 1, 1, "", "floor"], [398, 1, 1, "", "floordiv"], [399, 1, 1, "", "forward_fill"], [400, 1, 1, "", "from_json"], [401, 1, 1, "", "ge"], [402, 1, 1, "", "gt"], [403, 1, 1, "", "hash"], [404, 1, 1, "", "head"], [405, 1, 1, "", "implode"], [406, 1, 1, "", "inspect"], [407, 1, 1, "", "interpolate"], [408, 1, 1, "", "is_between"], [409, 1, 1, "", "is_duplicated"], [410, 1, 1, "", "is_finite"], [411, 1, 1, "", "is_first"], [412, 1, 1, "", "is_first_distinct"], [413, 1, 1, "", "is_in"], [414, 1, 1, "", "is_infinite"], [415, 1, 1, "", "is_last"], [416, 1, 1, "", "is_last_distinct"], [417, 1, 1, "", "is_nan"], [418, 1, 1, "", "is_not"], [419, 1, 1, "", "is_not_nan"], [420, 1, 1, "", "is_not_null"], [421, 1, 1, "", "is_null"], [422, 1, 1, "", "is_unique"], [423, 1, 1, "", "keep_name"], [424, 1, 1, "", "kurtosis"], [425, 1, 1, "", "last"], [426, 1, 1, "", "le"], [427, 1, 1, "", "len"], [428, 1, 1, "", "limit"], [468, 1, 1, "", "log"], [469, 1, 1, "", "log10"], [470, 1, 1, "", "log1p"], [471, 1, 1, "", "lower_bound"], [472, 1, 1, "", "lt"], [473, 1, 1, "", "map"], [474, 1, 1, "", "map_alias"], [475, 1, 1, "", "map_batches"], [476, 1, 1, "", "map_dict"], [477, 1, 1, "", "map_elements"], [478, 1, 1, "", "max"], [479, 1, 1, "", "mean"], [480, 1, 1, "", "median"], [491, 1, 1, "", "min"], [492, 1, 1, "", "mod"], [493, 1, 1, "", "mode"], [494, 1, 1, "", "mul"], [495, 1, 1, "", "n_unique"], [496, 1, 1, "", "nan_max"], [497, 1, 1, "", "nan_min"], [498, 1, 1, "", "ne"], [499, 1, 1, "", "ne_missing"], [500, 1, 1, "", "not_"], [501, 1, 1, "", "null_count"], [502, 1, 1, "", "or_"], [503, 1, 1, "", "over"], [504, 1, 1, "", "pct_change"], [505, 1, 1, "", "peak_max"], [506, 1, 1, "", "peak_min"], [507, 1, 1, "", "pipe"], [508, 1, 1, "", "pow"], [509, 1, 1, "", "prefix"], [510, 1, 1, "", "product"], [511, 1, 1, "", "qcut"], [512, 1, 1, "", "quantile"], [513, 1, 1, "", "radians"], [514, 1, 1, "", "rank"], [515, 1, 1, "", "rechunk"], [516, 1, 1, "", "reinterpret"], [517, 1, 1, "", "repeat_by"], [518, 1, 1, "", "reshape"], [519, 1, 1, "", "reverse"], [520, 1, 1, "", "rle"], [521, 1, 1, "", "rle_id"], [522, 1, 1, "", "rolling"], [523, 1, 1, "", "rolling_apply"], [524, 1, 1, "", "rolling_map"], [525, 1, 1, "", "rolling_max"], [526, 1, 1, "", "rolling_mean"], [527, 1, 1, "", "rolling_median"], [528, 1, 1, "", "rolling_min"], [529, 1, 1, "", "rolling_quantile"], [530, 1, 1, "", "rolling_skew"], [531, 1, 1, "", "rolling_std"], [532, 1, 1, "", "rolling_sum"], [533, 1, 1, "", "rolling_var"], [534, 1, 1, "", "round"], [535, 1, 1, "", "sample"], [536, 1, 1, "", "search_sorted"], [537, 1, 1, "", "set_sorted"], [538, 1, 1, "", "shift"], [539, 1, 1, "", "shift_and_fill"], [540, 1, 1, "", "shrink_dtype"], [541, 1, 1, "", "shuffle"], [542, 1, 1, "", "sign"], [543, 1, 1, "", "sin"], [544, 1, 1, "", "sinh"], [545, 1, 1, "", "skew"], [546, 1, 1, "", "slice"], [547, 1, 1, "", "sort"], [548, 1, 1, "", "sort_by"], [549, 1, 1, "", "sqrt"], [550, 1, 1, "", "std"], [597, 1, 1, "", "sub"], [598, 1, 1, "", "suffix"], [599, 1, 1, "", "sum"], [600, 1, 1, "", "tail"], [601, 1, 1, "", "take"], [602, 1, 1, "", "take_every"], [603, 1, 1, "", "tan"], [604, 1, 1, "", "tanh"], [605, 1, 1, "", "to_physical"], [606, 1, 1, "", "top_k"], [607, 1, 1, "", "truediv"], [608, 1, 1, "", "unique"], [609, 1, 1, "", "unique_counts"], [610, 1, 1, "", "upper_bound"], [611, 1, 1, "", "value_counts"], [612, 1, 1, "", "var"], [613, 1, 1, "", "where"], [614, 1, 1, "", "xor"]], "polars.Expr.arr": [[305, 1, 1, "", "max"], [306, 1, 1, "", "min"], [307, 1, 1, "", "sum"], [308, 1, 1, "", "unique"]], "polars.Expr.bin": [[310, 1, 1, "", "contains"], [311, 1, 1, "", "decode"], [312, 1, 1, "", "encode"], [313, 1, 1, "", "ends_with"], [314, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[318, 1, 1, "", "get_categories"], [319, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[341, 1, 1, "", "base_utc_offset"], [342, 1, 1, "", "cast_time_unit"], [343, 1, 1, "", "combine"], [344, 1, 1, "", "convert_time_zone"], [345, 1, 1, "", "date"], [346, 1, 1, "", "datetime"], [347, 1, 1, "", "day"], [348, 1, 1, "", "days"], [349, 1, 1, "", "dst_offset"], [350, 1, 1, "", "epoch"], [351, 1, 1, "", "hour"], [352, 1, 1, "", "hours"], [353, 1, 1, "", "is_leap_year"], [354, 1, 1, "", "iso_year"], [355, 1, 1, "", "microsecond"], [356, 1, 1, "", "microseconds"], [357, 1, 1, "", "millisecond"], [358, 1, 1, "", "milliseconds"], [359, 1, 1, "", "minute"], [360, 1, 1, "", "minutes"], [361, 1, 1, "", "month"], [362, 1, 1, "", "month_end"], [363, 1, 1, "", "month_start"], [364, 1, 1, "", "nanosecond"], [365, 1, 1, "", "nanoseconds"], [366, 1, 1, "", "offset_by"], [367, 1, 1, "", "ordinal_day"], [368, 1, 1, "", "quarter"], [369, 1, 1, "", "replace_time_zone"], [370, 1, 1, "", "round"], [371, 1, 1, "", "second"], [372, 1, 1, "", "seconds"], [373, 1, 1, "", "strftime"], [374, 1, 1, "", "time"], [375, 1, 1, "", "timestamp"], [376, 1, 1, "", "to_string"], [377, 1, 1, "", "truncate"], [378, 1, 1, "", "week"], [379, 1, 1, "", "weekday"], [380, 1, 1, "", "with_time_unit"], [381, 1, 1, "", "year"]], "polars.Expr.list": [[429, 1, 1, "", "all"], [430, 1, 1, "", "any"], [431, 1, 1, "", "arg_max"], [432, 1, 1, "", "arg_min"], [433, 1, 1, "", "concat"], [434, 1, 1, "", "contains"], [435, 1, 1, "", "count_match"], [436, 1, 1, "", "count_matches"], [437, 1, 1, "", "diff"], [438, 1, 1, "", "difference"], [439, 1, 1, "", "drop_nulls"], [440, 1, 1, "", "eval"], [441, 1, 1, "", "explode"], [442, 1, 1, "", "first"], [443, 1, 1, "", "get"], [444, 1, 1, "", "head"], [445, 1, 1, "", "intersection"], [446, 1, 1, "", "join"], [447, 1, 1, "", "last"], [448, 1, 1, "", "len"], [449, 1, 1, "", "lengths"], [450, 1, 1, "", "max"], [451, 1, 1, "", "mean"], [452, 1, 1, "", "min"], [453, 1, 1, "", "reverse"], [454, 1, 1, "", "set_difference"], [455, 1, 1, "", "set_intersection"], [456, 1, 1, "", "set_symmetric_difference"], [457, 1, 1, "", "set_union"], [458, 1, 1, "", "shift"], [459, 1, 1, "", "slice"], [460, 1, 1, "", "sort"], [461, 1, 1, "", "sum"], [462, 1, 1, "", "symmetric_difference"], [463, 1, 1, "", "tail"], [464, 1, 1, "", "take"], [465, 1, 1, "", "to_struct"], [466, 1, 1, "", "union"], [467, 1, 1, "", "unique"]], "polars.Expr.meta": [[481, 1, 1, "", "eq"], [482, 1, 1, "", "has_multiple_outputs"], [483, 1, 1, "", "is_regex_projection"], [484, 1, 1, "", "ne"], [485, 1, 1, "", "output_name"], [486, 1, 1, "", "pop"], [487, 1, 1, "", "root_names"], [488, 1, 1, "", "tree_format"], [489, 1, 1, "", "undo_aliases"], [490, 1, 1, "", "write_json"]], "polars.Expr.str": [[551, 1, 1, "", "concat"], [552, 1, 1, "", "contains"], [553, 1, 1, "", "count_match"], [554, 1, 1, "", "count_matches"], [555, 1, 1, "", "decode"], [556, 1, 1, "", "encode"], [557, 1, 1, "", "ends_with"], [558, 1, 1, "", "explode"], [559, 1, 1, "", "extract"], [560, 1, 1, "", "extract_all"], [561, 1, 1, "", "extract_groups"], [562, 1, 1, "", "json_extract"], [563, 1, 1, "", "json_path_match"], [564, 1, 1, "", "len_bytes"], [565, 1, 1, "", "len_chars"], [566, 1, 1, "", "lengths"], [567, 1, 1, "", "ljust"], [568, 1, 1, "", "lstrip"], [569, 1, 1, "", "n_chars"], [570, 1, 1, "", "parse_int"], [571, 1, 1, "", "replace"], [572, 1, 1, "", "replace_all"], [573, 1, 1, "", "rjust"], [574, 1, 1, "", "rstrip"], [575, 1, 1, "", "slice"], [576, 1, 1, "", "split"], [577, 1, 1, "", "split_exact"], [578, 1, 1, "", "splitn"], [579, 1, 1, "", "starts_with"], [580, 1, 1, "", "strip"], [581, 1, 1, "", "strip_chars"], [582, 1, 1, "", "strip_chars_end"], [583, 1, 1, "", "strip_chars_start"], [584, 1, 1, "", "strip_prefix"], [585, 1, 1, "", "strip_suffix"], [586, 1, 1, "", "strptime"], [587, 1, 1, "", "to_date"], [588, 1, 1, "", "to_datetime"], [589, 1, 1, "", "to_decimal"], [590, 1, 1, "", "to_lowercase"], [591, 1, 1, "", "to_time"], [592, 1, 1, "", "to_titlecase"], [593, 1, 1, "", "to_uppercase"], [594, 1, 1, "", "zfill"]], "polars.Expr.struct": [[595, 1, 1, "", "field"], [596, 1, 1, "", "rename_fields"]], "polars.Float32": [[44, 1, 1, "", "__init__"]], "polars.Float64": [[45, 1, 1, "", "__init__"]], "polars.Int16": [[46, 1, 1, "", "__init__"]], "polars.Int32": [[47, 1, 1, "", "__init__"]], "polars.Int64": [[48, 1, 1, "", "__init__"]], "polars.Int8": [[49, 1, 1, "", "__init__"]], "polars.LazyFrame": [[708, 1, 1, "", "approx_n_unique"], [709, 1, 1, "", "approx_unique"], [710, 1, 1, "", "bottom_k"], [711, 1, 1, "", "cache"], [712, 1, 1, "", "cast"], [713, 1, 1, "", "clear"], [714, 1, 1, "", "clone"], [715, 1, 1, "", "collect"], [716, 1, 1, "", "collect_async"], [717, 2, 1, "", "columns"], [718, 1, 1, "", "deserialize"], [719, 1, 1, "", "drop"], [720, 1, 1, "", "drop_nulls"], [721, 2, 1, "", "dtypes"], [722, 1, 1, "", "explain"], [723, 1, 1, "", "explode"], [724, 1, 1, "", "fetch"], [725, 1, 1, "", "fill_nan"], [726, 1, 1, "", "fill_null"], [727, 1, 1, "", "filter"], [728, 1, 1, "", "first"], [729, 1, 1, "", "from_json"], [730, 1, 1, "", "group_by"], [731, 1, 1, "", "group_by_dynamic"], [732, 1, 1, "", "group_by_rolling"], [733, 1, 1, "", "groupby"], [734, 1, 1, "", "groupby_dynamic"], [735, 1, 1, "", "groupby_rolling"], [736, 1, 1, "", "head"], [737, 1, 1, "", "inspect"], [738, 1, 1, "", "interpolate"], [739, 1, 1, "", "join"], [740, 1, 1, "", "join_asof"], [741, 1, 1, "", "last"], [742, 1, 1, "", "lazy"], [743, 1, 1, "", "limit"], [744, 1, 1, "", "map"], [745, 1, 1, "", "map_batches"], [746, 1, 1, "", "max"], [747, 1, 1, "", "mean"], [748, 1, 1, "", "median"], [749, 1, 1, "", "melt"], [750, 1, 1, "", "merge_sorted"], [751, 1, 1, "", "min"], [752, 1, 1, "", "null_count"], [753, 1, 1, "", "pipe"], [754, 1, 1, "", "profile"], [755, 1, 1, "", "quantile"], [756, 1, 1, "", "read_json"], [757, 1, 1, "", "rename"], [758, 1, 1, "", "reverse"], [759, 1, 1, "", "rolling"], [760, 2, 1, "", "schema"], [761, 1, 1, "", "select"], [762, 1, 1, "", "select_seq"], [763, 1, 1, "", "serialize"], [764, 1, 1, "", "set_sorted"], [765, 1, 1, "", "shift"], [766, 1, 1, "", "shift_and_fill"], [767, 1, 1, "", "show_graph"], [50, 1, 1, "", "sink_csv"], [51, 1, 1, "", "sink_ipc"], [52, 1, 1, "", "sink_parquet"], [768, 1, 1, "", "slice"], [769, 1, 1, "", "sort"], [770, 1, 1, "", "std"], [771, 1, 1, "", "sum"], [772, 1, 1, "", "tail"], [773, 1, 1, "", "take_every"], [774, 1, 1, "", "top_k"], [775, 1, 1, "", "unique"], [776, 1, 1, "", "unnest"], [777, 1, 1, "", "update"], [778, 1, 1, "", "var"], [779, 2, 1, "", "width"], [780, 1, 1, "", "with_columns"], [781, 1, 1, "", "with_columns_seq"], [782, 1, 1, "", "with_context"], [783, 1, 1, "", "with_row_count"], [784, 1, 1, "", "write_json"]], "polars.List": [[53, 1, 1, "", "__init__"]], "polars.Null": [[54, 1, 1, "", "__init__"]], "polars.Object": [[55, 1, 1, "", "__init__"]], "polars.SQLContext": [[1152, 1, 1, "", "__enter__"], [1152, 1, 1, "", "__exit__"], [1152, 1, 1, "", "__init__"], [56, 1, 1, "", "execute"], [57, 1, 1, "", "register"], [58, 1, 1, "", "register_globals"], [59, 1, 1, "", "register_many"], [60, 1, 1, "", "tables"], [61, 1, 1, "", "unregister"]], "polars.Series": [[809, 1, 1, "", "abs"], [810, 1, 1, "", "alias"], [811, 1, 1, "", "all"], [812, 1, 1, "", "any"], [813, 1, 1, "", "append"], [814, 1, 1, "", "apply"], [815, 1, 1, "", "arccos"], [816, 1, 1, "", "arccosh"], [817, 1, 1, "", "arcsin"], [818, 1, 1, "", "arcsinh"], [819, 1, 1, "", "arctan"], [820, 1, 1, "", "arctanh"], [821, 1, 1, "", "arg_max"], [822, 1, 1, "", "arg_min"], [823, 1, 1, "", "arg_sort"], [824, 1, 1, "", "arg_true"], [825, 1, 1, "", "arg_unique"], [835, 1, 1, "", "bottom_k"], [836, 1, 1, "", "cast"], [837, 3, 1, "", "cat"], [843, 1, 1, "", "cbrt"], [844, 1, 1, "", "ceil"], [845, 1, 1, "", "chunk_lengths"], [846, 1, 1, "", "clear"], [847, 1, 1, "", "clip"], [848, 1, 1, "", "clip_max"], [849, 1, 1, "", "clip_min"], [850, 1, 1, "", "clone"], [851, 1, 1, "", "cos"], [852, 1, 1, "", "cosh"], [853, 1, 1, "", "cot"], [854, 1, 1, "", "cummax"], [855, 1, 1, "", "cummin"], [856, 1, 1, "", "cumprod"], [857, 1, 1, "", "cumsum"], [858, 1, 1, "", "cumulative_eval"], [859, 1, 1, "", "cut"], [860, 1, 1, "", "describe"], [861, 1, 1, "", "diff"], [862, 1, 1, "", "dot"], [863, 1, 1, "", "drop_nans"], [864, 1, 1, "", "drop_nulls"], [865, 3, 1, "", "dt"], [911, 3, 1, "", "dtype"], [912, 1, 1, "", "entropy"], [913, 1, 1, "", "estimated_size"], [914, 1, 1, "", "ewm_mean"], [915, 1, 1, "", "ewm_std"], [916, 1, 1, "", "ewm_var"], [917, 1, 1, "", "exp"], [918, 1, 1, "", "explode"], [919, 1, 1, "", "extend"], [920, 1, 1, "", "extend_constant"], [921, 1, 1, "", "fill_nan"], [922, 1, 1, "", "fill_null"], [923, 1, 1, "", "filter"], [924, 3, 1, "", "flags"], [925, 1, 1, "", "floor"], [926, 1, 1, "", "get_chunks"], [927, 1, 1, "", "has_validity"], [928, 1, 1, "", "hash"], [929, 1, 1, "", "head"], [930, 1, 1, "", "hist"], [931, 1, 1, "", "implode"], [932, 3, 1, "", "inner_dtype"], [933, 1, 1, "", "interpolate"], [934, 1, 1, "", "is_between"], [935, 1, 1, "", "is_boolean"], [936, 1, 1, "", "is_duplicated"], [937, 1, 1, "", "is_empty"], [938, 1, 1, "", "is_finite"], [939, 1, 1, "", "is_first"], [940, 1, 1, "", "is_first_distinct"], [941, 1, 1, "", "is_float"], [942, 1, 1, "", "is_in"], [943, 1, 1, "", "is_infinite"], [944, 1, 1, "", "is_integer"], [945, 1, 1, "", "is_last"], [946, 1, 1, "", "is_last_distinct"], [947, 1, 1, "", "is_nan"], [948, 1, 1, "", "is_not_nan"], [949, 1, 1, "", "is_not_null"], [950, 1, 1, "", "is_null"], [951, 1, 1, "", "is_numeric"], [952, 1, 1, "", "is_sorted"], [953, 1, 1, "", "is_temporal"], [954, 1, 1, "", "is_unique"], [955, 1, 1, "", "is_utf8"], [956, 1, 1, "", "item"], [957, 1, 1, "", "kurtosis"], [958, 1, 1, "", "len"], [959, 1, 1, "", "limit"], [960, 3, 1, "", "list"], [1000, 1, 1, "", "log"], [1001, 1, 1, "", "log10"], [1002, 1, 1, "", "log1p"], [1003, 1, 1, "", "lower_bound"], [1004, 1, 1, "", "map_dict"], [1005, 1, 1, "", "map_elements"], [1006, 1, 1, "", "max"], [1007, 1, 1, "", "mean"], [1008, 1, 1, "", "median"], [1009, 1, 1, "", "min"], [1010, 1, 1, "", "mode"], [1011, 1, 1, "", "n_chunks"], [1012, 1, 1, "", "n_unique"], [1013, 3, 1, "", "name"], [1014, 1, 1, "", "nan_max"], [1015, 1, 1, "", "nan_min"], [1016, 1, 1, "", "new_from_index"], [1017, 1, 1, "", "not_"], [1018, 1, 1, "", "null_count"], [1019, 1, 1, "", "pct_change"], [1020, 1, 1, "", "peak_max"], [1021, 1, 1, "", "peak_min"], [1022, 1, 1, "", "product"], [1023, 1, 1, "", "qcut"], [1024, 1, 1, "", "quantile"], [1025, 1, 1, "", "rank"], [1026, 1, 1, "", "rechunk"], [1027, 1, 1, "", "reinterpret"], [1028, 1, 1, "", "rename"], [1029, 1, 1, "", "reshape"], [1030, 1, 1, "", "reverse"], [1031, 1, 1, "", "rle"], [1032, 1, 1, "", "rle_id"], [1033, 1, 1, "", "rolling_apply"], [1034, 1, 1, "", "rolling_map"], [1035, 1, 1, "", "rolling_max"], [1036, 1, 1, "", "rolling_mean"], [1037, 1, 1, "", "rolling_median"], [1038, 1, 1, "", "rolling_min"], [1039, 1, 1, "", "rolling_quantile"], [1040, 1, 1, "", "rolling_skew"], [1041, 1, 1, "", "rolling_std"], [1042, 1, 1, "", "rolling_sum"], [1043, 1, 1, "", "rolling_var"], [1044, 1, 1, "", "round"], [1045, 1, 1, "", "sample"], [1046, 1, 1, "", "search_sorted"], [1047, 1, 1, "", "series_equal"], [1048, 1, 1, "", "set"], [1049, 1, 1, "", "set_at_idx"], [1050, 1, 1, "", "set_sorted"], [1051, 3, 1, "", "shape"], [1052, 1, 1, "", "shift"], [1053, 1, 1, "", "shift_and_fill"], [1054, 1, 1, "", "shrink_dtype"], [1055, 1, 1, "", "shrink_to_fit"], [1056, 1, 1, "", "shuffle"], [1057, 1, 1, "", "sign"], [1058, 1, 1, "", "sin"], [1059, 1, 1, "", "sinh"], [1060, 1, 1, "", "skew"], [1061, 1, 1, "", "slice"], [1062, 1, 1, "", "sort"], [1063, 1, 1, "", "sqrt"], [1064, 1, 1, "", "std"], [1065, 3, 1, "", "str"], [1115, 1, 1, "", "sum"], [1116, 1, 1, "", "tail"], [1117, 1, 1, "", "take"], [1118, 1, 1, "", "take_every"], [1119, 1, 1, "", "tan"], [1120, 1, 1, "", "tanh"], [1121, 1, 1, "", "to_arrow"], [1122, 1, 1, "", "to_dummies"], [1123, 1, 1, "", "to_frame"], [1124, 1, 1, "", "to_init_repr"], [1125, 1, 1, "", "to_list"], [1126, 1, 1, "", "to_numpy"], [1127, 1, 1, "", "to_pandas"], [1128, 1, 1, "", "to_physical"], [1129, 1, 1, "", "top_k"], [1130, 1, 1, "", "unique"], [1131, 1, 1, "", "unique_counts"], [1132, 1, 1, "", "upper_bound"], [1133, 1, 1, "", "value_counts"], [1134, 1, 1, "", "var"], [1135, 1, 1, "", "view"], [1136, 1, 1, "", "zip_with"]], "polars.Series.arr": [[826, 1, 1, "", "max"], [827, 1, 1, "", "min"], [828, 1, 1, "", "sum"], [829, 1, 1, "", "unique"]], "polars.Series.bin": [[830, 1, 1, "", "contains"], [831, 1, 1, "", "decode"], [832, 1, 1, "", "encode"], [833, 1, 1, "", "ends_with"], [834, 1, 1, "", "starts_with"]], "polars.Series.cat": [[838, 1, 1, "", "get_categories"], [839, 1, 1, "", "is_local"], [840, 1, 1, "", "set_ordering"], [841, 1, 1, "", "to_local"], [842, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[866, 1, 1, "", "base_utc_offset"], [867, 1, 1, "", "cast_time_unit"], [868, 1, 1, "", "combine"], [869, 1, 1, "", "convert_time_zone"], [870, 1, 1, "", "date"], [871, 1, 1, "", "datetime"], [872, 1, 1, "", "day"], [873, 1, 1, "", "days"], [874, 1, 1, "", "dst_offset"], [875, 1, 1, "", "epoch"], [876, 1, 1, "", "hour"], [877, 1, 1, "", "hours"], [878, 1, 1, "", "is_leap_year"], [879, 1, 1, "", "iso_year"], [880, 1, 1, "", "max"], [881, 1, 1, "", "mean"], [882, 1, 1, "", "median"], [883, 1, 1, "", "microsecond"], [884, 1, 1, "", "microseconds"], [885, 1, 1, "", "millisecond"], [886, 1, 1, "", "milliseconds"], [887, 1, 1, "", "min"], [888, 1, 1, "", "minute"], [889, 1, 1, "", "minutes"], [890, 1, 1, "", "month"], [891, 1, 1, "", "month_end"], [892, 1, 1, "", "month_start"], [893, 1, 1, "", "nanosecond"], [894, 1, 1, "", "nanoseconds"], [895, 1, 1, "", "offset_by"], [896, 1, 1, "", "ordinal_day"], [897, 1, 1, "", "quarter"], [898, 1, 1, "", "replace_time_zone"], [899, 1, 1, "", "round"], [900, 1, 1, "", "second"], [901, 1, 1, "", "seconds"], [902, 1, 1, "", "strftime"], [903, 1, 1, "", "time"], [904, 1, 1, "", "timestamp"], [905, 1, 1, "", "to_string"], [906, 1, 1, "", "truncate"], [907, 1, 1, "", "week"], [908, 1, 1, "", "weekday"], [909, 1, 1, "", "with_time_unit"], [910, 1, 1, "", "year"]], "polars.Series.list": [[961, 1, 1, "", "all"], [962, 1, 1, "", "any"], [963, 1, 1, "", "arg_max"], [964, 1, 1, "", "arg_min"], [965, 1, 1, "", "concat"], [966, 1, 1, "", "contains"], [967, 1, 1, "", "count_match"], [968, 1, 1, "", "count_matches"], [969, 1, 1, "", "diff"], [970, 1, 1, "", "difference"], [971, 1, 1, "", "drop_nulls"], [972, 1, 1, "", "eval"], [973, 1, 1, "", "explode"], [974, 1, 1, "", "first"], [975, 1, 1, "", "get"], [976, 1, 1, "", "head"], [977, 1, 1, "", "intersection"], [978, 1, 1, "", "join"], [979, 1, 1, "", "last"], [980, 1, 1, "", "len"], [981, 1, 1, "", "lengths"], [982, 1, 1, "", "max"], [983, 1, 1, "", "mean"], [984, 1, 1, "", "min"], [985, 1, 1, "", "reverse"], [986, 1, 1, "", "set_difference"], [987, 1, 1, "", "set_intersection"], [988, 1, 1, "", "set_symmetric_difference"], [989, 1, 1, "", "set_union"], [990, 1, 1, "", "shift"], [991, 1, 1, "", "slice"], [992, 1, 1, "", "sort"], [993, 1, 1, "", "sum"], [994, 1, 1, "", "symmetric_difference"], [995, 1, 1, "", "tail"], [996, 1, 1, "", "take"], [997, 1, 1, "", "to_struct"], [998, 1, 1, "", "union"], [999, 1, 1, "", "unique"]], "polars.Series.str": [[1066, 1, 1, "", "concat"], [1067, 1, 1, "", "contains"], [1068, 1, 1, "", "count_match"], [1069, 1, 1, "", "count_matches"], [1070, 1, 1, "", "decode"], [1071, 1, 1, "", "encode"], [1072, 1, 1, "", "ends_with"], [1073, 1, 1, "", "explode"], [1074, 1, 1, "", "extract"], [1075, 1, 1, "", "extract_all"], [1076, 1, 1, "", "extract_groups"], [1077, 1, 1, "", "json_extract"], [1078, 1, 1, "", "json_path_match"], [1079, 1, 1, "", "len_bytes"], [1080, 1, 1, "", "len_chars"], [1081, 1, 1, "", "lengths"], [1082, 1, 1, "", "ljust"], [1083, 1, 1, "", "lstrip"], [1084, 1, 1, "", "n_chars"], [1085, 1, 1, "", "parse_int"], [1086, 1, 1, "", "replace"], [1087, 1, 1, "", "replace_all"], [1088, 1, 1, "", "rjust"], [1089, 1, 1, "", "rstrip"], [1090, 1, 1, "", "slice"], [1091, 1, 1, "", "split"], [1092, 1, 1, "", "split_exact"], [1093, 1, 1, "", "splitn"], [1094, 1, 1, "", "starts_with"], [1095, 1, 1, "", "strip"], [1096, 1, 1, "", "strip_chars"], [1097, 1, 1, "", "strip_chars_end"], [1098, 1, 1, "", "strip_chars_start"], [1099, 1, 1, "", "strip_prefix"], [1100, 1, 1, "", "strip_suffix"], [1101, 1, 1, "", "strptime"], [1102, 1, 1, "", "to_date"], [1103, 1, 1, "", "to_datetime"], [1104, 1, 1, "", "to_decimal"], [1105, 1, 1, "", "to_lowercase"], [1106, 1, 1, "", "to_time"], [1107, 1, 1, "", "to_titlecase"], [1108, 1, 1, "", "to_uppercase"], [1109, 1, 1, "", "zfill"]], "polars.Series.struct": [[1110, 1, 1, "", "field"], [1111, 3, 1, "", "fields"], [1112, 1, 1, "", "rename_fields"], [1113, 3, 1, "", "schema"], [1114, 1, 1, "", "unnest"]], "polars.StringCache": [[62, 1, 1, "", "__init__"]], "polars.Struct": [[63, 1, 1, "", "__init__"]], "polars.Time": [[64, 1, 1, "", "__init__"]], "polars.UInt16": [[65, 1, 1, "", "__init__"]], "polars.UInt32": [[66, 1, 1, "", "__init__"]], "polars.UInt64": [[67, 1, 1, "", "__init__"]], "polars.UInt8": [[68, 1, 1, "", "__init__"]], "polars.Unknown": [[69, 1, 1, "", "__init__"]], "polars.Utf8": [[70, 1, 1, "", "__init__"]], "polars.api": [[72, 4, 1, "", "register_dataframe_namespace"], [73, 4, 1, "", "register_expr_namespace"], [74, 4, 1, "", "register_lazyframe_namespace"], [75, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[256, 1, 1, "", "__iter__"], [257, 1, 1, "", "agg"], [258, 1, 1, "", "all"], [259, 1, 1, "", "apply"], [260, 1, 1, "", "count"], [261, 1, 1, "", "first"], [262, 1, 1, "", "head"], [263, 1, 1, "", "last"], [264, 1, 1, "", "map_groups"], [265, 1, 1, "", "max"], [266, 1, 1, "", "mean"], [267, 1, 1, "", "median"], [268, 1, 1, "", "min"], [269, 1, 1, "", "n_unique"], [270, 1, 1, "", "quantile"], [271, 1, 1, "", "sum"], [272, 1, 1, "", "tail"]], "polars.exceptions": [[82, 5, 1, "", "ArrowError"], [83, 5, 1, "", "ColumnNotFoundError"], [84, 5, 1, "", "ComputeError"], [85, 5, 1, "", "DuplicateError"], [86, 5, 1, "", "InvalidOperationError"], [87, 5, 1, "", "NoDataError"], [88, 5, 1, "", "NoRowsReturnedError"], [89, 5, 1, "", "PolarsPanicError"], [90, 5, 1, "", "RowsError"], [91, 5, 1, "", "SchemaError"], [92, 5, 1, "", "SchemaFieldNotFoundError"], [93, 5, 1, "", "ShapeError"], [94, 5, 1, "", "StructFieldNotFoundError"], [95, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[105, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[785, 1, 1, "", "agg"], [786, 1, 1, "", "all"], [787, 1, 1, "", "apply"], [788, 1, 1, "", "count"], [789, 1, 1, "", "first"], [790, 1, 1, "", "head"], [791, 1, 1, "", "last"], [792, 1, 1, "", "map_groups"], [793, 1, 1, "", "max"], [794, 1, 1, "", "mean"], [795, 1, 1, "", "median"], [796, 1, 1, "", "min"], [797, 1, 1, "", "n_unique"], [798, 1, 1, "", "quantile"], [799, 1, 1, "", "sum"], [800, 1, 1, "", "tail"]], "polars.selectors": [[807, 4, 1, "", "all"], [807, 4, 1, "", "by_dtype"], [807, 4, 1, "", "by_name"], [807, 4, 1, "", "categorical"], [807, 4, 1, "", "contains"], [807, 4, 1, "", "date"], [807, 4, 1, "", "datetime"], [807, 4, 1, "", "duration"], [807, 4, 1, "", "ends_with"], [807, 4, 1, "", "expand_selector"], [807, 4, 1, "", "first"], [807, 4, 1, "", "float"], [807, 4, 1, "", "integer"], [807, 4, 1, "", "is_selector"], [807, 4, 1, "", "last"], [807, 4, 1, "", "matches"], [807, 4, 1, "", "numeric"], [807, 4, 1, "", "starts_with"], [807, 4, 1, "", "string"], [807, 4, 1, "", "temporal"], [807, 4, 1, "", "time"]], "polars.testing": [[130, 4, 1, "", "assert_frame_equal"], [131, 4, 1, "", "assert_frame_not_equal"], [132, 4, 1, "", "assert_series_equal"], [133, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[134, 0, 1, "", "column"], [135, 4, 1, "", "columns"], [136, 4, 1, "", "create_list_strategy"], [137, 4, 1, "", "dataframes"], [138, 4, 1, "", "load_profile"], [139, 4, 1, "", "series"], [140, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[134, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 162, 919], "api": [1, 72, 73, 74, 75, 705], "provid": 1, "new": 1, "function": [1, 143, 693, 704, 807], "avail": 1, "registr": 1, "exampl": [1, 807, 1153], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1153], "arrai": [2, 686, 1137], "binari": [3, 687, 699, 1139], "boolean": [4, 688, 1140], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 143], "activate_decim": 6, "load": [7, 143], "load_from_fil": 8, "restore_default": 9, "save": [10, 143], "save_to_fil": 11, "set_ascii_t": 12, "set_fmt_float": 13, "set_fmt_str_length": 14, "set_streaming_chunk_s": 15, "set_tbl_cell_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_verbos": 27, "state": [28, 143], "datafram": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 137, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278], "write_avro": 29, "write_csv": 30, "write_databas": 31, "write_delta": 32, "write_excel": 33, "write_ipc": 34, "write_ipc_stream": 35, "write_json": [36, 490, 784], "write_ndjson": 37, "write_parquet": 38, "datatyp": 39, "date": [40, 345, 637, 870], "datetim": [41, 346, 640, 871], "decim": 42, "durat": [43, 643], "float32": 44, "float64": 45, "int16": 46, "int32": 47, "int64": 48, "int8": 49, "lazyfram": [50, 51, 52, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804], "sink_csv": 50, "sink_ipc": 51, "sink_parquet": 52, "list": [53, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 695, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1146], "null": 54, "object": 55, "sqlcontext": [56, 57, 58, 59, 60, 61], "execut": 56, "regist": 57, "register_glob": 58, "register_mani": 59, "tabl": 60, "unregist": 61, "stringcach": [62, 704], "struct": [63, 595, 596, 676, 701, 1110, 1111, 1112, 1113, 1114, 1150], "time": [64, 374, 680, 903], "uint16": 65, "uint32": 66, "uint64": 67, "uint8": 68, "unknown": 69, "utf8": 70, "align_fram": 71, "register_dataframe_namespac": 72, "register_expr_namespac": 73, "register_lazyframe_namespac": 74, "register_series_namespac": 75, "build_info": 76, "collect_al": 77, "collect_all_async": 78, "concat": [79, 433, 551, 965, 1066], "disable_string_cach": 80, "enable_string_cach": 81, "except": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 282], "arrowerror": 82, "columnnotfounderror": 83, "computeerror": 84, "duplicateerror": 85, "invalidoperationerror": 86, "nodataerror": 87, "norowsreturnederror": 88, "polarspanicerror": 89, "rowserror": 90, "schemaerror": 91, "schemafieldnotfounderror": 92, "shapeerror": 93, "structfieldnotfounderror": 94, "toomanyrowsreturnederror": 95, "from_arrow": 96, "from_datafram": 97, "from_dict": [98, 99], "from_numpi": 100, "from_panda": 101, "from_record": 102, "from_repr": 103, "get_index_typ": 104, "io": 105, "csv": [105, 706], "batched_read": 105, "batchedcsvread": [105, 706], "next_batch": 105, "read_avro": 106, "read_csv": 107, "read_csv_batch": 108, "read_databas": 109, "read_database_uri": 110, "read_delta": 111, "read_excel": 112, "read_ipc": 113, "read_ipc_schema": 114, "read_ipc_stream": 115, "read_json": [116, 756], "read_ndjson": 117, "read_od": 118, "read_parquet": 119, "read_parquet_schema": 120, "scan_csv": 121, "scan_delta": 122, "scan_iceberg": 123, "scan_ipc": 124, "scan_ndjson": 125, "scan_parquet": 126, "scan_pyarrow_dataset": 127, "set_random_se": 128, "show_vers": 129, "test": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 1153], "assert_frame_equ": 130, "assert_frame_not_equ": 131, "assert_series_equ": 132, "assert_series_not_equ": 133, "parametr": [134, 135, 136, 137, 138, 139, 140, 1153], "column": [134, 135, 153, 691, 717], "create_list_strategi": 136, "load_profil": 138, "seri": [139, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1145], "set_profil": 140, "threadpool_s": 141, "using_string_cach": 142, "option": 143, "current": 143, "us": 143, "context": 143, "manag": 143, "decor": 143, "aggreg": [144, 283, 707, 808], "__dataframe__": 145, "appli": [146, 259, 292, 619, 787, 814], "approx_n_uniqu": [147, 293, 620, 708], "approx_uniqu": [148, 709], "bottom_k": [149, 315, 710, 835], "cast": [150, 317, 712, 836], "clear": [151, 713, 846], "clone": [152, 714, 850], "corr": [154, 630], "describ": [155, 860], "drop": [156, 719], "drop_in_plac": 157, "drop_nul": [158, 340, 439, 720, 864, 971], "dtype": [159, 721, 911], "estimated_s": [160, 913], "explod": [161, 390, 441, 558, 723, 918, 973, 1073], "fill_nan": [163, 392, 725, 921], "fill_nul": [164, 393, 726, 922], "filter": [165, 394, 727, 923], "find_idx_by_nam": 166, "flag": [167, 924], "fold": [168, 647], "frame_equ": 169, "get_column": [170, 171], "glimps": 172, "group_bi": [173, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 730, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800], "group_by_dynam": [174, 731], "group_by_rol": [175, 732], "groupbi": [176, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 733, 803], "groupby_dynam": [177, 734], "groupby_rol": [178, 735], "hash_row": 179, "head": [180, 262, 404, 444, 651, 736, 790, 929, 976], "height": 181, "hstack": 182, "insert_at_idx": 183, "interpol": [184, 407, 738, 933], "is_dupl": [185, 409, 936], "is_empti": [186, 937], "is_uniqu": [187, 422, 954], "item": [188, 956], "iter_row": 189, "iter_slic": 190, "join": [191, 446, 739, 978], "join_asof": [192, 740], "lazi": [193, 742], "limit": [194, 428, 743, 959], "map_row": 195, "max": [196, 265, 305, 450, 478, 660, 746, 793, 826, 880, 982, 1006], "mean": [197, 266, 451, 479, 662, 747, 794, 881, 983, 1007], "median": [198, 267, 480, 663, 748, 795, 882, 1008], "melt": [199, 749], "merge_sort": [200, 750], "min": [201, 268, 306, 452, 491, 664, 751, 796, 827, 887, 984, 1009], "n_chunk": [202, 1011], "n_uniqu": [203, 269, 495, 666, 797, 1012], "null_count": [204, 501, 752, 1018], "partition_bi": 205, "pipe": [206, 507, 753], "pivot": 207, "product": [208, 510, 1022], "quantil": [209, 270, 512, 668, 755, 798, 1024], "rechunk": [210, 515, 1026], "renam": [211, 757, 1028], "replac": [212, 571, 1086], "replace_at_idx": 213, "revers": [214, 453, 519, 758, 985, 1030], "roll": [215, 522, 759], "row": [216, 217], "rows_by_kei": 218, "sampl": [219, 535, 1045], "schema": [220, 760, 1113], "select": [221, 280, 673, 698, 761, 806, 1148], "select_seq": [222, 762], "set_sort": [223, 537, 764, 1050], "shape": [224, 1051], "shift": [225, 458, 538, 765, 990, 1052], "shift_and_fil": [226, 539, 766, 1053], "shrink_to_fit": [227, 1055], "slice": [228, 459, 546, 575, 768, 991, 1061, 1090], "sort": [229, 460, 547, 769, 992, 1062], "std": [230, 550, 675, 770, 1064], "sum": [231, 271, 307, 461, 599, 677, 771, 799, 828, 993, 1115], "tail": [232, 272, 463, 600, 679, 772, 800, 995, 1116], "take_everi": [233, 602, 773, 1118], "to_arrow": [234, 1121], "to_dict": [235, 236], "to_dummi": [237, 1122], "to_init_repr": [238, 1124], "to_numpi": [239, 1126], "to_panda": [240, 1127], "to_seri": 241, "to_struct": [242, 465, 997], "top_k": [243, 606, 774, 1129], "transpos": 244, "uniqu": [245, 308, 467, 608, 775, 829, 999, 1130], "unnest": [246, 776, 1114], "unstack": 247, "updat": [248, 777], "upsampl": 249, "var": [250, 612, 683, 778, 1134], "vstack": 251, "width": [252, 779], "with_column": [253, 780], "with_columns_seq": [254, 781], "with_row_count": [255, 783], "__iter__": 256, "agg": [257, 785], "all": [258, 288, 429, 615, 786, 811, 961], "count": [260, 328, 631, 788], "first": [261, 395, 442, 646, 728, 789, 974], "last": [263, 425, 447, 655, 741, 791, 979], "map_group": [264, 659, 792], "attribut": [273, 801, 1138], "comput": [274, 692, 1142], "descript": [275, 802, 1143], "export": [276, 1144], "miscellan": [279, 697, 704, 805, 1147], "manipul": [280, 698, 806, 1148], "data": 281, "type": 281, "numer": [281, 699], "tempor": [281, 702, 1151], "nest": 281, "other": 281, "expr": [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614], "ab": [284, 809], "add": 285, "agg_group": 286, "alia": [287, 810], "and_": 289, "ani": [290, 430, 617, 812, 962], "append": [291, 813], "arcco": [294, 815], "arccosh": [295, 816], "arcsin": [296, 817], "arcsinh": [297, 818], "arctan": [298, 819], "arctanh": [299, 820], "arg_max": [300, 431, 821, 963], "arg_min": [301, 432, 822, 964], "arg_sort": [302, 823], "arg_tru": [303, 824], "arg_uniqu": [304, 825], "arr": [305, 306, 307, 308, 826, 827, 828, 829], "backward_fil": 309, "bin": [310, 311, 312, 313, 314, 830, 831, 832, 833, 834], "contain": [310, 434, 552, 830, 966, 1067], "decod": [311, 555, 831, 1070], "encod": [312, 556, 832, 1071], "ends_with": [313, 557, 833, 1072], "starts_with": [314, 579, 834, 1094], "cach": [316, 711], "cat": [318, 319, 837, 838, 839, 840, 841, 842], "get_categori": [318, 838], "set_ord": [319, 840], "cbrt": [320, 843], "ceil": [321, 844], "clip": [322, 847], "clip_max": [323, 848], "clip_min": [324, 849], "co": [325, 851], "cosh": [326, 852], "cot": [327, 853], "cumcount": 329, "cummax": [330, 854], "cummin": [331, 855], "cumprod": [332, 856], "cumsum": [333, 635, 857], "cumulative_ev": [334, 858], "cut": [335, 859], "degre": 336, "diff": [337, 437, 861, 969], "dot": [338, 862], "drop_nan": [339, 863], "dt": [341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910], "base_utc_offset": [341, 866], "cast_time_unit": [342, 867], "combin": [343, 868], "convert_time_zon": [344, 869], "dai": [347, 348, 872, 873], "dst_offset": [349, 874], "epoch": [350, 875], "hour": [351, 352, 876, 877], "is_leap_year": [353, 878], "iso_year": [354, 879], "microsecond": [355, 356, 883, 884], "millisecond": [357, 358, 885, 886], "minut": [359, 360, 888, 889], "month": [361, 890], "month_end": [362, 891], "month_start": [363, 892], "nanosecond": [364, 365, 893, 894], "offset_bi": [366, 895], "ordinal_dai": [367, 896], "quarter": [368, 897], "replace_time_zon": [369, 898], "round": [370, 534, 899, 1044], "second": [371, 372, 900, 901], "strftime": [373, 902], "timestamp": [375, 904], "to_str": [376, 905], "truncat": [377, 906], "week": [378, 907], "weekdai": [379, 908], "with_time_unit": [380, 909], "year": [381, 910], "entropi": [382, 912], "eq": [383, 481], "eq_miss": 384, "ewm_mean": [385, 914], "ewm_std": [386, 915], "ewm_var": [387, 916], "exclud": [388, 645], "exp": [389, 917], "extend_const": [391, 920], "flatten": 396, "floor": [397, 925], "floordiv": 398, "forward_fil": 399, "from_json": [400, 729], "ge": 401, "gt": 402, "hash": [403, 928], "implod": [405, 652, 931], "inspect": [406, 737], "is_between": [408, 934], "is_finit": [410, 938], "is_first": [411, 939], "is_first_distinct": [412, 940], "is_in": [413, 942], "is_infinit": [414, 943], "is_last": [415, 945], "is_last_distinct": [416, 946], "is_nan": [417, 947], "is_not": 418, "is_not_nan": [419, 948], "is_not_nul": [420, 949], "is_nul": [421, 950], "keep_nam": 423, "kurtosi": [424, 957], "le": 426, "len": [427, 448, 958, 980], "count_match": [435, 436, 553, 554, 967, 968, 1068, 1069], "differ": [438, 970], "eval": [440, 972], "get": [443, 975], "intersect": [445, 977], "length": [449, 566, 981, 1081], "set_differ": [454, 986], "set_intersect": [455, 987], "set_symmetric_differ": [456, 988], "set_union": [457, 989], "symmetric_differ": [462, 994], "take": [464, 601, 996, 1117], "union": [466, 998], "log": [468, 1000], "log10": [469, 1001], "log1p": [470, 1002], "lower_bound": [471, 1003], "lt": 472, "map": [473, 657, 744], "map_alia": 474, "map_batch": [475, 658, 745], "map_dict": [476, 1004], "map_el": [477, 1005], "meta": [481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 696], "has_multiple_output": 482, "is_regex_project": 483, "ne": [484, 498], "output_nam": 485, "pop": 486, "root_nam": 487, "tree_format": 488, "undo_alias": 489, "mod": 492, "mode": [493, 1010], "mul": 494, "nan_max": [496, 1014], "nan_min": [497, 1015], "ne_miss": 499, "not_": [500, 1017], "or_": 502, "over": 503, "pct_chang": [504, 1019], "peak_max": [505, 1020], "peak_min": [506, 1021], "pow": 508, "prefix": 509, "qcut": [511, 1023], "radian": 513, "rank": [514, 1025], "reinterpret": [516, 1027], "repeat_bi": 517, "reshap": [518, 1029], "rle": [520, 1031], "rle_id": [521, 1032], "rolling_appli": [523, 1033], "rolling_map": [524, 1034], "rolling_max": [525, 1035], "rolling_mean": [526, 1036], "rolling_median": [527, 1037], "rolling_min": [528, 1038], "rolling_quantil": [529, 1039], "rolling_skew": [530, 1040], "rolling_std": [531, 1041], "rolling_sum": [532, 1042], "rolling_var": [533, 1043], "search_sort": [536, 1046], "shrink_dtyp": [540, 1054], "shuffl": [541, 1056], "sign": [542, 1057], "sin": [543, 1058], "sinh": [544, 1059], "skew": [545, 1060], "sort_bi": 548, "sqrt": [549, 1063], "str": [551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109], "extract": [559, 1074], "extract_al": [560, 1075], "extract_group": [561, 1076], "json_extract": [562, 1077], "json_path_match": [563, 1078], "len_byt": [564, 1079], "len_char": [565, 1080], "ljust": [567, 1082], "lstrip": [568, 1083], "n_char": [569, 1084], "parse_int": [570, 1085], "replace_al": [572, 1087], "rjust": [573, 1088], "rstrip": [574, 1089], "split": [576, 1091], "split_exact": [577, 1092], "splitn": [578, 1093], "strip": [580, 1095], "strip_char": [581, 1096], "strip_chars_end": [582, 1097], "strip_chars_start": [583, 1098], "strip_prefix": [584, 1099], "strip_suffix": [585, 1100], "strptime": [586, 1101], "to_dat": [587, 1102], "to_datetim": [588, 1103], "to_decim": [589, 1104], "to_lowercas": [590, 1105], "to_tim": [591, 1106], "to_titlecas": [592, 1107], "to_uppercas": [593, 1108], "zfill": [594, 1109], "field": [595, 1110, 1111], "rename_field": [596, 1112], "sub": 597, "suffix": 598, "tan": [603, 1119], "tanh": [604, 1120], "to_phys": [605, 1128], "truediv": 607, "unique_count": [609, 1131], "upper_bound": [610, 1132], "value_count": [611, 1133], "where": 613, "xor": 614, "all_horizont": 616, "any_horizont": 618, "arang": 621, "arctan2": 622, "arctan2d": 623, "arg_sort_bi": 624, "arg_wher": 625, "avg": 626, "coalesc": 627, "concat_list": 628, "concat_str": 629, "cov": 632, "cumfold": 633, "cumreduc": 634, "cumsum_horizont": 636, "date_rang": [638, 639], "datetime_rang": [641, 642], "element": 644, "format": 648, "from_epoch": 649, "group": 650, "int_rang": [653, 654], "lit": 656, "max_horizont": 661, "min_horizont": 665, "ones": 667, "reduc": 669, "repeat": 670, "rolling_corr": 671, "rolling_cov": 672, "sql_expr": 674, "sum_horizont": 678, "time_rang": [681, 682], "when": 684, "zero": 685, "categori": [689, 1141], "col": 690, "name": [691, 1013], "express": 694, "oper": [699, 807], "conjunct": 699, "comparison": 699, "string": [700, 1149], "window": 703, "convers": 704, "parallel": 704, "random": 704, "refer": 705, "input": 706, "output": 706, "feather": 706, "ipc": 706, "parquet": 706, "databas": 706, "json": 706, "avro": 706, "spreadsheet": 706, "apach": 706, "iceberg": 706, "delta": 706, "lake": 706, "dataset": 706, "collect": 715, "collect_async": 716, "deseri": 718, "explain": 722, "fetch": 724, "profil": [754, 1153], "serial": 763, "show_graph": 767, "with_context": 782, "lazygroupbi": [785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800], "read": 805, "write": 805, "logic": 805, "plan": 805, "selector": 807, "import": 807, "set": [807, 1048], "is_loc": 839, "to_loc": 841, "uses_lexical_ord": 842, "chunk_length": 845, "get_chunk": 926, "has_valid": 927, "hist": 930, "inner_dtyp": 932, "is_boolean": 935, "is_float": 941, "is_integ": 944, "is_numer": 951, "is_sort": 952, "is_tempor": 953, "is_utf8": 955, "new_from_index": 1016, "series_equ": 1047, "set_at_idx": 1049, "to_fram": 1123, "to_list": 1125, "view": 1135, "zip_with": 1136, "sql": 1152, "method": 1152, "assert": 1153, "primit": 1153, "strategi": 1153, "helper": 1153, "util": 1154}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.testing.parametric.create_list_strategy": [[136, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.column": [[134, "polars-testing-parametric-column"]], "polars.using_string_cache": [[142, "polars-using-string-cache"]], "polars.testing.parametric.set_profile": [[140, "polars-testing-parametric-set-profile"]], "Config": [[143, "config"]], "Config options": [[143, "config-options"]], "Config load, save, and current state": [[143, "config-load-save-and-current-state"]], "Use as a context manager": [[143, "use-as-a-context-manager"]], "Use as a function decorator": [[143, "use-as-a-function-decorator"]], "polars.read_ipc": [[113, "polars-read-ipc"]], "polars.set_random_seed": [[128, "polars-set-random-seed"]], "polars.exceptions.ColumnNotFoundError": [[83, "polars-exceptions-columnnotfounderror"]], "polars.scan_ndjson": [[125, "polars-scan-ndjson"]], "polars.read_parquet": [[119, "polars-read-parquet"]], "polars.testing.assert_series_equal": [[132, "polars-testing-assert-series-equal"]], "polars.read_csv_batched": [[108, "polars-read-csv-batched"]], "polars.threadpool_size": [[141, "polars-threadpool-size"]], "polars.enable_string_cache": [[81, "polars-enable-string-cache"]], "polars.from_dicts": [[99, "polars-from-dicts"]], "polars.from_numpy": [[100, "polars-from-numpy"]], "polars.scan_csv": [[121, "polars-scan-csv"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[105, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.DataFrame.apply": [[146, "polars-dataframe-apply"]], "polars.collect_all_async": [[78, "polars-collect-all-async"]], "polars.exceptions.ArrowError": [[82, "polars-exceptions-arrowerror"]], "polars.disable_string_cache": [[80, "polars-disable-string-cache"]], "polars.exceptions.ComputeError": [[84, "polars-exceptions-computeerror"]], "polars.exceptions.NoRowsReturnedError": [[88, "polars-exceptions-norowsreturnederror"]], "polars.read_delta": [[111, "polars-read-delta"]], "polars.scan_ipc": [[124, "polars-scan-ipc"]], "polars.exceptions.TooManyRowsReturnedError": [[95, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.NoDataError": [[87, "polars-exceptions-nodataerror"]], "polars.DataFrame.approx_n_unique": [[147, "polars-dataframe-approx-n-unique"]], "polars.exceptions.DuplicateError": [[85, "polars-exceptions-duplicateerror"]], "polars.read_ndjson": [[117, "polars-read-ndjson"]], "polars.api.register_series_namespace": [[75, "polars-api-register-series-namespace"]], "polars.show_versions": [[129, "polars-show-versions"]], "polars.testing.parametric.dataframes": [[137, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.load_profile": [[138, "polars-testing-parametric-load-profile"]], "polars.exceptions.SchemaError": [[91, "polars-exceptions-schemaerror"]], "polars.read_ipc_schema": [[114, "polars-read-ipc-schema"]], "polars.scan_iceberg": [[123, "polars-scan-iceberg"]], "polars.exceptions.PolarsPanicError": [[89, "polars-exceptions-polarspanicerror"]], "polars.read_ods": [[118, "polars-read-ods"]], "polars.read_csv": [[107, "polars-read-csv"]], "polars.testing.parametric.series": [[139, "polars-testing-parametric-series"]], "polars.from_dataframe": [[97, "polars-from-dataframe"]], "polars.concat": [[79, "polars-concat"]], "polars.testing.parametric.columns": [[135, "polars-testing-parametric-columns"]], "polars.read_json": [[116, "polars-read-json"]], "polars.collect_all": [[77, "polars-collect-all"]], "polars.from_dict": [[98, "polars-from-dict"]], "polars.testing.assert_frame_not_equal": [[131, "polars-testing-assert-frame-not-equal"]], "polars.from_pandas": [[101, "polars-from-pandas"]], "polars.DataFrame.bottom_k": [[149, "polars-dataframe-bottom-k"]], "polars.read_parquet_schema": [[120, "polars-read-parquet-schema"]], "polars.from_arrow": [[96, "polars-from-arrow"]], "polars.read_excel": [[112, "polars-read-excel"]], "polars.DataFrame.__dataframe__": [[145, "polars-dataframe-dataframe"]], "polars.from_repr": [[103, "polars-from-repr"]], "polars.read_database_uri": [[110, "polars-read-database-uri"]], "polars.read_database": [[109, "polars-read-database"]], "polars.DataFrame.approx_unique": [[148, "polars-dataframe-approx-unique"]], "polars.from_records": [[102, "polars-from-records"]], "polars.get_index_type": [[104, "polars-get-index-type"]], "polars.build_info": [[76, "polars-build-info"]], "polars.testing.assert_series_not_equal": [[133, "polars-testing-assert-series-not-equal"]], "polars.scan_pyarrow_dataset": [[127, "polars-scan-pyarrow-dataset"]], "polars.exceptions.ShapeError": [[93, "polars-exceptions-shapeerror"]], "polars.scan_delta": [[122, "polars-scan-delta"]], "polars.testing.assert_frame_equal": [[130, "polars-testing-assert-frame-equal"]], "polars.exceptions.StructFieldNotFoundError": [[94, "polars-exceptions-structfieldnotfounderror"]], "polars.scan_parquet": [[126, "polars-scan-parquet"]], "polars.exceptions.InvalidOperationError": [[86, "polars-exceptions-invalidoperationerror"]], "polars.read_avro": [[106, "polars-read-avro"]], "polars.exceptions.RowsError": [[90, "polars-exceptions-rowserror"]], "polars.exceptions.SchemaFieldNotFoundError": [[92, "polars-exceptions-schemafieldnotfounderror"]], "Aggregation": [[144, "aggregation"], [808, "aggregation"], [707, "aggregation"], [283, "aggregation"]], "polars.read_ipc_stream": [[115, "polars-read-ipc-stream"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.DataFrame.write_ipc": [[34, "polars-dataframe-write-ipc"]], "polars.LazyFrame.sink_parquet": [[52, "polars-lazyframe-sink-parquet"]], "polars.DataFrame.write_ipc_stream": [[35, "polars-dataframe-write-ipc-stream"]], "polars.List": [[53, "polars-list"]], "polars.UInt32": [[66, "polars-uint32"]], "polars.Duration": [[43, "polars-duration"]], "polars.DataFrame.write_ndjson": [[37, "polars-dataframe-write-ndjson"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1153, "examples"], [807, "examples"]], "polars.DataFrame.write_parquet": [[38, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Int16": [[46, "polars-int16"]], "polars.Int32": [[47, "polars-int32"]], "Index": [[0, "index"]], "polars.Config.set_tbl_cell_alignment": [[16, "polars-config-set-tbl-cell-alignment"]], "polars.api.register_dataframe_namespace": [[72, "polars-api-register-dataframe-namespace"]], "polars.SQLContext.tables": [[60, "polars-sqlcontext-tables"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Config.state": [[28, "polars-config-state"]], "polars.Object": [[55, "polars-object"]], "polars.Date": [[40, "polars-date"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.SQLContext.register": [[57, "polars-sqlcontext-register"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.UInt64": [[67, "polars-uint64"]], "polars.Datetime": [[41, "polars-datetime"]], "polars.SQLContext.register_globals": [[58, "polars-sqlcontext-register-globals"]], "polars.DataFrame.write_excel": [[33, "polars-dataframe-write-excel"]], "polars.DataFrame.write_delta": [[32, "polars-dataframe-write-delta"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_streaming_chunk_size": [[15, "polars-config-set-streaming-chunk-size"]], "polars.Time": [[64, "polars-time"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Binary": [[3, "polars-binary"]], "polars.Float64": [[45, "polars-float64"]], "polars.UInt8": [[68, "polars-uint8"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_verbose": [[27, "polars-config-set-verbose"]], "polars.LazyFrame.sink_csv": [[50, "polars-lazyframe-sink-csv"]], "polars.StringCache": [[62, "polars-stringcache"]], "polars.Utf8": [[70, "polars-utf8"]], "polars.DataFrame.write_avro": [[29, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.align_frames": [[71, "polars-align-frames"]], "polars.SQLContext.register_many": [[59, "polars-sqlcontext-register-many"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.UInt16": [[65, "polars-uint16"]], "polars.DataFrame.write_database": [[31, "polars-dataframe-write-database"]], "polars.Decimal": [[42, "polars-decimal"]], "polars.SQLContext.execute": [[56, "polars-sqlcontext-execute"]], "polars.api.register_expr_namespace": [[73, "polars-api-register-expr-namespace"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_fmt_str_lengths": [[14, "polars-config-set-fmt-str-lengths"]], "polars.Int64": [[48, "polars-int64"]], "polars.DataFrame.write_json": [[36, "polars-dataframe-write-json"]], "polars.api.register_lazyframe_namespace": [[74, "polars-api-register-lazyframe-namespace"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Struct": [[63, "polars-struct"]], "polars.Config.set_fmt_float": [[13, "polars-config-set-fmt-float"]], "polars.DataFrame.write_csv": [[30, "polars-dataframe-write-csv"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Float32": [[44, "polars-float32"]], "polars.Int8": [[49, "polars-int8"]], "polars.LazyFrame.sink_ipc": [[51, "polars-lazyframe-sink-ipc"]], "polars.Null": [[54, "polars-null"]], "polars.Unknown": [[69, "polars-unknown"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.DataType": [[39, "polars-datatype"]], "polars.SQLContext.unregister": [[61, "polars-sqlcontext-unregister"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Series.str.contains": [[1067, "polars-series-str-contains"]], "polars.Series.str.zfill": [[1109, "polars-series-str-zfill"]], "polars.Series.str.count_match": [[1068, "polars-series-str-count-match"]], "polars.Series.str.ljust": [[1082, "polars-series-str-ljust"]], "polars.Series.struct.field": [[1110, "polars-series-struct-field"]], "polars.Series.str.extract_groups": [[1076, "polars-series-str-extract-groups"]], "polars.Series.str.lstrip": [[1083, "polars-series-str-lstrip"]], "polars.Series.str.strip": [[1095, "polars-series-str-strip"]], "polars.Series.str.lengths": [[1081, "polars-series-str-lengths"]], "polars.Series.str": [[1065, "polars-series-str"]], "polars.Series.str.rstrip": [[1089, "polars-series-str-rstrip"]], "polars.Series.str.split_exact": [[1092, "polars-series-str-split-exact"]], "polars.Series.shift": [[1052, "polars-series-shift"]], "polars.Series.str.to_time": [[1106, "polars-series-str-to-time"]], "polars.Series.str.extract": [[1074, "polars-series-str-extract"]], "polars.Series.str.to_uppercase": [[1108, "polars-series-str-to-uppercase"]], "polars.Series.slice": [[1061, "polars-series-slice"]], "polars.Series.struct.fields": [[1111, "polars-series-struct-fields"]], "polars.Series.str.parse_int": [[1085, "polars-series-str-parse-int"]], "polars.Series.tan": [[1119, "polars-series-tan"]], "polars.Series.str.slice": [[1090, "polars-series-str-slice"]], "polars.Series.to_arrow": [[1121, "polars-series-to-arrow"]], "polars.Series.str.ends_with": [[1072, "polars-series-str-ends-with"]], "polars.Series.to_init_repr": [[1124, "polars-series-to-init-repr"]], "polars.Series.shift_and_fill": [[1053, "polars-series-shift-and-fill"]], "polars.Series.str.strip_chars_end": [[1097, "polars-series-str-strip-chars-end"]], "polars.Series.sum": [[1115, "polars-series-sum"]], "polars.Series.take_every": [[1118, "polars-series-take-every"]], "polars.Series.str.len_chars": [[1080, "polars-series-str-len-chars"]], "polars.Series.tail": [[1116, "polars-series-tail"]], "polars.Series.str.to_date": [[1102, "polars-series-str-to-date"]], "polars.Series.str.to_lowercase": [[1105, "polars-series-str-to-lowercase"]], "polars.Series.struct.rename_fields": [[1112, "polars-series-struct-rename-fields"]], "polars.Series.struct.schema": [[1113, "polars-series-struct-schema"]], "polars.Series.to_dummies": [[1122, "polars-series-to-dummies"]], "polars.Series.str.split": [[1091, "polars-series-str-split"]], "polars.Series.str.strip_prefix": [[1099, "polars-series-str-strip-prefix"]], "polars.Series.str.count_matches": [[1069, "polars-series-str-count-matches"]], "polars.Series.take": [[1117, "polars-series-take"]], "polars.Series.str.replace": [[1086, "polars-series-str-replace"]], "polars.Series.shuffle": [[1056, "polars-series-shuffle"]], "polars.Series.str.splitn": [[1093, "polars-series-str-splitn"]], "polars.Series.struct.unnest": [[1114, "polars-series-struct-unnest"]], "polars.Series.str.concat": [[1066, "polars-series-str-concat"]], "polars.Series.str.decode": [[1070, "polars-series-str-decode"]], "polars.Series.str.strip_chars_start": [[1098, "polars-series-str-strip-chars-start"]], "polars.Series.str.n_chars": [[1084, "polars-series-str-n-chars"]], "polars.Series.sin": [[1058, "polars-series-sin"]], "polars.Series.str.strip_chars": [[1096, "polars-series-str-strip-chars"]], "polars.Series.str.strip_suffix": [[1100, "polars-series-str-strip-suffix"]], "polars.Series.shrink_dtype": [[1054, "polars-series-shrink-dtype"]], "polars.Series.str.to_titlecase": [[1107, "polars-series-str-to-titlecase"]], "polars.Series.str.explode": [[1073, "polars-series-str-explode"]], "polars.Series.str.json_path_match": [[1078, "polars-series-str-json-path-match"]], "polars.Series.str.rjust": [[1088, "polars-series-str-rjust"]], "polars.Series.shape": [[1051, "polars-series-shape"]], "polars.Series.str.to_datetime": [[1103, "polars-series-str-to-datetime"]], "polars.Series.str.len_bytes": [[1079, "polars-series-str-len-bytes"]], "polars.Series.shrink_to_fit": [[1055, "polars-series-shrink-to-fit"]], "polars.Series.str.extract_all": [[1075, "polars-series-str-extract-all"]], "polars.Series.to_frame": [[1123, "polars-series-to-frame"]], "polars.Series.sign": [[1057, "polars-series-sign"]], "polars.Series.str.strptime": [[1101, "polars-series-str-strptime"]], "polars.Series.tanh": [[1120, "polars-series-tanh"]], "polars.Series.set_sorted": [[1050, "polars-series-set-sorted"]], "polars.Series.sort": [[1062, "polars-series-sort"]], "polars.Series.skew": [[1060, "polars-series-skew"]], "polars.Series.sqrt": [[1063, "polars-series-sqrt"]], "polars.Series.str.encode": [[1071, "polars-series-str-encode"]], "polars.Series.std": [[1064, "polars-series-std"]], "polars.Series.str.replace_all": [[1087, "polars-series-str-replace-all"]], "polars.Series.str.starts_with": [[1094, "polars-series-str-starts-with"]], "polars.Series.str.to_decimal": [[1104, "polars-series-str-to-decimal"]], "polars.Series.sinh": [[1059, "polars-series-sinh"]], "polars.Series.str.json_extract": [[1077, "polars-series-str-json-extract"]], "polars.Series.peak_min": [[1021, "polars-series-peak-min"]], "polars.Series.list.union": [[998, "polars-series-list-union"]], "polars.Series.min": [[1009, "polars-series-min"]], "polars.Series.nan_min": [[1015, "polars-series-nan-min"]], "polars.Series.series_equal": [[1047, "polars-series-series-equal"]], "polars.Series.list.intersection": [[977, "polars-series-list-intersection"]], "polars.Series.list.min": [[984, "polars-series-list-min"]], "polars.Series.list.reverse": [[985, "polars-series-list-reverse"]], "polars.Series.rolling_mean": [[1036, "polars-series-rolling-mean"]], "polars.Series.list.last": [[979, "polars-series-list-last"]], "polars.Series.list.set_intersection": [[987, "polars-series-list-set-intersection"]], "polars.Series.rolling_var": [[1043, "polars-series-rolling-var"]], "polars.Series.sample": [[1045, "polars-series-sample"]], "polars.Series.rolling_quantile": [[1039, "polars-series-rolling-quantile"]], "polars.Series.rank": [[1025, "polars-series-rank"]], "polars.Series.list.lengths": [[981, "polars-series-list-lengths"]], "polars.Series.list.mean": [[983, "polars-series-list-mean"]], "polars.Series.n_unique": [[1012, "polars-series-n-unique"]], "polars.Series.rle_id": [[1032, "polars-series-rle-id"]], "polars.Series.rolling_skew": [[1040, "polars-series-rolling-skew"]], "polars.Series.rolling_min": [[1038, "polars-series-rolling-min"]], "polars.Series.mode": [[1010, "polars-series-mode"]], "polars.Series.list.unique": [[999, "polars-series-list-unique"]], "polars.Series.log10": [[1001, "polars-series-log10"]], "polars.Series.peak_max": [[1020, "polars-series-peak-max"]], "polars.Series.reinterpret": [[1027, "polars-series-reinterpret"]], "polars.Series.median": [[1008, "polars-series-median"]], "polars.Series.list.max": [[982, "polars-series-list-max"]], "polars.Series.rolling_max": [[1035, "polars-series-rolling-max"]], "polars.Series.list.sum": [[993, "polars-series-list-sum"]], "polars.Series.set": [[1048, "polars-series-set"]], "polars.Series.mean": [[1007, "polars-series-mean"]], "polars.Series.lower_bound": [[1003, "polars-series-lower-bound"]], "polars.Series.list.take": [[996, "polars-series-list-take"]], "polars.Series.log1p": [[1002, "polars-series-log1p"]], "polars.Series.map_elements": [[1005, "polars-series-map-elements"]], "polars.Series.rolling_map": [[1034, "polars-series-rolling-map"]], "polars.Series.round": [[1044, "polars-series-round"]], "polars.Series.nan_max": [[1014, "polars-series-nan-max"]], "polars.Series.list.join": [[978, "polars-series-list-join"]], "polars.Series.max": [[1006, "polars-series-max"]], "polars.Series.log": [[1000, "polars-series-log"]], "polars.Series.list.head": [[976, "polars-series-list-head"]], "polars.Series.list.get": [[975, "polars-series-list-get"]], "polars.Series.list.shift": [[990, "polars-series-list-shift"]], "polars.Series.new_from_index": [[1016, "polars-series-new-from-index"]], "polars.Series.rename": [[1028, "polars-series-rename"]], "polars.Series.rolling_apply": [[1033, "polars-series-rolling-apply"]], "polars.Series.list.set_union": [[989, "polars-series-list-set-union"]], "polars.Series.pct_change": [[1019, "polars-series-pct-change"]], "polars.Series.qcut": [[1023, "polars-series-qcut"]], "polars.Series.list.tail": [[995, "polars-series-list-tail"]], "polars.Series.name": [[1013, "polars-series-name"]], "polars.Series.list.symmetric_difference": [[994, "polars-series-list-symmetric-difference"]], "polars.Series.rechunk": [[1026, "polars-series-rechunk"]], "polars.Series.n_chunks": [[1011, "polars-series-n-chunks"]], "polars.Series.rle": [[1031, "polars-series-rle"]], "polars.Series.null_count": [[1018, "polars-series-null-count"]], "polars.Series.list.len": [[980, "polars-series-list-len"]], "polars.Series.reshape": [[1029, "polars-series-reshape"]], "polars.Series.list.set_symmetric_difference": [[988, "polars-series-list-set-symmetric-difference"]], "polars.Series.search_sorted": [[1046, "polars-series-search-sorted"]], "polars.Series.list.set_difference": [[986, "polars-series-list-set-difference"]], "polars.Series.reverse": [[1030, "polars-series-reverse"]], "polars.Series.list.sort": [[992, "polars-series-list-sort"]], "polars.Series.list.to_struct": [[997, "polars-series-list-to-struct"]], "polars.Series.not_": [[1017, "polars-series-not"]], "polars.Series.rolling_std": [[1041, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[1042, "polars-series-rolling-sum"]], "polars.Series.rolling_median": [[1037, "polars-series-rolling-median"]], "polars.Series.set_at_idx": [[1049, "polars-series-set-at-idx"]], "polars.Series.quantile": [[1024, "polars-series-quantile"]], "polars.Series.map_dict": [[1004, "polars-series-map-dict"]], "polars.Series.product": [[1022, "polars-series-product"]], "polars.Series.list.slice": [[991, "polars-series-list-slice"]], "polars.Series.dt.year": [[910, "polars-series-dt-year"]], "polars.Series.is_null": [[950, "polars-series-is-null"]], "polars.Series.list.arg_max": [[963, "polars-series-list-arg-max"]], "polars.Series.list.count_match": [[967, "polars-series-list-count-match"]], "polars.Series.dt.to_string": [[905, "polars-series-dt-to-string"]], "polars.Series.dt.weekday": [[908, "polars-series-dt-weekday"]], "polars.Series.is_numeric": [[951, "polars-series-is-numeric"]], "polars.Series.is_unique": [[954, "polars-series-is-unique"]], "polars.Series.extend_constant": [[920, "polars-series-extend-constant"]], "polars.Series.hash": [[928, "polars-series-hash"]], "polars.Series.list.difference": [[970, "polars-series-list-difference"]], "polars.Series.dt.timestamp": [[904, "polars-series-dt-timestamp"]], "polars.Series.dt.seconds": [[901, "polars-series-dt-seconds"]], "polars.Series.estimated_size": [[913, "polars-series-estimated-size"]], "polars.Series.is_in": [[942, "polars-series-is-in"]], "polars.Series.has_validity": [[927, "polars-series-has-validity"]], "polars.Series.list.count_matches": [[968, "polars-series-list-count-matches"]], "polars.Series.explode": [[918, "polars-series-explode"]], "polars.Series.is_last_distinct": [[946, "polars-series-is-last-distinct"]], "polars.Series.dt.second": [[900, "polars-series-dt-second"]], "polars.Series.dtype": [[911, "polars-series-dtype"]], "polars.Series.ewm_std": [[915, "polars-series-ewm-std"]], "polars.Series.is_duplicated": [[936, "polars-series-is-duplicated"]], "polars.Series.is_last": [[945, "polars-series-is-last"]], "polars.Series.list.drop_nulls": [[971, "polars-series-list-drop-nulls"]], "polars.Series.is_boolean": [[935, "polars-series-is-boolean"]], "polars.Series.floor": [[925, "polars-series-floor"]], "polars.Series.get_chunks": [[926, "polars-series-get-chunks"]], "polars.Series.list.explode": [[973, "polars-series-list-explode"]], "polars.Series.len": [[958, "polars-series-len"]], "polars.Series.extend": [[919, "polars-series-extend"]], "polars.Series.list.eval": [[972, "polars-series-list-eval"]], "polars.Series.implode": [[931, "polars-series-implode"]], "polars.Series.is_between": [[934, "polars-series-is-between"]], "polars.Series.list": [[960, "polars-series-list"]], "polars.Series.is_empty": [[937, "polars-series-is-empty"]], "polars.Series.exp": [[917, "polars-series-exp"]], "polars.Series.list.first": [[974, "polars-series-list-first"]], "polars.Series.limit": [[959, "polars-series-limit"]], "polars.Series.is_first": [[939, "polars-series-is-first"]], "polars.Series.dt.week": [[907, "polars-series-dt-week"]], "polars.Series.dt.with_time_unit": [[909, "polars-series-dt-with-time-unit"]], "polars.Series.dt.strftime": [[902, "polars-series-dt-strftime"]], "polars.Series.is_infinite": [[943, "polars-series-is-infinite"]], "polars.Series.filter": [[923, "polars-series-filter"]], "polars.Series.is_integer": [[944, "polars-series-is-integer"]], "polars.Series.is_first_distinct": [[940, "polars-series-is-first-distinct"]], "polars.Series.fill_null": [[922, "polars-series-fill-null"]], "polars.Series.is_temporal": [[953, "polars-series-is-temporal"]], "polars.Series.dt.time": [[903, "polars-series-dt-time"]], "polars.Series.fill_nan": [[921, "polars-series-fill-nan"]], "polars.Series.entropy": [[912, "polars-series-entropy"]], "polars.Series.is_not_null": [[949, "polars-series-is-not-null"]], "polars.Series.interpolate": [[933, "polars-series-interpolate"]], "polars.Series.is_finite": [[938, "polars-series-is-finite"]], "polars.Series.is_sorted": [[952, "polars-series-is-sorted"]], "polars.Series.list.arg_min": [[964, "polars-series-list-arg-min"]], "polars.Series.ewm_var": [[916, "polars-series-ewm-var"]], "polars.Series.list.all": [[961, "polars-series-list-all"]], "polars.Series.is_nan": [[947, "polars-series-is-nan"]], "polars.Series.kurtosis": [[957, "polars-series-kurtosis"]], "polars.Series.list.any": [[962, "polars-series-list-any"]], "polars.Series.list.contains": [[966, "polars-series-list-contains"]], "polars.Series.ewm_mean": [[914, "polars-series-ewm-mean"]], "polars.Series.is_not_nan": [[948, "polars-series-is-not-nan"]], "polars.Series.inner_dtype": [[932, "polars-series-inner-dtype"]], "polars.Series.dt.truncate": [[906, "polars-series-dt-truncate"]], "polars.Series.item": [[956, "polars-series-item"]], "polars.Series.head": [[929, "polars-series-head"]], "polars.Series.list.concat": [[965, "polars-series-list-concat"]], "polars.Series.list.diff": [[969, "polars-series-list-diff"]], "polars.Series.is_float": [[941, "polars-series-is-float"]], "polars.Series.flags": [[924, "polars-series-flags"]], "polars.Series.is_utf8": [[955, "polars-series-is-utf8"]], "polars.Series.hist": [[930, "polars-series-hist"]], "polars.Series.arr.min": [[827, "polars-series-arr-min"]], "polars.Series.cat.to_local": [[841, "polars-series-cat-to-local"]], "polars.Series.cos": [[851, "polars-series-cos"]], "polars.Series.drop_nans": [[863, "polars-series-drop-nans"]], "polars.Series.dt": [[865, "polars-series-dt"]], "polars.Series.clone": [[850, "polars-series-clone"]], "polars.Series.dt.days": [[873, "polars-series-dt-days"]], "polars.Series.bottom_k": [[835, "polars-series-bottom-k"]], "polars.Series.dt.microseconds": [[884, "polars-series-dt-microseconds"]], "polars.Series.arr.max": [[826, "polars-series-arr-max"]], "polars.Series.ceil": [[844, "polars-series-ceil"]], "polars.Series.dt.ordinal_day": [[896, "polars-series-dt-ordinal-day"]], "polars.Series.dt.cast_time_unit": [[867, "polars-series-dt-cast-time-unit"]], "polars.Series.cbrt": [[843, "polars-series-cbrt"]], "polars.Series.dt.quarter": [[897, "polars-series-dt-quarter"]], "polars.Series.dt.minutes": [[889, "polars-series-dt-minutes"]], "polars.Series.dt.datetime": [[871, "polars-series-dt-datetime"]], "polars.Series.bin.ends_with": [[833, "polars-series-bin-ends-with"]], "polars.Series.dt.day": [[872, "polars-series-dt-day"]], "polars.Series.dt.convert_time_zone": [[869, "polars-series-dt-convert-time-zone"]], "polars.Series.dot": [[862, "polars-series-dot"]], "polars.Series.dt.hour": [[876, "polars-series-dt-hour"]], "polars.Series.arr.sum": [[828, "polars-series-arr-sum"]], "polars.Series.dt.month": [[890, "polars-series-dt-month"]], "polars.Series.clip_max": [[848, "polars-series-clip-max"]], "polars.Series.dt.date": [[870, "polars-series-dt-date"]], "polars.Series.cosh": [[852, "polars-series-cosh"]], "polars.Series.dt.milliseconds": [[886, "polars-series-dt-milliseconds"]], "polars.Series.dt.max": [[880, "polars-series-dt-max"]], "polars.Series.clear": [[846, "polars-series-clear"]], "polars.Series.diff": [[861, "polars-series-diff"]], "polars.Series.dt.epoch": [[875, "polars-series-dt-epoch"]], "polars.Series.cut": [[859, "polars-series-cut"]], "polars.Series.dt.iso_year": [[879, "polars-series-dt-iso-year"]], "polars.Series.dt.min": [[887, "polars-series-dt-min"]], "polars.Series.cat.get_categories": [[838, "polars-series-cat-get-categories"]], "polars.Series.cast": [[836, "polars-series-cast"]], "polars.Series.dt.hours": [[877, "polars-series-dt-hours"]], "polars.Series.dt.month_start": [[892, "polars-series-dt-month-start"]], "polars.Series.cat.set_ordering": [[840, "polars-series-cat-set-ordering"]], "polars.Series.bin.encode": [[832, "polars-series-bin-encode"]], "polars.Series.cot": [[853, "polars-series-cot"]], "polars.Series.cumprod": [[856, "polars-series-cumprod"]], "polars.Series.dt.dst_offset": [[874, "polars-series-dt-dst-offset"]], "polars.Series.dt.median": [[882, "polars-series-dt-median"]], "polars.Series.arr.unique": [[829, "polars-series-arr-unique"]], "polars.Series.chunk_lengths": [[845, "polars-series-chunk-lengths"]], "polars.Series.cat.uses_lexical_ordering": [[842, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.dt.mean": [[881, "polars-series-dt-mean"]], "polars.Series.dt.microsecond": [[883, "polars-series-dt-microsecond"]], "polars.Series.dt.millisecond": [[885, "polars-series-dt-millisecond"]], "polars.Series.describe": [[860, "polars-series-describe"]], "polars.Series.arg_unique": [[825, "polars-series-arg-unique"]], "polars.Series.dt.nanoseconds": [[894, "polars-series-dt-nanoseconds"]], "polars.Series.dt.offset_by": [[895, "polars-series-dt-offset-by"]], "polars.Series.cat": [[837, "polars-series-cat"]], "polars.Series.dt.month_end": [[891, "polars-series-dt-month-end"]], "polars.Series.dt.round": [[899, "polars-series-dt-round"]], "polars.Series.dt.minute": [[888, "polars-series-dt-minute"]], "polars.Series.cummin": [[855, "polars-series-cummin"]], "polars.Series.bin.contains": [[830, "polars-series-bin-contains"]], "polars.Series.dt.base_utc_offset": [[866, "polars-series-dt-base-utc-offset"]], "polars.Series.cat.is_local": [[839, "polars-series-cat-is-local"]], "polars.Series.drop_nulls": [[864, "polars-series-drop-nulls"]], "polars.Series.dt.combine": [[868, "polars-series-dt-combine"]], "polars.Series.cumulative_eval": [[858, "polars-series-cumulative-eval"]], "polars.Series.dt.nanosecond": [[893, "polars-series-dt-nanosecond"]], "polars.Series.clip": [[847, "polars-series-clip"]], "polars.Series.dt.replace_time_zone": [[898, "polars-series-dt-replace-time-zone"]], "polars.Series.bin.starts_with": [[834, "polars-series-bin-starts-with"]], "polars.Series.dt.is_leap_year": [[878, "polars-series-dt-is-leap-year"]], "polars.Series.cumsum": [[857, "polars-series-cumsum"]], "polars.Series.clip_min": [[849, "polars-series-clip-min"]], "polars.Series.cummax": [[854, "polars-series-cummax"]], "polars.Series.bin.decode": [[831, "polars-series-bin-decode"]], "Struct": [[1150, "struct"], [701, "struct"]], "polars.Series.unique_counts": [[1131, "polars-series-unique-counts"]], "String": [[1149, "string"], [700, "string"]], "Boolean": [[1140, "boolean"], [688, "boolean"]], "Utils": [[1154, "utils"]], "Array": [[1137, "array"], [686, "array"]], "List": [[1146, "list"], [695, "list"]], "polars.Series.to_pandas": [[1127, "polars-series-to-pandas"]], "Categories": [[1141, "categories"], [689, "categories"]], "polars.Series.var": [[1134, "polars-series-var"]], "Binary": [[1139, "binary"], [687, "binary"], [699, "binary"]], "Series": [[1145, "series"]], "polars.Series.top_k": [[1129, "polars-series-top-k"]], "Descriptive": [[1143, "descriptive"], [802, "descriptive"], [275, "descriptive"]], "polars.Series.to_list": [[1125, "polars-series-to-list"]], "Miscellaneous": [[1147, "miscellaneous"], [805, "miscellaneous"], [697, "miscellaneous"], [704, "miscellaneous"], [279, "miscellaneous"]], "polars.Series.unique": [[1130, "polars-series-unique"]], "Testing": [[1153, "testing"]], "Asserts": [[1153, "asserts"]], "Parametric testing": [[1153, "parametric-testing"]], "Polars primitives": [[1153, "polars-primitives"]], "Strategy helpers": [[1153, "strategy-helpers"]], "Profiles": [[1153, "profiles"]], "polars.Series.to_physical": [[1128, "polars-series-to-physical"]], "Attributes": [[1138, "attributes"], [801, "attributes"], [273, "attributes"]], "polars.Series.to_numpy": [[1126, "polars-series-to-numpy"]], "Computation": [[1142, "computation"], [692, "computation"], [274, "computation"]], "polars.Series.value_counts": [[1133, "polars-series-value-counts"]], "Manipulation/selection": [[1148, "manipulation-selection"], [806, "manipulation-selection"], [698, "manipulation-selection"], [280, "manipulation-selection"]], "polars.Series.upper_bound": [[1132, "polars-series-upper-bound"]], "Export": [[1144, "export"], [276, "export"]], "polars.Series.zip_with": [[1136, "polars-series-zip-with"]], "Temporal": [[1151, "temporal"], [702, "temporal"], [281, "temporal"]], "SQL": [[1152, "sql"]], "Methods": [[1152, "methods"]], "polars.Series.view": [[1135, "polars-series-view"]], "polars.LazyFrame.std": [[770, "polars-lazyframe-std"]], "polars.LazyFrame.var": [[778, "polars-lazyframe-var"]], "polars.LazyFrame.set_sorted": [[764, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.write_json": [[784, "polars-lazyframe-write-json"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[796, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.LazyFrame.serialize": [[763, "polars-lazyframe-serialize"]], "polars.LazyFrame.take_every": [[773, "polars-lazyframe-take-every"]], "GroupBy": [[803, "groupby"], [277, "groupby"]], "polars.Series.any": [[812, "polars-series-any"]], "LazyFrame": [[804, "lazyframe"]], "polars.Series.all": [[811, "polars-series-all"]], "polars.LazyFrame.read_json": [[756, "polars-lazyframe-read-json"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[790, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.LazyFrame.shift_and_fill": [[766, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[786, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.select_seq": [[762, "polars-lazyframe-select-seq"]], "polars.LazyFrame.shift": [[765, "polars-lazyframe-shift"]], "polars.LazyFrame.merge_sorted": [[750, "polars-lazyframe-merge-sorted"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[785, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[797, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[793, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.arcsin": [[817, "polars-series-arcsin"]], "polars.Series.arg_max": [[821, "polars-series-arg-max"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[799, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Series.arccos": [[815, "polars-series-arccos"]], "polars.LazyFrame.select": [[761, "polars-lazyframe-select"]], "polars.LazyFrame.top_k": [[774, "polars-lazyframe-top-k"]], "polars.Series.arctanh": [[820, "polars-series-arctanh"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[795, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Series.alias": [[810, "polars-series-alias"]], "polars.LazyFrame.with_row_count": [[783, "polars-lazyframe-with-row-count"]], "polars.Series.abs": [[809, "polars-series-abs"]], "polars.Series.arg_sort": [[823, "polars-series-arg-sort"]], "Read/write logical plan": [[805, "read-write-logical-plan"]], "polars.LazyFrame.sum": [[771, "polars-lazyframe-sum"]], "polars.LazyFrame.rename": [[757, "polars-lazyframe-rename"]], "polars.Series.arctan": [[819, "polars-series-arctan"]], "polars.LazyFrame.width": [[779, "polars-lazyframe-width"]], "polars.LazyFrame.pipe": [[753, "polars-lazyframe-pipe"]], "polars.LazyFrame.unique": [[775, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[776, "polars-lazyframe-unnest"]], "polars.LazyFrame.show_graph": [[767, "polars-lazyframe-show-graph"]], "polars.LazyFrame.profile": [[754, "polars-lazyframe-profile"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[794, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.null_count": [[752, "polars-lazyframe-null-count"]], "polars.LazyFrame.min": [[751, "polars-lazyframe-min"]], "polars.LazyFrame.tail": [[772, "polars-lazyframe-tail"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[792, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.LazyFrame.quantile": [[755, "polars-lazyframe-quantile"]], "polars.LazyFrame.schema": [[760, "polars-lazyframe-schema"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[788, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.with_context": [[782, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_columns": [[780, "polars-lazyframe-with-columns"]], "polars.Series.append": [[813, "polars-series-append"]], "polars.Series.apply": [[814, "polars-series-apply"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[789, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.Series.arg_min": [[822, "polars-series-arg-min"]], "polars.LazyFrame.reverse": [[758, "polars-lazyframe-reverse"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[800, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[787, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.LazyFrame.rolling": [[759, "polars-lazyframe-rolling"]], "polars.LazyFrame.slice": [[768, "polars-lazyframe-slice"]], "polars.Series.arccosh": [[816, "polars-series-arccosh"]], "polars.LazyFrame.update": [[777, "polars-lazyframe-update"]], "polars.Series.arcsinh": [[818, "polars-series-arcsinh"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[791, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.LazyFrame.sort": [[769, "polars-lazyframe-sort"]], "polars.LazyFrame.with_columns_seq": [[781, "polars-lazyframe-with-columns-seq"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[798, "polars-lazyframe-group-by-lazygroupby-quantile"]], "Selectors": [[807, "selectors"]], "Importing": [[807, "importing"]], "Set operations": [[807, "set-operations"]], "Functions": [[807, "functions"], [704, "functions"], [693, "functions"]], "polars.Series.arg_true": [[824, "polars-series-arg-true"]], "polars.approx_n_unique": [[620, "polars-approx-n-unique"]], "polars.mean": [[662, "polars-mean"]], "polars.cov": [[632, "polars-cov"]], "polars.Expr.tan": [[603, "polars-expr-tan"]], "polars.int_range": [[653, "polars-int-range"]], "polars.arctan2d": [[623, "polars-arctan2d"]], "polars.ones": [[667, "polars-ones"]], "polars.arg_sort_by": [[624, "polars-arg-sort-by"]], "polars.cumsum_horizontal": [[636, "polars-cumsum-horizontal"]], "polars.map_groups": [[659, "polars-map-groups"]], "polars.Expr.tanh": [[604, "polars-expr-tanh"]], "polars.map": [[657, "polars-map"]], "polars.datetime_ranges": [[642, "polars-datetime-ranges"]], "polars.any_horizontal": [[618, "polars-any-horizontal"]], "polars.datetime_range": [[641, "polars-datetime-range"]], "polars.n_unique": [[666, "polars-n-unique"]], "polars.reduce": [[669, "polars-reduce"]], "polars.date_ranges": [[639, "polars-date-ranges"]], "polars.min": [[664, "polars-min"]], "polars.repeat": [[670, "polars-repeat"]], "polars.any": [[617, "polars-any"]], "polars.corr": [[630, "polars-corr"]], "polars.date": [[637, "polars-date"]], "polars.exclude": [[645, "polars-exclude"]], "polars.from_epoch": [[649, "polars-from-epoch"]], "polars.Expr.take": [[601, "polars-expr-take"]], "polars.rolling_cov": [[672, "polars-rolling-cov"]], "polars.avg": [[626, "polars-avg"]], "polars.select": [[673, "polars-select"]], "polars.concat_str": [[629, "polars-concat-str"]], "polars.implode": [[652, "polars-implode"]], "polars.sql_expr": [[674, "polars-sql-expr"]], "polars.Expr.truediv": [[607, "polars-expr-truediv"]], "polars.cumreduce": [[634, "polars-cumreduce"]], "polars.Expr.where": [[613, "polars-expr-where"]], "polars.fold": [[647, "polars-fold"]], "polars.Expr.top_k": [[606, "polars-expr-top-k"]], "polars.Expr.unique_counts": [[609, "polars-expr-unique-counts"]], "polars.concat_list": [[628, "polars-concat-list"]], "polars.max_horizontal": [[661, "polars-max-horizontal"]], "polars.rolling_corr": [[671, "polars-rolling-corr"]], "polars.Expr.to_physical": [[605, "polars-expr-to-physical"]], "polars.Expr.unique": [[608, "polars-expr-unique"]], "polars.arctan2": [[622, "polars-arctan2"]], "polars.map_batches": [[658, "polars-map-batches"]], "polars.int_ranges": [[654, "polars-int-ranges"]], "polars.format": [[648, "polars-format"]], "polars.Expr.upper_bound": [[610, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[611, "polars-expr-value-counts"]], "polars.Expr.var": [[612, "polars-expr-var"]], "polars.Expr.take_every": [[602, "polars-expr-take-every"]], "polars.datetime": [[640, "polars-datetime"]], "polars.arg_where": [[625, "polars-arg-where"]], "polars.all_horizontal": [[616, "polars-all-horizontal"]], "polars.cumfold": [[633, "polars-cumfold"]], "polars.arange": [[621, "polars-arange"]], "polars.lit": [[656, "polars-lit"]], "polars.head": [[651, "polars-head"]], "polars.cumsum": [[635, "polars-cumsum"]], "polars.coalesce": [[627, "polars-coalesce"]], "polars.max": [[660, "polars-max"]], "polars.all": [[615, "polars-all"]], "polars.Expr.xor": [[614, "polars-expr-xor"]], "polars.duration": [[643, "polars-duration"]], "polars.date_range": [[638, "polars-date-range"]], "polars.min_horizontal": [[665, "polars-min-horizontal"]], "polars.median": [[663, "polars-median"]], "polars.quantile": [[668, "polars-quantile"]], "polars.Expr.tail": [[600, "polars-expr-tail"]], "polars.apply": [[619, "polars-apply"]], "polars.groups": [[650, "polars-groups"]], "polars.element": [[644, "polars-element"]], "polars.last": [[655, "polars-last"]], "polars.count": [[631, "polars-count"]], "polars.first": [[646, "polars-first"]], "polars.Expr.str.contains": [[552, "polars-expr-str-contains"]], "polars.Expr.str.ends_with": [[557, "polars-expr-str-ends-with"]], "polars.Expr.str.rstrip": [[574, "polars-expr-str-rstrip"]], "polars.Expr.str.len_bytes": [[564, "polars-expr-str-len-bytes"]], "polars.Expr.sort": [[547, "polars-expr-sort"]], "polars.Expr.str.lstrip": [[568, "polars-expr-str-lstrip"]], "polars.Expr.sinh": [[544, "polars-expr-sinh"]], "polars.Expr.str.json_path_match": [[563, "polars-expr-str-json-path-match"]], "polars.Expr.str.split": [[576, "polars-expr-str-split"]], "polars.Expr.str.count_match": [[553, "polars-expr-str-count-match"]], "polars.Expr.str.count_matches": [[554, "polars-expr-str-count-matches"]], "polars.Expr.sort_by": [[548, "polars-expr-sort-by"]], "polars.Expr.str.lengths": [[566, "polars-expr-str-lengths"]], "polars.Expr.str.ljust": [[567, "polars-expr-str-ljust"]], "polars.Expr.str.strptime": [[586, "polars-expr-str-strptime"]], "polars.Expr.sample": [[535, "polars-expr-sample"]], "polars.Expr.str.explode": [[558, "polars-expr-str-explode"]], "polars.Expr.rolling_quantile": [[529, "polars-expr-rolling-quantile"]], "polars.Expr.str.to_uppercase": [[593, "polars-expr-str-to-uppercase"]], "polars.Expr.sum": [[599, "polars-expr-sum"]], "polars.Expr.sqrt": [[549, "polars-expr-sqrt"]], "polars.Expr.slice": [[546, "polars-expr-slice"]], "polars.Expr.str.split_exact": [[577, "polars-expr-str-split-exact"]], "polars.Expr.rolling_mean": [[526, "polars-expr-rolling-mean"]], "polars.Expr.shuffle": [[541, "polars-expr-shuffle"]], "polars.Expr.str.encode": [[556, "polars-expr-str-encode"]], "polars.Expr.str.extract": [[559, "polars-expr-str-extract"]], "polars.Expr.str.strip": [[580, "polars-expr-str-strip"]], "polars.Expr.str.strip_chars_end": [[582, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.replace_all": [[572, "polars-expr-str-replace-all"]], "polars.Expr.search_sorted": [[536, "polars-expr-search-sorted"]], "polars.Expr.str.to_decimal": [[589, "polars-expr-str-to-decimal"]], "polars.Expr.str.concat": [[551, "polars-expr-str-concat"]], "polars.Expr.round": [[534, "polars-expr-round"]], "polars.Expr.str.rjust": [[573, "polars-expr-str-rjust"]], "polars.Expr.shift_and_fill": [[539, "polars-expr-shift-and-fill"]], "polars.Expr.rolling_skew": [[530, "polars-expr-rolling-skew"]], "polars.Expr.str.extract_groups": [[561, "polars-expr-str-extract-groups"]], "polars.Expr.struct.field": [[595, "polars-expr-struct-field"]], "polars.Expr.suffix": [[598, "polars-expr-suffix"]], "polars.Expr.str.to_date": [[587, "polars-expr-str-to-date"]], "polars.Expr.std": [[550, "polars-expr-std"]], "polars.Expr.rolling_sum": [[532, "polars-expr-rolling-sum"]], "polars.Expr.str.zfill": [[594, "polars-expr-str-zfill"]], "polars.Expr.str.strip_prefix": [[584, "polars-expr-str-strip-prefix"]], "polars.Expr.str.starts_with": [[579, "polars-expr-str-starts-with"]], "polars.Expr.str.to_titlecase": [[592, "polars-expr-str-to-titlecase"]], "polars.Expr.rolling_std": [[531, "polars-expr-rolling-std"]], "polars.Expr.str.strip_chars": [[581, "polars-expr-str-strip-chars"]], "polars.Expr.str.extract_all": [[560, "polars-expr-str-extract-all"]], "polars.Expr.str.parse_int": [[570, "polars-expr-str-parse-int"]], "polars.Expr.str.slice": [[575, "polars-expr-str-slice"]], "polars.Expr.str.decode": [[555, "polars-expr-str-decode"]], "polars.Expr.sign": [[542, "polars-expr-sign"]], "polars.Expr.rolling_median": [[527, "polars-expr-rolling-median"]], "polars.Expr.str.to_datetime": [[588, "polars-expr-str-to-datetime"]], "polars.Expr.skew": [[545, "polars-expr-skew"]], "polars.Expr.str.replace": [[571, "polars-expr-str-replace"]], "polars.Expr.shrink_dtype": [[540, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_min": [[528, "polars-expr-rolling-min"]], "polars.Expr.sub": [[597, "polars-expr-sub"]], "polars.Expr.str.splitn": [[578, "polars-expr-str-splitn"]], "polars.Expr.str.to_lowercase": [[590, "polars-expr-str-to-lowercase"]], "polars.Expr.rolling_max": [[525, "polars-expr-rolling-max"]], "polars.Expr.set_sorted": [[537, "polars-expr-set-sorted"]], "polars.Expr.shift": [[538, "polars-expr-shift"]], "polars.Expr.str.to_time": [[591, "polars-expr-str-to-time"]], "polars.Expr.rolling_var": [[533, "polars-expr-rolling-var"]], "polars.Expr.str.n_chars": [[569, "polars-expr-str-n-chars"]], "polars.Expr.struct.rename_fields": [[596, "polars-expr-struct-rename-fields"]], "polars.Expr.str.strip_suffix": [[585, "polars-expr-str-strip-suffix"]], "polars.Expr.sin": [[543, "polars-expr-sin"]], "polars.Expr.str.len_chars": [[565, "polars-expr-str-len-chars"]], "polars.Expr.str.strip_chars_start": [[583, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.json_extract": [[562, "polars-expr-str-json-extract"]], "polars.Expr.rle_id": [[521, "polars-expr-rle-id"]], "polars.Expr.null_count": [[501, "polars-expr-null-count"]], "polars.Expr.lt": [[472, "polars-expr-lt"]], "polars.Expr.map": [[473, "polars-expr-map"]], "polars.Expr.meta.is_regex_projection": [[483, "polars-expr-meta-is-regex-projection"]], "polars.Expr.reverse": [[519, "polars-expr-reverse"]], "polars.Expr.radians": [[513, "polars-expr-radians"]], "polars.Expr.list.union": [[466, "polars-expr-list-union"]], "polars.Expr.list.max": [[450, "polars-expr-list-max"]], "polars.Expr.not_": [[500, "polars-expr-not"]], "polars.Expr.mod": [[492, "polars-expr-mod"]], "polars.Expr.map_alias": [[474, "polars-expr-map-alias"]], "polars.Expr.quantile": [[512, "polars-expr-quantile"]], "polars.Expr.mean": [[479, "polars-expr-mean"]], "polars.Expr.list.shift": [[458, "polars-expr-list-shift"]], "polars.Expr.pow": [[508, "polars-expr-pow"]], "polars.Expr.mul": [[494, "polars-expr-mul"]], "polars.Expr.product": [[510, "polars-expr-product"]], "polars.Expr.meta.pop": [[486, "polars-expr-meta-pop"]], "polars.Expr.map_dict": [[476, "polars-expr-map-dict"]], "polars.Expr.n_unique": [[495, "polars-expr-n-unique"]], "polars.Expr.ne": [[498, "polars-expr-ne"]], "polars.Expr.rle": [[520, "polars-expr-rle"]], "polars.Expr.list.set_union": [[457, "polars-expr-list-set-union"]], "polars.Expr.list.reverse": [[453, "polars-expr-list-reverse"]], "polars.Expr.median": [[480, "polars-expr-median"]], "polars.Expr.lower_bound": [[471, "polars-expr-lower-bound"]], "polars.Expr.min": [[491, "polars-expr-min"]], "polars.Expr.nan_min": [[497, "polars-expr-nan-min"]], "polars.Expr.meta.ne": [[484, "polars-expr-meta-ne"]], "polars.Expr.log10": [[469, "polars-expr-log10"]], "polars.Expr.ne_missing": [[499, "polars-expr-ne-missing"]], "polars.Expr.pipe": [[507, "polars-expr-pipe"]], "polars.Expr.rechunk": [[515, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[516, "polars-expr-reinterpret"]], "polars.Expr.list.min": [[452, "polars-expr-list-min"]], "polars.Expr.map_elements": [[477, "polars-expr-map-elements"]], "polars.Expr.meta.root_names": [[487, "polars-expr-meta-root-names"]], "polars.Expr.meta.write_json": [[490, "polars-expr-meta-write-json"]], "polars.Expr.pct_change": [[504, "polars-expr-pct-change"]], "polars.Expr.list.set_symmetric_difference": [[456, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.reshape": [[518, "polars-expr-reshape"]], "polars.Expr.meta.output_name": [[485, "polars-expr-meta-output-name"]], "polars.Expr.list.set_difference": [[454, "polars-expr-list-set-difference"]], "polars.Expr.meta.eq": [[481, "polars-expr-meta-eq"]], "polars.Expr.repeat_by": [[517, "polars-expr-repeat-by"]], "polars.Expr.list.sort": [[460, "polars-expr-list-sort"]], "polars.Expr.max": [[478, "polars-expr-max"]], "polars.Expr.peak_min": [[506, "polars-expr-peak-min"]], "polars.Expr.meta.undo_aliases": [[489, "polars-expr-meta-undo-aliases"]], "polars.Expr.qcut": [[511, "polars-expr-qcut"]], "polars.Expr.list.unique": [[467, "polars-expr-list-unique"]], "polars.Expr.list.mean": [[451, "polars-expr-list-mean"]], "polars.Expr.mode": [[493, "polars-expr-mode"]], "polars.Expr.list.symmetric_difference": [[462, "polars-expr-list-symmetric-difference"]], "polars.Expr.list.take": [[464, "polars-expr-list-take"]], "polars.Expr.meta.has_multiple_outputs": [[482, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.nan_max": [[496, "polars-expr-nan-max"]], "polars.Expr.list.tail": [[463, "polars-expr-list-tail"]], "polars.Expr.list.slice": [[459, "polars-expr-list-slice"]], "polars.Expr.or_": [[502, "polars-expr-or"]], "polars.Expr.peak_max": [[505, "polars-expr-peak-max"]], "polars.Expr.prefix": [[509, "polars-expr-prefix"]], "polars.Expr.rolling_map": [[524, "polars-expr-rolling-map"]], "polars.Expr.map_batches": [[475, "polars-expr-map-batches"]], "polars.Expr.rank": [[514, "polars-expr-rank"]], "polars.Expr.list.to_struct": [[465, "polars-expr-list-to-struct"]], "polars.Expr.meta.tree_format": [[488, "polars-expr-meta-tree-format"]], "polars.Expr.rolling_apply": [[523, "polars-expr-rolling-apply"]], "polars.Expr.log": [[468, "polars-expr-log"]], "polars.Expr.log1p": [[470, "polars-expr-log1p"]], "polars.Expr.rolling": [[522, "polars-expr-rolling"]], "polars.Expr.over": [[503, "polars-expr-over"]], "polars.Expr.list.sum": [[461, "polars-expr-list-sum"]], "polars.Expr.list.set_intersection": [[455, "polars-expr-list-set-intersection"]], "polars.LazyFrame.cache": [[711, "polars-lazyframe-cache"]], "polars.LazyFrame.fetch": [[724, "polars-lazyframe-fetch"]], "polars.time_range": [[681, "polars-time-range"]], "polars.std": [[675, "polars-std"]], "polars.sum_horizontal": [[678, "polars-sum-horizontal"]], "polars.struct": [[676, "polars-struct"]], "API reference": [[705, "api-reference"]], "polars.var": [[683, "polars-var"]], "polars.LazyFrame.bottom_k": [[710, "polars-lazyframe-bottom-k"]], "polars.time_ranges": [[682, "polars-time-ranges"]], "polars.LazyFrame.group_by": [[730, "polars-lazyframe-group-by"]], "polars.LazyFrame.join_asof": [[740, "polars-lazyframe-join-asof"]], "polars.LazyFrame.head": [[736, "polars-lazyframe-head"]], "polars.LazyFrame.lazy": [[742, "polars-lazyframe-lazy"]], "polars.LazyFrame.from_json": [[729, "polars-lazyframe-from-json"]], "polars.LazyFrame.inspect": [[737, "polars-lazyframe-inspect"]], "polars.LazyFrame.fill_nan": [[725, "polars-lazyframe-fill-nan"]], "Conversion": [[704, "conversion"]], "Parallelization": [[704, "parallelization"]], "Random": [[704, "random"]], "StringCache": [[704, "stringcache"]], "polars.LazyFrame.explain": [[722, "polars-lazyframe-explain"]], "polars.LazyFrame.map": [[744, "polars-lazyframe-map"]], "polars.col": [[690, "polars-col"]], "polars.LazyFrame.clear": [[713, "polars-lazyframe-clear"]], "polars.LazyFrame.group_by_rolling": [[732, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.approx_n_unique": [[708, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.groupby_dynamic": [[734, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.join": [[739, "polars-lazyframe-join"]], "polars.LazyFrame.map_batches": [[745, "polars-lazyframe-map-batches"]], "polars.LazyFrame.explode": [[723, "polars-lazyframe-explode"]], "polars.when": [[684, "polars-when"]], "polars.time": [[680, "polars-time"]], "Operators": [[699, "operators"]], "Conjunction": [[699, "conjunction"]], "Comparison": [[699, "comparison"]], "Numeric": [[699, "numeric"], [281, "numeric"]], "polars.LazyFrame.fill_null": [[726, "polars-lazyframe-fill-null"]], "polars.zeros": [[685, "polars-zeros"]], "polars.LazyFrame.groupby": [[733, "polars-lazyframe-groupby"]], "polars.LazyFrame.clone": [[714, "polars-lazyframe-clone"]], "polars.LazyFrame.max": [[746, "polars-lazyframe-max"]], "polars.LazyFrame.last": [[741, "polars-lazyframe-last"]], "polars.LazyFrame.collect_async": [[716, "polars-lazyframe-collect-async"]], "Columns / names": [[691, "columns-names"]], "polars.LazyFrame.approx_unique": [[709, "polars-lazyframe-approx-unique"]], "polars.LazyFrame.first": [[728, "polars-lazyframe-first"]], "polars.LazyFrame.deserialize": [[718, "polars-lazyframe-deserialize"]], "polars.LazyFrame.interpolate": [[738, "polars-lazyframe-interpolate"]], "polars.LazyFrame.group_by_dynamic": [[731, "polars-lazyframe-group-by-dynamic"]], "polars.tail": [[679, "polars-tail"]], "polars.LazyFrame.columns": [[717, "polars-lazyframe-columns"]], "polars.LazyFrame.drop_nulls": [[720, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.melt": [[749, "polars-lazyframe-melt"]], "polars.LazyFrame.cast": [[712, "polars-lazyframe-cast"]], "polars.sum": [[677, "polars-sum"]], "polars.LazyFrame.mean": [[747, "polars-lazyframe-mean"]], "Input/output": [[706, "input-output"]], "CSV": [[706, "csv"]], "Feather/ IPC": [[706, "feather-ipc"]], "Parquet": [[706, "parquet"]], "Database": [[706, "database"]], "JSON": [[706, "json"]], "AVRO": [[706, "avro"]], "Spreadsheet": [[706, "spreadsheet"]], "Apache Iceberg": [[706, "apache-iceberg"]], "Delta Lake": [[706, "delta-lake"]], "Datasets": [[706, "datasets"]], "BatchedCsvReader": [[706, "batchedcsvreader"]], "polars.LazyFrame.collect": [[715, "polars-lazyframe-collect"]], "polars.LazyFrame.filter": [[727, "polars-lazyframe-filter"]], "Window": [[703, "window"]], "Expressions": [[694, "expressions"]], "polars.LazyFrame.limit": [[743, "polars-lazyframe-limit"]], "polars.LazyFrame.median": [[748, "polars-lazyframe-median"]], "polars.LazyFrame.drop": [[719, "polars-lazyframe-drop"]], "polars.LazyFrame.groupby_rolling": [[735, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.dtypes": [[721, "polars-lazyframe-dtypes"]], "Meta": [[696, "meta"]], "polars.Expr.is_between": [[408, "polars-expr-is-between"]], "polars.Expr.list.drop_nulls": [[439, "polars-expr-list-drop-nulls"]], "polars.Expr.dt.year": [[381, "polars-expr-dt-year"]], "polars.Expr.inspect": [[406, "polars-expr-inspect"]], "polars.Expr.hash": [[403, "polars-expr-hash"]], "polars.Expr.is_unique": [[422, "polars-expr-is-unique"]], "polars.Expr.ewm_mean": [[385, "polars-expr-ewm-mean"]], "polars.Expr.flatten": [[396, "polars-expr-flatten"]], "polars.Expr.list.arg_max": [[431, "polars-expr-list-arg-max"]], "polars.Expr.first": [[395, "polars-expr-first"]], "polars.Expr.list.difference": [[438, "polars-expr-list-difference"]], "polars.Expr.dt.timestamp": [[375, "polars-expr-dt-timestamp"]], "polars.Expr.filter": [[394, "polars-expr-filter"]], "polars.Expr.head": [[404, "polars-expr-head"]], "polars.Expr.is_first_distinct": [[412, "polars-expr-is-first-distinct"]], "polars.Expr.last": [[425, "polars-expr-last"]], "polars.Expr.list.all": [[429, "polars-expr-list-all"]], "polars.Expr.ewm_std": [[386, "polars-expr-ewm-std"]], "polars.Expr.fill_null": [[393, "polars-expr-fill-null"]], "polars.Expr.interpolate": [[407, "polars-expr-interpolate"]], "polars.Expr.list.eval": [[440, "polars-expr-list-eval"]], "polars.Expr.list.count_matches": [[436, "polars-expr-list-count-matches"]], "polars.Expr.eq": [[383, "polars-expr-eq"]], "polars.Expr.le": [[426, "polars-expr-le"]], "polars.Expr.list.intersection": [[445, "polars-expr-list-intersection"]], "polars.Expr.dt.with_time_unit": [[380, "polars-expr-dt-with-time-unit"]], "polars.Expr.list.last": [[447, "polars-expr-list-last"]], "polars.Expr.dt.truncate": [[377, "polars-expr-dt-truncate"]], "polars.Expr.list.len": [[448, "polars-expr-list-len"]], "polars.Expr.ewm_var": [[387, "polars-expr-ewm-var"]], "polars.Expr.is_last_distinct": [[416, "polars-expr-is-last-distinct"]], "polars.Expr.list.head": [[444, "polars-expr-list-head"]], "polars.Expr.from_json": [[400, "polars-expr-from-json"]], "polars.Expr.list.get": [[443, "polars-expr-list-get"]], "polars.Expr.kurtosis": [[424, "polars-expr-kurtosis"]], "polars.Expr.entropy": [[382, "polars-expr-entropy"]], "polars.Expr.dt.to_string": [[376, "polars-expr-dt-to-string"]], "polars.Expr.is_not_null": [[420, "polars-expr-is-not-null"]], "polars.Expr.floordiv": [[398, "polars-expr-floordiv"]], "polars.Expr.is_duplicated": [[409, "polars-expr-is-duplicated"]], "polars.Expr.is_null": [[421, "polars-expr-is-null"]], "polars.Expr.fill_nan": [[392, "polars-expr-fill-nan"]], "polars.Expr.gt": [[402, "polars-expr-gt"]], "polars.Expr.implode": [[405, "polars-expr-implode"]], "polars.Expr.forward_fill": [[399, "polars-expr-forward-fill"]], "polars.Expr.is_finite": [[410, "polars-expr-is-finite"]], "polars.Expr.exclude": [[388, "polars-expr-exclude"]], "polars.Expr.dt.weekday": [[379, "polars-expr-dt-weekday"]], "polars.Expr.is_infinite": [[414, "polars-expr-is-infinite"]], "polars.Expr.explode": [[390, "polars-expr-explode"]], "polars.Expr.list.contains": [[434, "polars-expr-list-contains"]], "polars.Expr.list.explode": [[441, "polars-expr-list-explode"]], "polars.Expr.list.diff": [[437, "polars-expr-list-diff"]], "polars.Expr.list.lengths": [[449, "polars-expr-list-lengths"]], "polars.Expr.eq_missing": [[384, "polars-expr-eq-missing"]], "polars.Expr.list.arg_min": [[432, "polars-expr-list-arg-min"]], "polars.Expr.is_not": [[418, "polars-expr-is-not"]], "polars.Expr.list.count_match": [[435, "polars-expr-list-count-match"]], "polars.Expr.is_first": [[411, "polars-expr-is-first"]], "polars.Expr.is_nan": [[417, "polars-expr-is-nan"]], "polars.Expr.len": [[427, "polars-expr-len"]], "polars.Expr.ge": [[401, "polars-expr-ge"]], "polars.Expr.list.first": [[442, "polars-expr-list-first"]], "polars.Expr.list.join": [[446, "polars-expr-list-join"]], "polars.Expr.list.any": [[430, "polars-expr-list-any"]], "polars.Expr.is_in": [[413, "polars-expr-is-in"]], "polars.Expr.is_not_nan": [[419, "polars-expr-is-not-nan"]], "polars.Expr.limit": [[428, "polars-expr-limit"]], "polars.Expr.exp": [[389, "polars-expr-exp"]], "polars.Expr.floor": [[397, "polars-expr-floor"]], "polars.Expr.keep_name": [[423, "polars-expr-keep-name"]], "polars.Expr.list.concat": [[433, "polars-expr-list-concat"]], "polars.Expr.dt.week": [[378, "polars-expr-dt-week"]], "polars.Expr.extend_constant": [[391, "polars-expr-extend-constant"]], "polars.Expr.is_last": [[415, "polars-expr-is-last"]], "polars.Expr.cbrt": [[320, "polars-expr-cbrt"]], "polars.Expr.dt.round": [[370, "polars-expr-dt-round"]], "polars.Expr.cumsum": [[333, "polars-expr-cumsum"]], "polars.Expr.dt.month_start": [[363, "polars-expr-dt-month-start"]], "polars.Expr.arr.max": [[305, "polars-expr-arr-max"]], "polars.Expr.cut": [[335, "polars-expr-cut"]], "polars.Expr.dt.base_utc_offset": [[341, "polars-expr-dt-base-utc-offset"]], "polars.Expr.diff": [[337, "polars-expr-diff"]], "polars.Expr.degrees": [[336, "polars-expr-degrees"]], "polars.Expr.dt.minute": [[359, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[361, "polars-expr-dt-month"]], "polars.Expr.bin.encode": [[312, "polars-expr-bin-encode"]], "polars.Expr.arg_unique": [[304, "polars-expr-arg-unique"]], "polars.Expr.drop_nans": [[339, "polars-expr-drop-nans"]], "polars.Expr.clip_min": [[324, "polars-expr-clip-min"]], "polars.Expr.cat.get_categories": [[318, "polars-expr-cat-get-categories"]], "polars.Expr.cumprod": [[332, "polars-expr-cumprod"]], "polars.Expr.drop_nulls": [[340, "polars-expr-drop-nulls"]], "polars.Expr.dt.combine": [[343, "polars-expr-dt-combine"]], "polars.Expr.cast": [[317, "polars-expr-cast"]], "polars.Expr.dt.hours": [[352, "polars-expr-dt-hours"]], "polars.Expr.dt.seconds": [[372, "polars-expr-dt-seconds"]], "polars.Expr.cumulative_eval": [[334, "polars-expr-cumulative-eval"]], "polars.Expr.cummin": [[331, "polars-expr-cummin"]], "polars.Expr.dt.strftime": [[373, "polars-expr-dt-strftime"]], "polars.Expr.bottom_k": [[315, "polars-expr-bottom-k"]], "polars.Expr.arg_sort": [[302, "polars-expr-arg-sort"]], "polars.Expr.cosh": [[326, "polars-expr-cosh"]], "polars.Expr.cummax": [[330, "polars-expr-cummax"]], "polars.Expr.dt.is_leap_year": [[353, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.nanosecond": [[364, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.nanoseconds": [[365, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.offset_by": [[366, "polars-expr-dt-offset-by"]], "polars.Expr.arg_true": [[303, "polars-expr-arg-true"]], "polars.Expr.arr.min": [[306, "polars-expr-arr-min"]], "polars.Expr.cat.set_ordering": [[319, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.day": [[347, "polars-expr-dt-day"]], "polars.Expr.dt.microsecond": [[355, "polars-expr-dt-microsecond"]], "polars.Expr.dt.microseconds": [[356, "polars-expr-dt-microseconds"]], "polars.Expr.dt.time": [[374, "polars-expr-dt-time"]], "polars.Expr.dt.millisecond": [[357, "polars-expr-dt-millisecond"]], "polars.Expr.dot": [[338, "polars-expr-dot"]], "polars.Expr.dt.milliseconds": [[358, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.days": [[348, "polars-expr-dt-days"]], "polars.Expr.bin.contains": [[310, "polars-expr-bin-contains"]], "polars.Expr.ceil": [[321, "polars-expr-ceil"]], "polars.Expr.dt.date": [[345, "polars-expr-dt-date"]], "polars.Expr.arr.unique": [[308, "polars-expr-arr-unique"]], "polars.Expr.bin.starts_with": [[314, "polars-expr-bin-starts-with"]], "polars.Expr.cos": [[325, "polars-expr-cos"]], "polars.Expr.clip": [[322, "polars-expr-clip"]], "polars.Expr.cumcount": [[329, "polars-expr-cumcount"]], "polars.Expr.dt.datetime": [[346, "polars-expr-dt-datetime"]], "polars.Expr.bin.decode": [[311, "polars-expr-bin-decode"]], "polars.Expr.dt.hour": [[351, "polars-expr-dt-hour"]], "polars.Expr.dt.second": [[371, "polars-expr-dt-second"]], "polars.Expr.cache": [[316, "polars-expr-cache"]], "polars.Expr.dt.quarter": [[368, "polars-expr-dt-quarter"]], "polars.Expr.count": [[328, "polars-expr-count"]], "polars.Expr.arg_min": [[301, "polars-expr-arg-min"]], "polars.Expr.dt.cast_time_unit": [[342, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.iso_year": [[354, "polars-expr-dt-iso-year"]], "polars.Expr.dt.epoch": [[350, "polars-expr-dt-epoch"]], "polars.Expr.clip_max": [[323, "polars-expr-clip-max"]], "polars.Expr.dt.convert_time_zone": [[344, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.minutes": [[360, "polars-expr-dt-minutes"]], "polars.Expr.dt.month_end": [[362, "polars-expr-dt-month-end"]], "polars.Expr.dt.ordinal_day": [[367, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.replace_time_zone": [[369, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.dst_offset": [[349, "polars-expr-dt-dst-offset"]], "polars.Expr.arr.sum": [[307, "polars-expr-arr-sum"]], "polars.Expr.bin.ends_with": [[313, "polars-expr-bin-ends-with"]], "polars.Expr.backward_fill": [[309, "polars-expr-backward-fill"]], "polars.Expr.arg_max": [[300, "polars-expr-arg-max"]], "polars.Expr.cot": [[327, "polars-expr-cot"]], "polars.DataFrame.mean": [[197, "polars-dataframe-mean"]], "polars.DataFrame.quantile": [[209, "polars-dataframe-quantile"]], "polars.DataFrame.estimated_size": [[160, "polars-dataframe-estimated-size"]], "polars.DataFrame.fill_null": [[164, "polars-dataframe-fill-null"]], "polars.DataFrame.cast": [[150, "polars-dataframe-cast"]], "polars.DataFrame.median": [[198, "polars-dataframe-median"]], "polars.DataFrame.partition_by": [[205, "polars-dataframe-partition-by"]], "polars.DataFrame.reverse": [[214, "polars-dataframe-reverse"]], "polars.DataFrame.shape": [[224, "polars-dataframe-shape"]], "polars.DataFrame.is_empty": [[186, "polars-dataframe-is-empty"]], "polars.DataFrame.group_by": [[173, "polars-dataframe-group-by"]], "polars.DataFrame.hash_rows": [[179, "polars-dataframe-hash-rows"]], "polars.DataFrame.map_rows": [[195, "polars-dataframe-map-rows"]], "polars.DataFrame.join": [[191, "polars-dataframe-join"]], "polars.DataFrame.rechunk": [[210, "polars-dataframe-rechunk"]], "polars.DataFrame.set_sorted": [[223, "polars-dataframe-set-sorted"]], "polars.DataFrame.is_duplicated": [[185, "polars-dataframe-is-duplicated"]], "polars.DataFrame.head": [[180, "polars-dataframe-head"]], "polars.DataFrame.melt": [[199, "polars-dataframe-melt"]], "polars.DataFrame.interpolate": [[184, "polars-dataframe-interpolate"]], "polars.DataFrame.drop_nulls": [[158, "polars-dataframe-drop-nulls"]], "polars.DataFrame.find_idx_by_name": [[166, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.flags": [[167, "polars-dataframe-flags"]], "polars.DataFrame.rename": [[211, "polars-dataframe-rename"]], "polars.DataFrame.frame_equal": [[169, "polars-dataframe-frame-equal"]], "polars.DataFrame.clone": [[152, "polars-dataframe-clone"]], "polars.DataFrame.limit": [[194, "polars-dataframe-limit"]], "polars.DataFrame.drop": [[156, "polars-dataframe-drop"]], "polars.DataFrame.null_count": [[204, "polars-dataframe-null-count"]], "polars.DataFrame.sample": [[219, "polars-dataframe-sample"]], "polars.DataFrame.groupby_dynamic": [[177, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.row": [[216, "polars-dataframe-row"]], "polars.DataFrame.corr": [[154, "polars-dataframe-corr"]], "polars.DataFrame.height": [[181, "polars-dataframe-height"]], "polars.DataFrame.group_by_rolling": [[175, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.clear": [[151, "polars-dataframe-clear"]], "polars.DataFrame.iter_rows": [[189, "polars-dataframe-iter-rows"]], "polars.DataFrame.schema": [[220, "polars-dataframe-schema"]], "polars.DataFrame.group_by_dynamic": [[174, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.glimpse": [[172, "polars-dataframe-glimpse"]], "polars.DataFrame.columns": [[153, "polars-dataframe-columns"]], "polars.DataFrame.hstack": [[182, "polars-dataframe-hstack"]], "polars.DataFrame.filter": [[165, "polars-dataframe-filter"]], "polars.DataFrame.pipe": [[206, "polars-dataframe-pipe"]], "polars.DataFrame.dtypes": [[159, "polars-dataframe-dtypes"]], "polars.DataFrame.groupby": [[176, "polars-dataframe-groupby"]], "polars.DataFrame.item": [[188, "polars-dataframe-item"]], "polars.DataFrame.groupby_rolling": [[178, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.min": [[201, "polars-dataframe-min"]], "polars.DataFrame.select": [[221, "polars-dataframe-select"]], "polars.DataFrame.fill_nan": [[163, "polars-dataframe-fill-nan"]], "polars.DataFrame.describe": [[155, "polars-dataframe-describe"]], "polars.DataFrame.lazy": [[193, "polars-dataframe-lazy"]], "polars.DataFrame.rolling": [[215, "polars-dataframe-rolling"]], "polars.DataFrame.fold": [[168, "polars-dataframe-fold"]], "polars.DataFrame.join_asof": [[192, "polars-dataframe-join-asof"]], "polars.DataFrame.merge_sorted": [[200, "polars-dataframe-merge-sorted"]], "polars.DataFrame.replace_at_idx": [[213, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.rows_by_key": [[218, "polars-dataframe-rows-by-key"]], "polars.DataFrame.get_columns": [[171, "polars-dataframe-get-columns"]], "polars.DataFrame.iter_slices": [[190, "polars-dataframe-iter-slices"]], "polars.DataFrame.drop_in_place": [[157, "polars-dataframe-drop-in-place"]], "polars.DataFrame.replace": [[212, "polars-dataframe-replace"]], "polars.DataFrame.select_seq": [[222, "polars-dataframe-select-seq"]], "polars.DataFrame.get_column": [[170, "polars-dataframe-get-column"]], "polars.DataFrame.is_unique": [[187, "polars-dataframe-is-unique"]], "polars.DataFrame.max": [[196, "polars-dataframe-max"]], "polars.DataFrame.n_chunks": [[202, "polars-dataframe-n-chunks"]], "polars.DataFrame.explode": [[161, "polars-dataframe-explode"]], "polars.DataFrame.pivot": [[207, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[208, "polars-dataframe-product"]], "polars.DataFrame.n_unique": [[203, "polars-dataframe-n-unique"]], "polars.DataFrame.rows": [[217, "polars-dataframe-rows"]], "polars.DataFrame.extend": [[162, "polars-dataframe-extend"]], "polars.DataFrame.insert_at_idx": [[183, "polars-dataframe-insert-at-idx"]], "polars.Expr.approx_n_unique": [[293, "polars-expr-approx-n-unique"]], "polars.DataFrame.to_arrow": [[234, "polars-dataframe-to-arrow"]], "polars.DataFrame.upsample": [[249, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[250, "polars-dataframe-var"]], "polars.DataFrame.sum": [[231, "polars-dataframe-sum"]], "polars.Expr.alias": [[287, "polars-expr-alias"]], "polars.Expr.arccos": [[294, "polars-expr-arccos"]], "polars.DataFrame.to_pandas": [[240, "polars-dataframe-to-pandas"]], "polars.dataframe.group_by.GroupBy.first": [[261, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.agg": [[257, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.last": [[263, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.map_groups": [[264, "polars-dataframe-group-by-groupby-map-groups"]], "polars.DataFrame.tail": [[232, "polars-dataframe-tail"]], "polars.DataFrame.unstack": [[247, "polars-dataframe-unstack"]], "polars.dataframe.group_by.GroupBy.tail": [[272, "polars-dataframe-group-by-groupby-tail"]], "polars.DataFrame.unique": [[245, "polars-dataframe-unique"]], "polars.DataFrame.shift_and_fill": [[226, "polars-dataframe-shift-and-fill"]], "polars.dataframe.group_by.GroupBy.apply": [[259, "polars-dataframe-group-by-groupby-apply"]], "polars.dataframe.group_by.GroupBy.sum": [[271, "polars-dataframe-group-by-groupby-sum"]], "polars.DataFrame.with_row_count": [[255, "polars-dataframe-with-row-count"]], "polars.dataframe.group_by.GroupBy.all": [[258, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.arctan": [[298, "polars-expr-arctan"]], "polars.DataFrame.transpose": [[244, "polars-dataframe-transpose"]], "DataFrame": [[278, "dataframe"]], "polars.DataFrame.to_init_repr": [[238, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_dict": [[235, "polars-dataframe-to-dict"]], "Data types": [[281, "data-types"]], "Nested": [[281, "nested"]], "Other": [[281, "other"]], "polars.Expr.any": [[290, "polars-expr-any"]], "polars.dataframe.group_by.GroupBy.mean": [[266, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.n_unique": [[269, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.append": [[291, "polars-expr-append"]], "polars.DataFrame.shift": [[225, "polars-dataframe-shift"]], "polars.DataFrame.to_dummies": [[237, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_series": [[241, "polars-dataframe-to-series"]], "polars.dataframe.group_by.GroupBy.min": [[268, "polars-dataframe-group-by-groupby-min"]], "polars.DataFrame.with_columns": [[253, "polars-dataframe-with-columns"]], "polars.DataFrame.shrink_to_fit": [[227, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.unnest": [[246, "polars-dataframe-unnest"]], "polars.Expr.arcsin": [[296, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[297, "polars-expr-arcsinh"]], "polars.Expr.agg_groups": [[286, "polars-expr-agg-groups"]], "polars.DataFrame.vstack": [[251, "polars-dataframe-vstack"]], "polars.Expr.and_": [[289, "polars-expr-and"]], "polars.Expr.all": [[288, "polars-expr-all"]], "polars.dataframe.group_by.GroupBy.max": [[265, "polars-dataframe-group-by-groupby-max"]], "polars.DataFrame.width": [[252, "polars-dataframe-width"]], "polars.Expr.apply": [[292, "polars-expr-apply"]], "Exceptions": [[282, "exceptions"]], "polars.dataframe.group_by.GroupBy.__iter__": [[256, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.to_dicts": [[236, "polars-dataframe-to-dicts"]], "polars.Expr.arccosh": [[295, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.count": [[260, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.arctanh": [[299, "polars-expr-arctanh"]], "polars.DataFrame.update": [[248, "polars-dataframe-update"]], "polars.DataFrame.top_k": [[243, "polars-dataframe-top-k"]], "polars.DataFrame.with_columns_seq": [[254, "polars-dataframe-with-columns-seq"]], "polars.dataframe.group_by.GroupBy.head": [[262, "polars-dataframe-group-by-groupby-head"]], "polars.DataFrame.take_every": [[233, "polars-dataframe-take-every"]], "polars.DataFrame.sort": [[229, "polars-dataframe-sort"]], "polars.DataFrame.slice": [[228, "polars-dataframe-slice"]], "polars.dataframe.group_by.GroupBy.median": [[267, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.abs": [[284, "polars-expr-abs"]], "polars.dataframe.group_by.GroupBy.quantile": [[270, "polars-dataframe-group-by-groupby-quantile"]], "polars.DataFrame.to_struct": [[242, "polars-dataframe-to-struct"]], "polars.DataFrame.to_numpy": [[239, "polars-dataframe-to-numpy"]], "polars.DataFrame.std": [[230, "polars-dataframe-std"]], "polars.Expr.add": [[285, "polars-expr-add"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[13, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[14, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[27, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[28, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[29, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[30, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[31, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[32, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[33, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[34, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[35, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[36, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[37, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[38, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[39, "polars.DataType"]], "__init__() (polars.datatype method)": [[39, "polars.DataType.__init__"]], "date (class in polars)": [[40, "polars.Date"]], "__init__() (polars.date method)": [[40, "polars.Date.__init__"]], "datetime (class in polars)": [[41, "polars.Datetime"]], "__init__() (polars.datetime method)": [[41, "polars.Datetime.__init__"]], "decimal (class in polars)": [[42, "polars.Decimal"]], "__init__() (polars.decimal method)": [[42, "polars.Decimal.__init__"]], "duration (class in polars)": [[43, "polars.Duration"]], "__init__() (polars.duration method)": [[43, "polars.Duration.__init__"]], "float32 (class in polars)": [[44, "polars.Float32"]], "__init__() (polars.float32 method)": [[44, "polars.Float32.__init__"]], "float64 (class in polars)": [[45, "polars.Float64"]], "__init__() (polars.float64 method)": [[45, "polars.Float64.__init__"]], "int16 (class in polars)": [[46, "polars.Int16"]], "__init__() (polars.int16 method)": [[46, "polars.Int16.__init__"]], "int32 (class in polars)": [[47, "polars.Int32"]], "__init__() (polars.int32 method)": [[47, "polars.Int32.__init__"]], "int64 (class in polars)": [[48, "polars.Int64"]], "__init__() (polars.int64 method)": [[48, "polars.Int64.__init__"]], "int8 (class in polars)": [[49, "polars.Int8"]], "__init__() (polars.int8 method)": [[49, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[53, "polars.List"]], "__init__() (polars.list method)": [[53, "polars.List.__init__"]], "null (class in polars)": [[54, "polars.Null"]], "__init__() (polars.null method)": [[54, "polars.Null.__init__"]], "object (class in polars)": [[55, "polars.Object"]], "__init__() (polars.object method)": [[55, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[56, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[57, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[58, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[59, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[60, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[61, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[62, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[62, "polars.StringCache.__init__"]], "struct (class in polars)": [[63, "polars.Struct"]], "__init__() (polars.struct method)": [[63, "polars.Struct.__init__"]], "time (class in polars)": [[64, "polars.Time"]], "__init__() (polars.time method)": [[64, "polars.Time.__init__"]], "uint16 (class in polars)": [[65, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[65, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[66, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[66, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[67, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[67, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[68, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[68, "polars.UInt8.__init__"]], "unknown (class in polars)": [[69, "polars.Unknown"]], "__init__() (polars.unknown method)": [[69, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[70, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[70, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[71, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[72, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[73, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[74, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[75, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[76, "polars.build_info"]], "collect_all() (in module polars)": [[77, "polars.collect_all"]], "collect_all_async() (in module polars)": [[78, "polars.collect_all_async"]], "concat() (in module polars)": [[79, "polars.concat"]], "disable_string_cache() (in module polars)": [[80, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[81, "polars.enable_string_cache"]], "arrowerror": [[82, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[83, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[84, "polars.exceptions.ComputeError"]], "duplicateerror": [[85, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[86, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[87, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[88, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[89, "polars.exceptions.PolarsPanicError"]], "rowserror": [[90, "polars.exceptions.RowsError"]], "schemaerror": [[91, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[92, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[93, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[94, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[95, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[96, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[97, "polars.from_dataframe"]], "from_dict() (in module polars)": [[98, "polars.from_dict"]], "from_dicts() (in module polars)": [[99, "polars.from_dicts"]], "from_numpy() (in module polars)": [[100, "polars.from_numpy"]], "from_pandas() (in module polars)": [[101, "polars.from_pandas"]], "from_records() (in module polars)": [[102, "polars.from_records"]], "from_repr() (in module polars)": [[103, "polars.from_repr"]], "get_index_type() (in module polars)": [[104, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[105, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[106, "polars.read_avro"]], "read_csv() (in module polars)": [[107, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[108, "polars.read_csv_batched"]], "read_database() (in module polars)": [[109, "polars.read_database"]], "read_database_uri() (in module polars)": [[110, "polars.read_database_uri"]], "read_delta() (in module polars)": [[111, "polars.read_delta"]], "read_excel() (in module polars)": [[112, "polars.read_excel"]], "read_ipc() (in module polars)": [[113, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[114, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[115, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[116, "polars.read_json"]], "read_ndjson() (in module polars)": [[117, "polars.read_ndjson"]], "read_ods() (in module polars)": [[118, "polars.read_ods"]], "read_parquet() (in module polars)": [[119, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[120, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[121, "polars.scan_csv"]], "scan_delta() (in module polars)": [[122, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[123, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[124, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[125, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[126, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[127, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[128, "polars.set_random_seed"]], "show_versions() (in module polars)": [[129, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[130, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[131, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[132, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[133, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[134, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[134, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[135, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[136, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[137, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[138, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[139, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[140, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[141, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[142, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[145, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[146, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[147, "polars.DataFrame.approx_n_unique"]], "approx_unique() (polars.dataframe method)": [[148, "polars.DataFrame.approx_unique"]], "bottom_k() (polars.dataframe method)": [[149, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[150, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[151, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[152, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[153, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[154, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[155, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[156, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[157, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[158, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[159, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[160, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[161, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[162, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[163, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[164, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[165, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[166, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[167, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[168, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[169, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[170, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[171, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[172, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[173, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[174, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[175, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[176, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[177, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[178, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[179, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[180, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[181, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[182, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[183, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[184, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[185, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[186, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[187, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[188, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[189, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[190, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[191, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[192, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[193, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[194, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[195, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[196, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[197, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[198, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[199, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[200, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[201, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[202, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[203, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[204, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[205, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[206, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[207, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[208, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[209, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[210, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[211, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[212, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[213, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[214, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[215, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[216, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[217, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[218, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[219, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[220, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[221, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[222, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[223, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[224, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[225, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[226, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[227, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[228, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[229, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[230, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[231, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[232, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[233, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[234, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[235, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[236, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[237, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[238, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[239, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[240, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[241, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[242, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[243, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[244, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[245, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[246, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[247, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[248, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[249, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[250, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[251, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[252, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[253, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[254, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[255, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[256, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[257, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[258, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[259, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[260, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[261, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[262, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[263, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[264, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[265, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[266, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[267, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[268, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[269, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[270, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[271, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[272, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[284, "polars.Expr.abs"]], "add() (polars.expr method)": [[285, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[286, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[287, "polars.Expr.alias"]], "all() (polars.expr method)": [[288, "polars.Expr.all"]], "and_() (polars.expr method)": [[289, "polars.Expr.and_"]], "any() (polars.expr method)": [[290, "polars.Expr.any"]], "append() (polars.expr method)": [[291, "polars.Expr.append"]], "apply() (polars.expr method)": [[292, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[293, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[294, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[295, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[296, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[297, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[298, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[299, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[300, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[301, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[302, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[303, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[304, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[305, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[306, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[307, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[308, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[309, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[310, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[311, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[312, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[313, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[314, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[315, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[316, "polars.Expr.cache"]], "cast() (polars.expr method)": [[317, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[318, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[319, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[320, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[321, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[322, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[323, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[324, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[325, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[326, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[327, "polars.Expr.cot"]], "count() (polars.expr method)": [[328, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[329, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[330, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[331, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[332, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[333, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[334, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[335, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[336, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[337, "polars.Expr.diff"]], "dot() (polars.expr method)": [[338, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[339, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[340, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[341, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[342, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[343, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[344, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[345, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[346, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[347, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[348, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[349, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[350, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[351, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[352, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[353, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[354, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[355, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[356, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[357, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[358, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[359, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[360, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[361, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[362, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[363, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[364, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[365, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[366, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[367, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[368, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[369, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[370, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[371, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[372, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[373, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[374, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[375, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[376, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[377, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[378, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[379, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[380, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[381, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[382, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[383, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[384, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[385, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[386, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[387, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[388, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[389, "polars.Expr.exp"]], "explode() (polars.expr method)": [[390, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[391, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[392, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[393, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[394, "polars.Expr.filter"]], "first() (polars.expr method)": [[395, "polars.Expr.first"]], "flatten() (polars.expr method)": [[396, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[397, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[398, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[399, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[400, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[401, "polars.Expr.ge"]], "gt() (polars.expr method)": [[402, "polars.Expr.gt"]], "hash() (polars.expr method)": [[403, "polars.Expr.hash"]], "head() (polars.expr method)": [[404, "polars.Expr.head"]], "implode() (polars.expr method)": [[405, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[406, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[407, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[408, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[409, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[410, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[411, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[412, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[413, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[414, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[415, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[416, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[417, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[418, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[419, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[420, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[421, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[422, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[423, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[424, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[425, "polars.Expr.last"]], "le() (polars.expr method)": [[426, "polars.Expr.le"]], "len() (polars.expr method)": [[427, "polars.Expr.len"]], "limit() (polars.expr method)": [[428, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[429, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[430, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[431, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[432, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[433, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[434, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[435, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[436, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[437, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[438, "polars.Expr.list.difference"]], "drop_nulls() (polars.expr.list method)": [[439, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[440, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[441, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[442, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[443, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[444, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[445, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[446, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[447, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[448, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[449, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[450, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[451, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[452, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[453, "polars.Expr.list.reverse"]], "set_difference() (polars.expr.list method)": [[454, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[455, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[456, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[457, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[458, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[459, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[460, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[461, "polars.Expr.list.sum"]], "symmetric_difference() (polars.expr.list method)": [[462, "polars.Expr.list.symmetric_difference"]], "tail() (polars.expr.list method)": [[463, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[464, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[465, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[466, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[467, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[468, "polars.Expr.log"]], "log10() (polars.expr method)": [[469, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[470, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[471, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[472, "polars.Expr.lt"]], "map() (polars.expr method)": [[473, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[474, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[475, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[476, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[477, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[478, "polars.Expr.max"]], "mean() (polars.expr method)": [[479, "polars.Expr.mean"]], "median() (polars.expr method)": [[480, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[481, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[482, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[483, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[484, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[485, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[486, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[487, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[488, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[489, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[490, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[491, "polars.Expr.min"]], "mod() (polars.expr method)": [[492, "polars.Expr.mod"]], "mode() (polars.expr method)": [[493, "polars.Expr.mode"]], "mul() (polars.expr method)": [[494, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[495, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[496, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[497, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[498, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[499, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[500, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[501, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[502, "polars.Expr.or_"]], "over() (polars.expr method)": [[503, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[504, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[505, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[506, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[507, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[508, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[509, "polars.Expr.prefix"]], "product() (polars.expr method)": [[510, "polars.Expr.product"]], "qcut() (polars.expr method)": [[511, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[512, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[513, "polars.Expr.radians"]], "rank() (polars.expr method)": [[514, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[515, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[516, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[517, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[518, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[519, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[520, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[521, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[522, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[523, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[524, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[525, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[526, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[527, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[528, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[529, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[530, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[531, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[532, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[533, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[534, "polars.Expr.round"]], "sample() (polars.expr method)": [[535, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[536, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[537, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[538, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[539, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[540, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[541, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[542, "polars.Expr.sign"]], "sin() (polars.expr method)": [[543, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[544, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[545, "polars.Expr.skew"]], "slice() (polars.expr method)": [[546, "polars.Expr.slice"]], "sort() (polars.expr method)": [[547, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[548, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[549, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[550, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[551, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[552, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[553, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[554, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[555, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[556, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[557, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[558, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[559, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[560, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[561, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[562, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[563, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[564, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[565, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[566, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[567, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[568, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[569, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[570, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[571, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[572, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[573, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[574, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[575, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[576, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[577, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[578, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[579, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[580, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[581, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[582, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[583, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[584, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[585, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[586, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[587, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[588, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[589, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[590, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[591, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[592, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[593, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[594, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[595, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[596, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[597, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[598, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[599, "polars.Expr.sum"]], "tail() (polars.expr method)": [[600, "polars.Expr.tail"]], "take() (polars.expr method)": [[601, "polars.Expr.take"]], "take_every() (polars.expr method)": [[602, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[603, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[604, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[605, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[606, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[607, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[608, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[609, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[610, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[611, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[612, "polars.Expr.var"]], "where() (polars.expr method)": [[613, "polars.Expr.where"]], "xor() (polars.expr method)": [[614, "polars.Expr.xor"]], "all() (in module polars)": [[615, "polars.all"]], "all_horizontal() (in module polars)": [[616, "polars.all_horizontal"]], "any() (in module polars)": [[617, "polars.any"]], "any_horizontal() (in module polars)": [[618, "polars.any_horizontal"]], "apply() (in module polars)": [[619, "polars.apply"]], "approx_n_unique() (in module polars)": [[620, "polars.approx_n_unique"]], "arange() (in module polars)": [[621, "polars.arange"]], "arctan2() (in module polars)": [[622, "polars.arctan2"]], "arctan2d() (in module polars)": [[623, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[624, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[625, "polars.arg_where"]], "avg() (in module polars)": [[626, "polars.avg"]], "coalesce() (in module polars)": [[627, "polars.coalesce"]], "concat_list() (in module polars)": [[628, "polars.concat_list"]], "concat_str() (in module polars)": [[629, "polars.concat_str"]], "corr() (in module polars)": [[630, "polars.corr"]], "count() (in module polars)": [[631, "polars.count"]], "cov() (in module polars)": [[632, "polars.cov"]], "cumfold() (in module polars)": [[633, "polars.cumfold"]], "cumreduce() (in module polars)": [[634, "polars.cumreduce"]], "cumsum() (in module polars)": [[635, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[636, "polars.cumsum_horizontal"]], "date() (in module polars)": [[637, "polars.date"]], "date_range() (in module polars)": [[638, "polars.date_range"]], "date_ranges() (in module polars)": [[639, "polars.date_ranges"]], "datetime() (in module polars)": [[640, "polars.datetime"]], "datetime_range() (in module polars)": [[641, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[642, "polars.datetime_ranges"]], "duration() (in module polars)": [[643, "polars.duration"]], "element() (in module polars)": [[644, "polars.element"]], "exclude() (in module polars)": [[645, "polars.exclude"]], "first() (in module polars)": [[646, "polars.first"]], "fold() (in module polars)": [[647, "polars.fold"]], "format() (in module polars)": [[648, "polars.format"]], "from_epoch() (in module polars)": [[649, "polars.from_epoch"]], "groups() (in module polars)": [[650, "polars.groups"]], "head() (in module polars)": [[651, "polars.head"]], "implode() (in module polars)": [[652, "polars.implode"]], "int_range() (in module polars)": [[653, "polars.int_range"]], "int_ranges() (in module polars)": [[654, "polars.int_ranges"]], "last() (in module polars)": [[655, "polars.last"]], "lit() (in module polars)": [[656, "polars.lit"]], "map() (in module polars)": [[657, "polars.map"]], "map_batches() (in module polars)": [[658, "polars.map_batches"]], "map_groups() (in module polars)": [[659, "polars.map_groups"]], "max() (in module polars)": [[660, "polars.max"]], "max_horizontal() (in module polars)": [[661, "polars.max_horizontal"]], "mean() (in module polars)": [[662, "polars.mean"]], "median() (in module polars)": [[663, "polars.median"]], "min() (in module polars)": [[664, "polars.min"]], "min_horizontal() (in module polars)": [[665, "polars.min_horizontal"]], "n_unique() (in module polars)": [[666, "polars.n_unique"]], "ones() (in module polars)": [[667, "polars.ones"]], "quantile() (in module polars)": [[668, "polars.quantile"]], "reduce() (in module polars)": [[669, "polars.reduce"]], "repeat() (in module polars)": [[670, "polars.repeat"]], "rolling_corr() (in module polars)": [[671, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[672, "polars.rolling_cov"]], "select() (in module polars)": [[673, "polars.select"]], "sql_expr() (in module polars)": [[674, "polars.sql_expr"]], "std() (in module polars)": [[675, "polars.std"]], "struct() (in module polars)": [[676, "polars.struct"]], "sum() (in module polars)": [[677, "polars.sum"]], "sum_horizontal() (in module polars)": [[678, "polars.sum_horizontal"]], "tail() (in module polars)": [[679, "polars.tail"]], "time() (in module polars)": [[680, "polars.time"]], "time_range() (in module polars)": [[681, "polars.time_range"]], "time_ranges() (in module polars)": [[682, "polars.time_ranges"]], "var() (in module polars)": [[683, "polars.var"]], "when() (in module polars)": [[684, "polars.when"]], "zeros() (in module polars)": [[685, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[708, "polars.LazyFrame.approx_n_unique"]], "approx_unique() (polars.lazyframe method)": [[709, "polars.LazyFrame.approx_unique"]], "bottom_k() (polars.lazyframe method)": [[710, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[711, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[712, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[713, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[714, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[715, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[716, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[717, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[718, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[719, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[720, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[721, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[722, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[723, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[724, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[725, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[726, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[727, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[728, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[729, "polars.LazyFrame.from_json"]], "group_by() (polars.lazyframe method)": [[730, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[731, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[732, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[733, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[734, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[735, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[736, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[737, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[738, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[739, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[740, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[741, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[742, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[743, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[744, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[745, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[746, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[747, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[748, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[749, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[750, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[751, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[752, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[753, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[754, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[755, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[756, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[757, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[758, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[759, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[760, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[761, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[762, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[763, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[764, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[765, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[766, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[767, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[768, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[769, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[770, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[771, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[772, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[773, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[774, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[775, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[776, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[777, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[778, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[779, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[780, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[781, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[782, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[783, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[784, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[785, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[786, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[787, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[788, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[789, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[790, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[791, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[792, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[793, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[794, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[795, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[796, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[797, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[798, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[799, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[800, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[807, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[807, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[807, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[807, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[807, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[807, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[807, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[807, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[807, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[807, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[807, "polars.selectors.first"]], "float() (in module polars.selectors)": [[807, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[807, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[807, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[807, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[807, "polars.selectors.matches"]], "module": [[807, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[807, "polars.selectors.numeric"]], "polars.selectors": [[807, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[807, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[807, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[807, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[807, "polars.selectors.time"]], "abs() (polars.series method)": [[809, "polars.Series.abs"]], "alias() (polars.series method)": [[810, "polars.Series.alias"]], "all() (polars.series method)": [[811, "polars.Series.all"]], "any() (polars.series method)": [[812, "polars.Series.any"]], "append() (polars.series method)": [[813, "polars.Series.append"]], "apply() (polars.series method)": [[814, "polars.Series.apply"]], "arccos() (polars.series method)": [[815, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[816, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[817, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[818, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[819, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[820, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[821, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[822, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[823, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[824, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[825, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[826, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[827, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[828, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[829, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[830, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[831, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[832, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[833, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[834, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[835, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[836, "polars.Series.cast"]], "cat (polars.series attribute)": [[837, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[838, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[839, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[840, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[841, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[842, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[843, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[844, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[845, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[846, "polars.Series.clear"]], "clip() (polars.series method)": [[847, "polars.Series.clip"]], "clip_max() (polars.series method)": [[848, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[849, "polars.Series.clip_min"]], "clone() (polars.series method)": [[850, "polars.Series.clone"]], "cos() (polars.series method)": [[851, "polars.Series.cos"]], "cosh() (polars.series method)": [[852, "polars.Series.cosh"]], "cot() (polars.series method)": [[853, "polars.Series.cot"]], "cummax() (polars.series method)": [[854, "polars.Series.cummax"]], "cummin() (polars.series method)": [[855, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[856, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[857, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[858, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[859, "polars.Series.cut"]], "describe() (polars.series method)": [[860, "polars.Series.describe"]], "diff() (polars.series method)": [[861, "polars.Series.diff"]], "dot() (polars.series method)": [[862, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[863, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[864, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[865, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[866, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[867, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[868, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[869, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[870, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[871, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[872, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[873, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[874, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[875, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[876, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[877, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[878, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[879, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[880, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[881, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[882, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[883, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[884, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[885, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[886, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[887, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[888, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[889, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[890, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[891, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[892, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[893, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[894, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[895, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[896, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[897, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[898, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[899, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[900, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[901, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[902, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[903, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[904, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[905, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[906, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[907, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[908, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[909, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[910, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[911, "polars.Series.dtype"]], "entropy() (polars.series method)": [[912, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[913, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[914, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[915, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[916, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[917, "polars.Series.exp"]], "explode() (polars.series method)": [[918, "polars.Series.explode"]], "extend() (polars.series method)": [[919, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[920, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[921, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[922, "polars.Series.fill_null"]], "filter() (polars.series method)": [[923, "polars.Series.filter"]], "flags (polars.series attribute)": [[924, "polars.Series.flags"]], "floor() (polars.series method)": [[925, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[926, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[927, "polars.Series.has_validity"]], "hash() (polars.series method)": [[928, "polars.Series.hash"]], "head() (polars.series method)": [[929, "polars.Series.head"]], "hist() (polars.series method)": [[930, "polars.Series.hist"]], "implode() (polars.series method)": [[931, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[932, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[933, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[934, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[935, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[936, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[937, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[938, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[939, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[940, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[941, "polars.Series.is_float"]], "is_in() (polars.series method)": [[942, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[943, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[944, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[945, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[946, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[947, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[948, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[949, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[950, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[951, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[952, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[953, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[954, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[955, "polars.Series.is_utf8"]], "item() (polars.series method)": [[956, "polars.Series.item"]], "kurtosis() (polars.series method)": [[957, "polars.Series.kurtosis"]], "len() (polars.series method)": [[958, "polars.Series.len"]], "limit() (polars.series method)": [[959, "polars.Series.limit"]], "list (polars.series attribute)": [[960, "polars.Series.list"]], "all() (polars.series.list method)": [[961, "polars.Series.list.all"]], "any() (polars.series.list method)": [[962, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[963, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[964, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[965, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[966, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[967, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[968, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[969, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[970, "polars.Series.list.difference"]], "drop_nulls() (polars.series.list method)": [[971, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[972, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[973, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[974, "polars.Series.list.first"]], "get() (polars.series.list method)": [[975, "polars.Series.list.get"]], "head() (polars.series.list method)": [[976, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[977, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[978, "polars.Series.list.join"]], "last() (polars.series.list method)": [[979, "polars.Series.list.last"]], "len() (polars.series.list method)": [[980, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[981, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[982, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[983, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[984, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[985, "polars.Series.list.reverse"]], "set_difference() (polars.series.list method)": [[986, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[987, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[988, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[989, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[990, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[991, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[992, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[993, "polars.Series.list.sum"]], "symmetric_difference() (polars.series.list method)": [[994, "polars.Series.list.symmetric_difference"]], "tail() (polars.series.list method)": [[995, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[996, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[997, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[998, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[999, "polars.Series.list.unique"]], "log() (polars.series method)": [[1000, "polars.Series.log"]], "log10() (polars.series method)": [[1001, "polars.Series.log10"]], "log1p() (polars.series method)": [[1002, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1003, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1004, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1005, "polars.Series.map_elements"]], "max() (polars.series method)": [[1006, "polars.Series.max"]], "mean() (polars.series method)": [[1007, "polars.Series.mean"]], "median() (polars.series method)": [[1008, "polars.Series.median"]], "min() (polars.series method)": [[1009, "polars.Series.min"]], "mode() (polars.series method)": [[1010, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1011, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1012, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1013, "polars.Series.name"]], "nan_max() (polars.series method)": [[1014, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1015, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1016, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1017, "polars.Series.not_"]], "null_count() (polars.series method)": [[1018, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1019, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1020, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1021, "polars.Series.peak_min"]], "product() (polars.series method)": [[1022, "polars.Series.product"]], "qcut() (polars.series method)": [[1023, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1024, "polars.Series.quantile"]], "rank() (polars.series method)": [[1025, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1026, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1027, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1028, "polars.Series.rename"]], "reshape() (polars.series method)": [[1029, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1030, "polars.Series.reverse"]], "rle() (polars.series method)": [[1031, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1032, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1033, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1034, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1035, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1036, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1037, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1038, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1039, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1040, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1041, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1042, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1043, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1044, "polars.Series.round"]], "sample() (polars.series method)": [[1045, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[1046, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1047, "polars.Series.series_equal"]], "set() (polars.series method)": [[1048, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1049, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1050, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1051, "polars.Series.shape"]], "shift() (polars.series method)": [[1052, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1053, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1054, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1055, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1056, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1057, "polars.Series.sign"]], "sin() (polars.series method)": [[1058, "polars.Series.sin"]], "sinh() (polars.series method)": [[1059, "polars.Series.sinh"]], "skew() (polars.series method)": [[1060, "polars.Series.skew"]], "slice() (polars.series method)": [[1061, "polars.Series.slice"]], "sort() (polars.series method)": [[1062, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1063, "polars.Series.sqrt"]], "std() (polars.series method)": [[1064, "polars.Series.std"]], "str (polars.series attribute)": [[1065, "polars.Series.str"]], "concat() (polars.series.str method)": [[1066, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1067, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1068, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1069, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1070, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1071, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1072, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1073, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1074, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1075, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1076, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[1077, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1078, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1079, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1080, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1081, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1082, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1083, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1084, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[1085, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1086, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1087, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1088, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1089, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1090, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1091, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1092, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1093, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1094, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1095, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1096, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1097, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1098, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1099, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1100, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1101, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1102, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1103, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1104, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1105, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1106, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1107, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1108, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1109, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1110, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1111, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1112, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1113, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1114, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1115, "polars.Series.sum"]], "tail() (polars.series method)": [[1116, "polars.Series.tail"]], "take() (polars.series method)": [[1117, "polars.Series.take"]], "take_every() (polars.series method)": [[1118, "polars.Series.take_every"]], "tan() (polars.series method)": [[1119, "polars.Series.tan"]], "tanh() (polars.series method)": [[1120, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1121, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1122, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1123, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1124, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1125, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1126, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1127, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1128, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1129, "polars.Series.top_k"]], "unique() (polars.series method)": [[1130, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1131, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1132, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1133, "polars.Series.value_counts"]], "var() (polars.series method)": [[1134, "polars.Series.var"]], "view() (polars.series method)": [[1135, "polars.Series.view"]], "zip_with() (polars.series method)": [[1136, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1152, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1152, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1152, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1152, "polars.SQLContext.__init__"]]}})